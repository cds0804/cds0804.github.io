<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>안녕하세요!! 목표는 1인분!</title>
  
  <subtitle>공부중</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cds0804.github/"/>
  <updated>2020-07-03T11:26:30.048Z</updated>
  <id>https://cds0804.github/</id>
  
  <author>
    <name>David Cho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sql where 조건절 02</title>
    <link href="https://cds0804.github/2020/07/02/sql_where_02/"/>
    <id>https://cds0804.github/2020/07/02/sql_where_02/</id>
    <published>2020-07-01T19:26:06.000Z</published>
    <updated>2020-07-03T11:26:30.048Z</updated>
    
    <content type="html"><![CDATA[<p><strong>WHRER 조건 절을 활용한 데이터 검색 02</strong></p><ol start="3"><li>논리 연산자 : 조건 논리를 계속 연결하기</li></ol><ul><li>AND(교집합) : 앞의 조건과 뒤의 조건을 동시에 만족해야 한다.</li><li>OR(합집합) : 앞의 조건과 뒤의 조건 중 한쪽이라도 참이면 참이다.</li><li>NOT : 뒤의 조건에 대해 반대 결과를 반환한다.</li></ul><p>(1) employees 테이블에서 salary가 4000을 초과하면서 job_id가 IT_PROG인 값을 조회하세요.</p><p>SELECT *<br>FROM employees<br>WHERE salary &gt; 4000<br>AND job_id = ‘IT_PROG’;</p><p>(2) employees 테이블에서 salary가 4000을 초과하면서, job_id가 IT_PROG거나 FI_ACCOUNT인 경우를 조회하세요.</p><p>SELECT *<br>FROM employees<br>WHERE salary &gt; 4000<br>AND job_id = ‘IT_PROG’<br>OR job_id = ‘FI_ACCOUNT’;</p><ol start="4"><li>부정 연산자의 종류</li></ol><ul><li>부정 비교</li></ul><ul><li>!= : 같지 않다.</li><li>&lt;&gt; : 같지 않다(ISO 표준).</li><li>NOT 열 이름 = : ~와 같지 않다.</li><li>NOT 열 이름 &gt; : ~보다 크지 않다.</li></ul><ul><li>부정 SQL</li></ul><ul><li>NOT BETWEEN a AND b : a와 b 사이에 값이 없다.</li><li>NOT IN (list) : list 값과 일치하지 않는다.</li><li>IS NOT NULL : null 값을 갖지 않는다.</li></ul><p>(1) employees 테이블에서 employee_id가 105가 아닌 직원을 조회해보세요.</p><p>SELECT *<br>FROM employees<br>WHERE employee_id &lt;&gt; 105;</p><p>(2) employees 테이블에서 manager_id가 null 값이 아닌 직원을 조회해 보세요.</p><p>SELECT *<br>FROM employees<br>WHERE manager_id IS NOT NULL;</p><blockquote><p><a href="https://thebook.io/006977/ch03/02/01/">자료출처: 모두의 SQL</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;WHRER 조건 절을 활용한 데이터 검색 02&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;논리 연산자 : 조건 논리를 계속 연결하기&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;AND(교집합) : 앞의 조건과 뒤의 조건을 동시
      
    
    </summary>
    
    
      <category term="sql" scheme="https://cds0804.github/categories/sql/"/>
    
      <category term="where" scheme="https://cds0804.github/categories/sql/where/"/>
    
    
      <category term="sql" scheme="https://cds0804.github/tags/sql/"/>
    
      <category term="where" scheme="https://cds0804.github/tags/where/"/>
    
  </entry>
  
  <entry>
    <title>sql where 조건절 01</title>
    <link href="https://cds0804.github/2020/06/21/sql_where_01/"/>
    <id>https://cds0804.github/2020/06/21/sql_where_01/</id>
    <published>2020-06-20T22:15:40.000Z</published>
    <updated>2020-07-03T11:26:34.039Z</updated>
    
    <content type="html"><![CDATA[<p><strong>WHERE 조건 절을 활용한 데이터 검색 01</strong></p><ul><li>사용자가 원하는 데이터를 조회할 때 사용하는 것이 where절</li><li>‘어디에서 어떻게’ 가져올지 정함</li></ul><p><strong>데이터가 조회되는 논리 순서</strong></p><ul><li>참조하려는 테이블로부터 (FROM)</li><li>해당 조건식으로 (WHERE)</li><li>열을 선택(SELECT)하여 조회합니다.</li></ul><p><strong>연산자 우선순위</strong></p><ul><li>괄호 &gt; 부정 연산 &gt; 비교 연산 &gt; SQL 연산 순으로 처리</li><li>논리 연산자는 NOT, AND, OR 순으로 처리</li></ul><ol><li><p>비교 연산자 : 비교 조회 조건 주기</p><ul><li>등호 연산자 =</li></ul><p>(1) employee_id가 100인 직원 정보를 출력하세요.</p><p>SELECT *<br> FROM employees<br> WHERE employee_id = 100;</p><p>(2) employees 테이블에서 first_name이 David인 직원 정보를 출력하세요.</p><p>SELECT *<br> FROM employees<br> WHERE first_name = ‘David’;</p><p>(3) employees 테이블에서 employee_id가 105이상인 직원 정보를 출력하세요.</p><p>SELECT *<br> FROM employees<br> WHERE employee_id &gt;= 105;</p></li><li><p>SQL 연산자 : 조회 조건 확장하기</p><ul><li>BETWEEN a AND b : a와 b 사이에 값이 있다.(a, b를 포함)</li><li>IN(list) : list 중 어느 값이라도 일치한다. 여러개의 값을 지정할 수 있다.</li><li>LIKE’비교 문자’ : 비교 문자와 형태가 일치한다(%, _ 사용)</li><li>IS NULL : null 값을 갖는다.</li></ul><p>(1) employees 테이블에서 salary가 10000 이상이고, 20000 이하인 직원 정보를 출력하세요.</p><p>SELECT *<br> FROM employees<br> WHERE salary BETWEEN 10000 AND 20000;</p><p>(2) employees 테이블에서 salary가 10000, 17000, 24000인 직원 정보를 출력하세요.</p><p>SELECT *<br> FROM employees<br> WHERE salary IN (10000, 17000, 24000);</p><p>(3) employees 테이블에서 job_id 값이 AD를 포함하는 모든(%) 데이터를 조회하세요.</p><p>SELECT *<br> FROM employees<br> WHERE job_id LIKE ‘AD%’;</p><p>(4) employees 테이블에서 AD를 포함하면서 AD 뒤에 따라오는 문자열이 3자리인 데이터 값을 갖는 직원 정보를 조회하세요.</p><p>SELECT *<br> FROM employees<br> WHERE job_id LIKE ‘AD___‘;</p><p>(5) employees 테이블에서 manager_id가 null 값인 직원 정보를 출력해 보세요.</p><p>SELECT *<br> FROM employees<br> WHERE manager_id IS NULL;</p></li></ol><blockquote><p><a href="https://thebook.io/006977/ch03/02/02/">자료출처: 모두의 SQL</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;WHERE 조건 절을 활용한 데이터 검색 01&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 원하는 데이터를 조회할 때 사용하는 것이 where절&lt;/li&gt;
&lt;li&gt;‘어디에서 어떻게’ 가져올지 정함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
    
      <category term="sql" scheme="https://cds0804.github/categories/sql/"/>
    
      <category term="where" scheme="https://cds0804.github/categories/sql/where/"/>
    
    
      <category term="sql" scheme="https://cds0804.github/tags/sql/"/>
    
      <category term="where" scheme="https://cds0804.github/tags/where/"/>
    
  </entry>
  
  <entry>
    <title>sql</title>
    <link href="https://cds0804.github/2020/06/21/sql_select_02/"/>
    <id>https://cds0804.github/2020/06/21/sql_select_02/</id>
    <published>2020-06-20T21:09:10.000Z</published>
    <updated>2020-07-03T11:26:32.813Z</updated>
    
    <content type="html"><![CDATA[<p><strong>select 문의 기본 문법</strong></p><ol><li><p>SQL문 작성 규칙</p><p>(1) 대소문자 구별 하지 않음</p><ul><li>명령어 대문자, 나머지 소문자로 작성하길 권장함</li></ul><p>(2) 한줄 또는 여러줄로 작성 가능</p><ul><li>코드 수준에 따른 들여쓰기는 SQL문장의 가독성을 좋게함</li></ul></li><li><p>전체 데이터 조회하기</p><p>(1) employees 테이블의 모든 정보를 출력하세요.</p><p>SELECT *<br> FROM employees;</p><ul><li><code>*</code> : 모든 열 조회</li><li>FROM : ~ 테이블로부터 라는 의미</li></ul></li><li><p>원하는 열만 조회하고 정렬하기<br>(1) employees 테이블에서 employees_id, first_name과 last_name을 출력하세요.</p><p>SELECT employees_id, first_name, last_name<br> FROM employees;</p><p>(2) employees 테이블에서 employee_id, first_name, last_name을 출력하고 employee_id를 기준으로 내림차순으로 정렬하세요.</p><p>SELECT employee_id, first_name, last_name<br>FROM employees<br> ORDER BY employee_id DESC;</p><ul><li>ORDER BY 명령문 default : 오름차순 정렬(ASC)</li><li>ORDER BY 열 이름, 열 이름 DESC, 열 이름 ASC 가능</li></ul></li><li><p>중복된 출력 값 제거하기</p><p>(1) employees 테이블에서 중복 값이 생기지 않도록 job_id를 출력하세요.<br>SELECT DISTINCT job_id<br> FROM employees;</p><ul><li>DISTINCT 명령어 뒤에 열 이름을 계속 나열하면 순서대로 DISTINCT가 모두 적용됨</li></ul></li><li><p>SQL 문을 효율적으로 작성하기 위해 별칭 사용하기<br>(1) employees 테이블에서 employees_id는 ‘사원번호’, first_name은 ‘이름’, last_name은 ‘성’으로 출력하세요.</p><p>SELECT employees_id AS 사원번호, first_name AS 이름, last_name AS 성<br> FROM employees;</p></li><li><p>데이터 값 연결하기<br>(1) employees 테이블에서 employees_id를 출력하고 first_name과 last_name을 붙여서 출력하세요.</p><p>SELECT employees_id, first_name||last_name<br> FROM employess;</p><p>(2) employees 테이블에서 employee_id를 출력하고, first_name과 last_name을 붙여서 출력하되 가운데 한 칸을 띄워주세요. 다음 열에는 email을 출력하되 @company.com 문구를 붙여서 출력하세요.</p><p>SELECT employee_id, first_name||’ ‘||last_name, email||@company.com<br> FROM employees;</p></li><li><p>산술 처리하기 : 데이터 값끼리 계산<br>(1) employees 테이블에서 employee_id, salary, salary에 500을 더한 값, 100을 뺀 값, 10%를 추가해서 2로 나눈 값을 출력하세요.</p><p>SELECT employee_id, salary, salary+500, salary-100, (salary<em>1.1)/2<br> FROM employees;<br>(2) employees에서 employee_id를 ‘사원번호’, salary를 ‘급여’, salary+500을 ‘추가급여’, salary-100을 ‘인하급여’, (salary</em>1.1)/2를 ‘조정급여’로 출력하세요.</p><p>SELECT employee_id AS 사원번호,<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; salary AS 급여,<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; salary+500 AS 추가급여,<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; salary-100 AS 인하급여,<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (salary*1.1)/2 AS 조정급여<br> FROM employees;</p></li></ol><blockquote><p><a href="https://thebook.io/006977/ch03/01/">자료출처: 모두의 SQL</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;select 문의 기본 문법&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SQL문 작성 규칙&lt;/p&gt;
&lt;p&gt;(1) 대소문자 구별 하지 않음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어 대문자, 나머지 소문자로 작성하길 권장함&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="sql" scheme="https://cds0804.github/categories/sql/"/>
    
      <category term="select" scheme="https://cds0804.github/categories/sql/select/"/>
    
    
      <category term="sql" scheme="https://cds0804.github/tags/sql/"/>
    
      <category term="select" scheme="https://cds0804.github/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>cosine 유사도</title>
    <link href="https://cds0804.github/2020/06/09/cosine_similarity/"/>
    <id>https://cds0804.github/2020/06/09/cosine_similarity/</id>
    <published>2020-06-09T02:38:19.000Z</published>
    <updated>2020-06-09T02:58:56.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>코사인 유사도(cosine similarity)</strong></p><ul><li>벡터의 내적 : 1부터 -1까지의 값을 가짐</li><li>0 = cos90° = 두 벡터의 방향이 서로 독립(유사하지 않음)</li><li>1 = cos0° = 두 벡터의 방향이 서로 완전히 같음</li><li>-1 = cos180° = 두 벡터의 방향이 서로 반대임</li></ul><p><strong>사용 분야</strong></p><ul><li>유사도 측정 시 사용</li><li>정보 검색 : 문서의 유사함을 측정하는 방법</li><li>텍스트 마이닝 : 클러스터의 응집도를 측정하는 방법</li><li>거리함수로 사용할 수 없음</li></ul><blockquote><p><a href="https://ko.wikipedia.org/wiki/%EC%BD%94%EC%82%AC%EC%9D%B8_%EC%9C%A0%EC%82%AC%EB%8F%84#:~:text=%EC%BD%94%EC%82%AC%EC%9D%B8%20%EC%9C%A0">위키백과 코사인 유사도</a></p></blockquote><blockquote><p><a href="http://blog.christianperone.com/2013/09/machine-learning-cosine-similarity-for-vector-space-models-part-iii/">참고 블로그</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;코사인 유사도(cosine similarity)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;벡터의 내적 : 1부터 -1까지의 값을 가짐&lt;/li&gt;
&lt;li&gt;0 = cos90° = 두 벡터의 방향이 서로 독립(유사하지 않음)&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="math" scheme="https://cds0804.github/categories/math/"/>
    
      <category term="cosine" scheme="https://cds0804.github/categories/math/cosine/"/>
    
    
      <category term="math" scheme="https://cds0804.github/tags/math/"/>
    
      <category term="cosine" scheme="https://cds0804.github/tags/cosine/"/>
    
  </entry>
  
  <entry>
    <title>sql과 database</title>
    <link href="https://cds0804.github/2020/06/09/sql_database_01/"/>
    <id>https://cds0804.github/2020/06/09/sql_database_01/</id>
    <published>2020-06-09T01:52:17.000Z</published>
    <updated>2020-06-20T22:21:28.506Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SQL</strong></p><ul><li>정형 데이터로 만들어진 관계형 데이터베이스를 조작하는 언어</li></ul><p><strong>데이터베이스</strong></p><ul><li>데이터 = 기록 정보</li><li>데이터를 모아둔 것</li></ul><p><strong>데이터의 형태</strong></p><ol><li>정형 데이터(structured data)</li></ol><ul><li>틀이 잡혀있는 체계화된 데이터</li><li>높은 안정성, 유연하지 못한 구조</li><li>금융, 제조 등 대부분 기업의 업무용 데이터 베이스</li></ul><ol start="2"><li>비정형 데이터(unstructured data)</li></ol><ul><li>클이 잡혀있지 않고 사전 정의가 없는 데이터</li><li>다양하고 방대한 양의 데이터</li><li>별도의 분석 처리 기술이 필요</li><li>텍스트, 이미지, 음원 데이터, 빅데이터 등</li></ul><p><strong>관계형 데이터베이스</strong></p><ul><li>컬럼과 로우를 갖는 2차원 테이블</li><li>오라클, DB2, MysQL, MS SQL Server 등</li></ul><p><strong>계층형 데이터베이스</strong></p><ul><li>로컬 pc의 폴더와 파일 형식</li><li>기업용 데이터베이스에는 거의 사용되지 않음</li></ul><p><strong>XML 데이터베이스</strong></p><ul><li>W3W(World Wide Web Consortium)의 XML 표준 문서 구조를 계층형 트리 형태로 저장하거나 관리</li><li>XQuery라는 언어를 사용</li></ul><blockquote><p><a href="https://thebook.io/006977/ch01/01/03/">자료출처</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정형 데이터로 만들어진 관계형 데이터베이스를 조작하는 언어&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;데이터베이스&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 = 기록 정보&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="sql" scheme="https://cds0804.github/categories/sql/"/>
    
      <category term="data shape" scheme="https://cds0804.github/categories/sql/data-shape/"/>
    
    
      <category term="sql" scheme="https://cds0804.github/tags/sql/"/>
    
      <category term="data shape" scheme="https://cds0804.github/tags/data-shape/"/>
    
  </entry>
  
  <entry>
    <title>python tuple unpacking</title>
    <link href="https://cds0804.github/2020/05/27/python_tuple_unpacking/"/>
    <id>https://cds0804.github/2020/05/27/python_tuple_unpacking/</id>
    <published>2020-05-27T14:43:18.000Z</published>
    <updated>2020-05-27T15:03:27.909Z</updated>
    
    <content type="html"><![CDATA[<p><strong>튜플 언패킹</strong></p><ul><li>파이썬에서 iterable한 객체는 sequence unpacking operator *를 사용하여 언패킹 할 수 있습니다. </li><li>변수를 할당하는 문장에서 왼쪽에 두 개 이상의 변수를 사용하고 한 변수 앞에 * 연산자가 붙으면, 오른쪽 값들 중 할당되고 남은 값들이 * 연산자가 붙은 변수에 할당됩니다. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, *y = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><blockquote><p>1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y</span><br></pre></td></tr></table></figure><blockquote><p>[2, 3, 4]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*x, y = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><blockquote><p>[1, 2, 3]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y</span><br></pre></td></tr></table></figure><blockquote><p>4</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;튜플 언패킹&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬에서 iterable한 객체는 sequence unpacking operator *를 사용하여 언패킹 할 수 있습니다. &lt;/li&gt;
&lt;li&gt;변수를 할당하는 문장에서 왼쪽에 두 
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="tuple unpacking" scheme="https://cds0804.github/categories/python/tuple-unpacking/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="tuple unpacking" scheme="https://cds0804.github/tags/tuple-unpacking/"/>
    
  </entry>
  
  <entry>
    <title>python 최대공약수(GCD)</title>
    <link href="https://cds0804.github/2020/05/25/python_GCD/"/>
    <id>https://cds0804.github/2020/05/25/python_GCD/</id>
    <published>2020-05-25T13:51:58.000Z</published>
    <updated>2020-05-26T06:23:27.492Z</updated>
    
    <content type="html"><![CDATA[<p><strong>최대공약수 greatest common divisor(GCD)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finding_gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>):</span><br><span class="line">        result = b</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_finding_gcd</span><span class="params">()</span>:</span></span><br><span class="line">    number1 = <span class="number">21</span></span><br><span class="line">    number2 = <span class="number">12</span></span><br><span class="line">    <span class="keyword">assert</span>(finding_gcd(number1, number2) == <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"테스트 통과!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    test_finding_gcd()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;최대공약수 greatest common divisor(GCD)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="GCD" scheme="https://cds0804.github/categories/python/GCD/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="GCD" scheme="https://cds0804.github/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>os와 shutil을 이용한 file_copy</title>
    <link href="https://cds0804.github/2020/05/22/python_file-copy/"/>
    <id>https://cds0804.github/2020/05/22/python_file-copy/</id>
    <published>2020-05-22T01:31:34.000Z</published>
    <updated>2020-05-22T01:41:21.099Z</updated>
    
    <content type="html"><![CDATA[<p><strong>os와 shutil(쉘 유틸리티) 모듈을 이용하여 파일 옮기기</strong></p><ul><li>진행하려는 내용</li><li>naver_12와 naver_22의 내부에 있는 모든 파일을 naver_34폴더로 옮기려 합니다. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 모듈 불러오기</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil <span class="comment"># 쉘 유틸리티</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 현재 작업경로 확인</span></span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 작업경로 내부 파일 리스트</span></span><br><span class="line">os.listdir(os.getcwd())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파일을 복사해올 소스 경로</span></span><br><span class="line">base_dir = <span class="string">'/Users/daesuncho/Documents/Machine_Learning/project'</span></span><br><span class="line"><span class="comment"># 소스경로</span></span><br><span class="line">src_dir = os.path.join(base_dir, <span class="string">'naver_12'</span>)</span><br><span class="line">src_dir1 = os.path.join(base_dir, <span class="string">'naver_22'</span>)</span><br><span class="line"><span class="comment"># 도착경로</span></span><br><span class="line">dst_dir = os.path.join(base_dir, <span class="string">'naver_34'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 내부 파일 숫자 확인</span></span><br><span class="line">naver_12 = os.listdir(src_dir)</span><br><span class="line">naver_22 = os.listdir(src_dir1)</span><br><span class="line">len(naver_12), len(naver_22), print(len(naver_12)+len(naver_22))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># src_dir에 있는 모든 파일을 dst_dir폴더로 옮기기</span></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> naver_12:</span><br><span class="line">    src = os.path.join(src_dir, fname)</span><br><span class="line">    dst = os.path.join(dst_dir, fname)</span><br><span class="line">    shutil.copyfile(src, dst)</span><br><span class="line"><span class="comment"># src_dir에 있는 모든 파일을 dst_dir폴더로 옮기기</span></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> naver_22:</span><br><span class="line">    src1 = os.path.join(src_dir1, fname)</span><br><span class="line">    dst = os.path.join(dst_dir, fname)</span><br><span class="line">    shutil.copyfile(src1, dst)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dst_dir 폴더 내부의 수량 확인하기</span></span><br><span class="line">dstfolder = os.listdir(dst_dir)</span><br><span class="line">len(dstfolder)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자가 1개 모자라는 이유 파악하기</span></span><br><span class="line"><span class="comment"># 특정이름의 파일 가져오기</span></span><br><span class="line">path_dir = <span class="string">'./naver_34/'</span> <span class="comment"># file path</span></span><br><span class="line">file_list = os.listdir(path_dir) <span class="comment"># 파일이름을 변수에 담고</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> file_list:</span><br><span class="line">    <span class="keyword">if</span> item.find(<span class="string">'DS'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">-1</span>:</span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;os와 shutil(쉘 유틸리티) 모듈을 이용하여 파일 옮기기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;진행하려는 내용&lt;/li&gt;
&lt;li&gt;naver_12와 naver_22의 내부에 있는 모든 파일을 naver_34폴더로 옮기려 합니다.
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="os" scheme="https://cds0804.github/categories/python/os/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="os" scheme="https://cds0804.github/tags/os/"/>
    
      <category term="shutil" scheme="https://cds0804.github/tags/shutil/"/>
    
  </entry>
  
  <entry>
    <title>numpy_indexing &amp; slicing</title>
    <link href="https://cds0804.github/2020/05/21/python_numpy-indexing/"/>
    <id>https://cds0804.github/2020/05/21/python_numpy-indexing/</id>
    <published>2020-05-21T04:43:02.000Z</published>
    <updated>2020-05-21T05:37:42.070Z</updated>
    
    <content type="html"><![CDATA[<p><strong>numpy indexing &amp; slicing</strong></p><ul><li><p>인덱싱</p><ul><li>파이썬 리스트와 동일한 개념으로 사용</li><li>, 를 사용하여 각 차원의 인덱스에 접근 가능</li></ul></li><li><p>1차원 벡터 인덱싱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1차원 벡터 인덱싱</span></span><br><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 첫번째, 마지막, 4번째</span></span><br><span class="line">x[<span class="number">0</span>], x[<span class="number">-1</span>], x[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4번째 값을 100으로 변경</span></span><br><span class="line">x[<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></li><li><p>2차원 행렬 인덱싱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0번째 행의 2번째 열의 값 가져오기</span></span><br><span class="line">x[<span class="number">0</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>3차원 행렬 인덱싱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4행 3열의 행렬이 3개를 만듬</span></span><br><span class="line">x = np.arange(<span class="number">36</span>).reshape(<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0번째 행렬을 가져옴</span></span><br><span class="line">x[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 인덱스를 하나 명시할 때마다 차원이 하나씩 줄어듬</span></span><br><span class="line">x[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><p><strong>슬라이싱</strong></p><ul><li>리스트, 문자열 slicing과 동일한 개념으로 사용</li><li>, 를 사용하여 각 차원 별로 슬라이싱 가능</li><li>슬라이싱으로 해도 차원이 바뀌지 않음</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">1</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 슬라이싱을 해도 차원이 바뀌지는 않음</span></span><br><span class="line">x[:]</span><br></pre></td></tr></table></figure><ul><li>2차원 행렬 슬라이싱<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6, 7, 8 가져오기</span></span><br><span class="line"><span class="comment"># 모든 행 가져오기 x[:]</span></span><br><span class="line"><span class="comment"># 컬럼부분 가져오기 x[:, 1:4]</span></span><br><span class="line">x[:, <span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 모든 행의 앞의 2번째만 가져오기 </span></span><br><span class="line">x[:, :<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 인덱싱과 슬라이싱 혼합</span></span><br><span class="line"><span class="comment"># 0번째를 가져오고 2번째에서 자름</span></span><br><span class="line"><span class="comment"># 앞에 0을 사용하여 인덱스를 사용하여 차원이 하나 줄음</span></span><br><span class="line"><span class="comment"># 크기가 2인 벡터</span></span><br><span class="line">x[<span class="number">0</span>, :<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자원을 유지하면서 위와 동일한 값 가져오기</span></span><br><span class="line">x[:<span class="number">1</span>, :<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li>3차원 텐서 슬라이싱<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 차원을 유지하면서 0, 1, 2, 3, 4, 5가져오기</span></span><br><span class="line"><span class="comment"># x[:1]첫번째 행렬 가져오기</span></span><br><span class="line">x[:<span class="number">1</span>, :<span class="number">2</span>, :]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2차원 행렬에서 0, 1, 2, 3, 4, 5가져오기</span></span><br><span class="line"><span class="comment"># x[:1]첫번째 행렬 가져오기</span></span><br><span class="line">x[<span class="number">0</span>, :<span class="number">2</span>, :]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;numpy indexing &amp;amp; slicing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;인덱싱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 리스트와 동일한 개념으로 사용&lt;/li&gt;
&lt;li&gt;, 를 사용하여 각 차원의 인덱스에 접근 가능&lt;/l
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="numpy" scheme="https://cds0804.github/categories/python/numpy/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="numpy" scheme="https://cds0804.github/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>numpy 모듈을 사용하여 ndarray 데이터 생성하기</title>
    <link href="https://cds0804.github/2020/05/21/python_numpy/"/>
    <id>https://cds0804.github/2020/05/21/python_numpy/</id>
    <published>2020-05-21T03:40:35.000Z</published>
    <updated>2020-05-25T14:17:12.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong>numpy 모듈을 사용하여 ndarray 데이터 생성하기</strong></p><ul><li><p><a href="https://www.numpy.org">numpy</a></p><ul><li>넘파이</li><li>수치해석용 Python 라이브러리</li><li>CPython에서만 사용 가능</li><li>BLAS/LAPACK 기반</li><li>ndarray 다차원 행렬 자료 구조 제공</li><li>내부 반복문 사용으로 빠른 행렬 연산 가능</li><li>행렬 인덱싱(array indexing) 기능<blockquote><p><a href="https://datascienceschool.net/view-notebook/416d733c3a734565b69fd0c8dc959edb/">데이터 사이언스 스쿨</a></p></blockquote></li></ul></li><li><p>ndarray 클래스</p><ul><li>다차원 행렬 자료 구조를 지원</li><li>벡터화 연산(vectorized operation) 지원</li></ul></li><li><p>Python 리스트</p><ul><li>여러가지 타입의 원소</li><li>linked List 구현</li><li>메모리 용량이 크고 속도가 느림</li><li>벡터화 연산 불가</li></ul></li><li><p>NumPy ndarray</p><ul><li>동일 타입의 원소</li><li>contiguous memory layout</li><li>메모리 최적화, 계산 속도 향상</li><li>벡터화 연산 가능</li></ul></li><li><p>행렬의 차원 및 크기는 ndim 속성과 shape 속성으로 알 수 있다. </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 필요 모듈 호출</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1차원 벡터</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># 2차원 행렬(2행 3열), 리스트안에 리스트로 만듬</span></span><br><span class="line">y = np.array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]])</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment"># 타입 확인</span></span><br><span class="line">print(type(y))</span><br><span class="line"><span class="comment"># 차원 확인</span></span><br><span class="line">print(x.ndim, y.ndim)</span><br></pre></td></tr></table></figure><p><strong>np.arange 함수로 생성하기</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0 ~ 9까지 ndarray 생성</span></span><br><span class="line">np.arange(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 ~ 9까지 ndarray 생성</span></span><br><span class="line">np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 ~ 9까지 2칸씩 띄어서 생성</span></span><br><span class="line">np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5 ~ 100까지 5의 배수 생성</span></span><br><span class="line">np.arange(<span class="number">5</span>, <span class="number">101</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>zeros, ones</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4행 5열의 모든 원소가 1인 ndarray 생성, 튜플을 이용하여 생성</span></span><br><span class="line">np.ones((<span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3차원 tensor 생성</span></span><br><span class="line"><span class="comment"># 3행 4열의 행렬 2개, 대괄호가 3개 생김</span></span><br><span class="line">np.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4차원 생성</span></span><br><span class="line"><span class="comment"># 대괄호가 4개 생김</span></span><br><span class="line">np.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 초기화된 ndarray 생성</span></span><br><span class="line">np.empty((<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7로만 이루어진 tensor 생성</span></span><br><span class="line">np.full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5행 5열의 단위 행렬 2차원</span></span><br><span class="line"><span class="comment"># 대각선의 모든 값이 1, 나머지 0</span></span><br><span class="line">np.eye(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>np.linspace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 시작, 끝, 전체 수가 3개가 되도록 나눔</span></span><br><span class="line"><span class="comment"># 원소간의 차이가 동일하게 만듬</span></span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자 사이 간격이 동일하게</span></span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4등분, 전체 갯수 5</span></span><br><span class="line"><span class="comment"># 그래프에서 x축에 균등하게 값을 줄 때 사용</span></span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>reshape</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 ~ 15까지 벡터 생성</span></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">16</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1차원의 shape</span></span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2차원의 행렬로 형태를 바꿈, 3행 5열로 변경</span></span><br><span class="line">x.reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x. reshape(<span class="number">5</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3차원으로 바꿈, 3행 1열이 5개</span></span><br><span class="line">x.reshape(<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자 20개 필요하나 x안에는 15개만 있으므로 대응이 불가능하여 오류 발생</span></span><br><span class="line"><span class="comment"># reshape 하려는 숫자가 원래 존재하는 숫자와 동일한지 확인 필요</span></span><br><span class="line">x.reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>random 서브 모듈 이용하여 ndarray 생성히기</strong></p><ul><li>랜덤한 값을 생성</li><li>보통 train 전 초반에 무작위 값을 생성</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rand 함수, 2행 3열의 랜덤한 값 생성</span></span><br><span class="line"><span class="comment"># 0과 1 사이의 값이 생성</span></span><br><span class="line">np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1차원 벡터</span></span><br><span class="line">np.random.rand(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3차원 tensor, 4행 2열</span></span><br><span class="line">np.random.rand(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규분포, n: normal distribution(정규분포)</span></span><br><span class="line"><span class="comment"># 정규분포로 샘플링된 랜덤 ndarrya 생성</span></span><br><span class="line"><span class="comment"># 정규분포이므로 음수값도 생성</span></span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>randint 함수</strong></p><ul><li>정수에서 샘플링할 때 사용</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정수에서 샘플링할 때 사용</span></span><br><span class="line"><span class="comment"># 1 ~ 99, 3행 5열 2차원 행렬</span></span><br><span class="line">np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><strong>seed 함수</strong></p><ul><li>랜덤한 값을 동일하게 다시 생성하고자 할 때 사용</li><li>고정된 랜덤 값</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 항상 호출 전 동일한 값을 갖고 싶을 때 사용</span></span><br><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>choice</strong></p><ul><li>주어진 1차원 ndarray로부터 랜덤으로 샘플링</li><li>정수가 주어진 경우, np.arange(해당숫자)로 간주</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정수 : 100</span></span><br><span class="line"><span class="comment"># size 샘플링을 3, 4로 가져옴</span></span><br><span class="line">np.random.choice(<span class="number">100</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 중복 허용</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.5</span>, <span class="number">2.6</span>, <span class="number">4.9</span>])</span><br><span class="line">np.random.choice(x, size=(<span class="number">2</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 중복 x</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.5</span>, <span class="number">2.6</span>, <span class="number">4.9</span>])</span><br><span class="line">np.random.choice(x, size=(<span class="number">2</span>, <span class="number">2</span>), replace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 확률분포에 따른 ndarray 생성</span></span><br><span class="line"><span class="comment"># uniform : low에서 high 사이의 값을 가져옴</span></span><br><span class="line"><span class="comment"># normal 등</span></span><br><span class="line">np.random.uniform(<span class="number">1.0</span>, <span class="number">3.0</span>, size=(<span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규분포</span></span><br><span class="line">np.random.normal(size=(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정규분포 : 평균, 분포, 사이즈 </span></span><br><span class="line">np.random.normal(size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 아래와 동일</span></span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;numpy 모듈을 사용하여 ndarray 데이터 생성하기&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.numpy.org&quot;&gt;numpy&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;넘파이&lt;/li&gt;
&lt;li&gt;수치해석
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="numpy" scheme="https://cds0804.github/categories/python/numpy/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="numpy" scheme="https://cds0804.github/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>machine_learning CNN</title>
    <link href="https://cds0804.github/2020/05/17/ML_CNN/"/>
    <id>https://cds0804.github/2020/05/17/ML_CNN/</id>
    <published>2020-05-16T15:36:07.000Z</published>
    <updated>2020-06-10T08:26:04.877Z</updated>
    
    <content type="html"><![CDATA[<p><strong>C.N.N</strong></p><ul><li>Convolutional Neural Network </li><li>이미지 공간의 정보를 유지한 상태로 학습이 가능한 모델</li></ul><p><strong>CNN의 주요 용어 정리</strong></p><ul><li>Convolution(합성곱)<ul><li>원본 이미지와 필터의 곱</li></ul></li><li>채널(Channel)<ul><li>이미지 픽셀 1개 = 하나의 실수(scalar)</li><li>컬러사진: 3차원 * 높이 150 * 길이 250 = shape(150 * 250 * 3)</li><li>흑백사진: 1차원 * 높이 150 * 길이 250 = shape(150 * 250 * 1)</li></ul></li><li>필터(Filter, kernel)<ul><li>1개의 filter = 1개의 feature map</li><li>convolution layer에 n개의 filter필터가 적용된다면 출력데이터는 n개의 채널을 갖습니다. </li></ul></li><li>커널(Kernel)</li><li>스트라이드(Strid)<ul><li>필터가 순회하는 지정된 간격</li></ul></li><li>패딩(Padding)<ul><li>Padding을 통해서 Convolution 레이어의 출력 데이터의 사이즈를 조절하는 기능이 외에, 외각을 “0”값으로 둘러싸는 특징으로 부터 인공 신경망이 이미지의 외각을 인식하는 학습 효과도 있습니다.</li></ul></li><li>피처 맵(Feature Map)</li><li>액티베이션 맵(Activation Map)</li><li>풀링(Pooling) 레이어<ul><li>일반적으로 Pooing 크기와 Stride를 같은 크기로 설정하여 모든 원소가 한 번씩 처리 되도록 설정합니다.</li><li>CNN에서는 주로 Max Pooling을 사용합니다.</li></ul></li></ul><p><strong>2.1 Convolution 레이어 출력 데이터 크기 산정</strong></p><ul><li>입력 데이터 높이: H</li><li>입력 데이터 폭: W</li><li>필터 높이: FH</li><li>필터 폭: FW</li><li>Strid 크기: S</li><li>패딩 사이즈: P<br>\begin{align}<br>OutputHeight &amp; = OH = \frac{(H + 2P - FH)}{S} + 1 \<br>OutputWeight &amp; = OW = \frac{(W + 2P - FW)}{S} + 1<br>\end{align}</li><li>만약 Pooling 사이즈가 (3, 3)이라면 위 식의 결과는 자연수이고 3의 배수여야 합니다. 이 조건을 만족하도록 Filter의 크기, Stride의 간격, Pooling 크기 및 패딩 크기를 조절해야 합니다.</li></ul><p><strong>2.2 Pooling 레이어 출력 데이터 크기 산정</strong></p><ul><li><p>일반적인 Pooling 사이즈는 정사각형입니다.</p></li><li><p>Pooling 사이즈를 Stride 같은 크기로 만들어서, 모든 요소가 한번씩 Pooling되도록 만듭니다. </p></li><li><p>입력 데이터의 행 크기와 열 크기는 Pooling 사이즈의 배수(나누어 떨어지는 수)여야 합니다.</p></li><li><p>결과적으로 Pooling 레이어의 출력 데이터의 크기는 행과 열의 크기를 Pooling 사이즈로 나눈 몫입니다.</p></li><li><p>Pooling 크기가 (2, 2) 라면 출력 데이터 크기는 입력 데이터의 행과 열 크기를 2로 나눈 몫입니다. pooling 크기가 (3, 3)이라면 입력데이터의 행과 크기를 3으로 나눈 몫이 됩니다.</p></li><li><p>CNN을 구성하면서 Filter, Stride, Padding을 조절하여 특징 추출(Feature Extraction) 부분의 입력과 출력 크기를 계산하고 맞추는 작업이 중요합니다. </p></li></ul><blockquote><p><a href="http://taewan.kim/post/cnn/">자료 출처</a></p></blockquote><p><strong>케라스 CNN model 중간 저장</strong></p><blockquote><p><a href="https://teddylee777.github.io/tensorflow/keras-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98-vol-03">자료 출처</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;C.N.N&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convolutional Neural Network &lt;/li&gt;
&lt;li&gt;이미지 공간의 정보를 유지한 상태로 학습이 가능한 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CNN의 주요 용
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="machine_learning" scheme="https://cds0804.github/categories/python/machine-learning/"/>
    
      <category term="CNN" scheme="https://cds0804.github/categories/python/machine-learning/CNN/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="CNN" scheme="https://cds0804.github/tags/CNN/"/>
    
      <category term="machine_learning" scheme="https://cds0804.github/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>python function</title>
    <link href="https://cds0804.github/2020/05/10/python_function/"/>
    <id>https://cds0804.github/2020/05/10/python_function/</id>
    <published>2020-05-10T05:01:13.000Z</published>
    <updated>2020-06-26T09:12:30.472Z</updated>
    
    <content type="html"><![CDATA[<p><strong>함수</strong></p><ul><li>반복되는 코드를 묶음으로 효율적인 코드를 작성하도록 해주는 기능</li><li>기본 함수</li><li>파라미터와 아규먼트</li><li>리턴</li><li><em>args, *</em>kwargs</li><li>docstring</li><li>scope</li><li>inner function</li><li>lambda function</li><li>Map, Filter, Reduce</li><li>Decorlator</li></ul><p><strong>1. 기본 함수</strong></p><ul><li>함수의 선언과 호출<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수선언</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(point)</span>:</span> <span class="comment"># def : 예약어, 함수이름 : grade, 파라미터 : point</span></span><br><span class="line">    <span class="keyword">if</span> point &gt;= <span class="number">90</span>:</span><br><span class="line">        print(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">elif</span> point &gt;= <span class="number">80</span>:</span><br><span class="line">        print(<span class="string">"B"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"C"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수호출</span></span><br><span class="line">grade(<span class="number">88</span>) <span class="comment"># 함수이름(point로 넘겨줄 값을 입력)</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 파라미터와 아규먼트</strong></p><ul><li>파라미터: 함수를 선언할 때 호출하는 부분에서 보내주는 데이터를 받는 변수</li><li>아규먼트: 함수를 호출할 때 함수에 보내주는 데이터</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span> <span class="comment"># 파라미터</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 아규먼트</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2=<span class="number">10</span>)</span>:</span> <span class="comment"># 디폴트 파라미터</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 아규먼트</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2=<span class="number">10</span>, num3=<span class="number">20</span>)</span>:</span> <span class="comment"># 디폴트 파라미터</span></span><br><span class="line">    print(num1 + num2 - num3)</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 아규먼트</span></span><br></pre></td></tr></table></figure><ul><li>키워드 아규먼트 : 특정 파라미터를 지정해서 넣고 싶을 때 사용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plus(<span class="number">3</span>, num3=<span class="number">100</span>) <span class="comment"># 키워드 아규먼트</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 리턴</strong></p><ul><li>함수를 실행한 결과를 저장하고 싶을 때 사용합니다. </li><li>함수에서 return 코드가 실행되면 무조건 함수가 종료됩니다. </li><li>return<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line"></span><br><span class="line">result = plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">result = plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(point)</span>:</span> <span class="comment"># def : 예약어, 함수이름 : grade, 파라미터 : point</span></span><br><span class="line">    <span class="keyword">if</span> point &gt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">elif</span> point &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line">grade(<span class="number">90</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passornot</span><span class="params">(result)</span>:</span></span><br><span class="line">    pass_ = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> result == <span class="string">"A"</span> <span class="keyword">or</span> result == <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PASS"</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FAIL"</span></span><br><span class="line">passornot(<span class="string">"A"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(point)</span>:</span> <span class="comment"># def : 예약어, 함수이름 : grade, 파라미터 : point</span></span><br><span class="line">    <span class="keyword">if</span> point &gt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">elif</span> point &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passornot</span><span class="params">(result)</span>:</span></span><br><span class="line">    pass_ = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> result == <span class="string">"A"</span> <span class="keyword">or</span> result == <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PASS"</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FAIL"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 호출하기</span></span><br><span class="line">passornot(grade(<span class="number">98</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수에서 return 코드가 실행되면 무조건 함수가 종료됩니다. </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure></li></ul><p><strong>4. <em>args, *</em>kwargs</strong></p><ul><li>함수를 호출할 때 아규먼트와 키워드 아규먼트의 갯수를 특정지을 수 없을 때 사용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 갯수에 상관없이 모든 아규먼트를 더해주는  함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(type(args), args)</span><br><span class="line">    <span class="keyword">return</span> sum(args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 호출</span></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 키워드가 있는 아규먼트</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(type(args), args)</span><br><span class="line">    print(type(kwargs), kwargs)</span><br><span class="line">    <span class="keyword">return</span> sum(args) + sum(kwargs.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 실행</span></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, num1=<span class="number">6</span>, num2=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2, num3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(*data) <span class="comment"># func(1, 2, 3)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2=<span class="number">10</span>, num3=<span class="number">20</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(num1) + num2 + num3</span><br><span class="line">    </span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(data) <span class="comment"># func([1, 2, 3])</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2, num3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(*data) <span class="comment"># func(1, 2, 3)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2, num3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"num2"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"num3"</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">1</span>, **data) <span class="comment"># func(1, num2=100, num3=200)</span></span><br></pre></td></tr></table></figure></li><li>문장을 입력받아서 문법에 맞도록 결과를 출력하는 코드를 작성</li><li>마지막 문자는 . 이 있을수도 있고 없을수도 있습니다. </li><li>논리적인 문제해결 순서 -&gt; 코드로 변경</li><li>str.upper(), str.lower(), offset index [], str.<strong>add</strong>(문자열 덧셈)</li><li>python IS the best Language</li><li>python IS the best Language.</li><li>Python is the best lagnuage.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 문자열 입력받기</span></span><br><span class="line">sentence = input(<span class="string">'input sentence : '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 모두 소문자로 변경</span></span><br><span class="line">result = sentence.lower() <span class="comment"># lower함수는 리턴이 있는 함수이므로 result에 저장</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 가장 앞글자를 대문자로 변경</span></span><br><span class="line">result = result[<span class="number">0</span>].upper() + result[<span class="number">1</span>:] <span class="comment"># 가장 앞글자 + 나머지 글자</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 마지막 문자가 .인지 확인해서 .이 아니면 .을 추가</span></span><br><span class="line"><span class="keyword">if</span> result[<span class="number">-1</span>] != <span class="string">"."</span>:</span><br><span class="line">    result += <span class="string">"."</span></span><br><span class="line"></span><br><span class="line">result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6자리의 로또번호를 생성하는 코드를 작성하세요. </span></span><br><span class="line"><span class="comment"># 6자리의 번호는 중복이 없어야 합니다. </span></span><br><span class="line"><span class="comment"># 문자열, 숫자, 리스트</span></span><br><span class="line"><span class="comment"># while, not in, in, list.append(), break, len(), list.sort()</span></span><br><span class="line"><span class="comment"># 문제가 조금 복잡하면 간단한 기능부터 구현하고 업데이트를 하는 방법으로 해결</span></span><br><span class="line"><span class="comment"># 랜덤한 숫자 6개 출력 -&gt; 숫자가 중복되지 않는 코드를 추가</span></span><br><span class="line"></span><br><span class="line">lotto = []</span><br><span class="line"><span class="comment"># 랜덤한 숫자 6개를 while문을 사용해서 작성</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num = random.randint(<span class="number">1</span>, <span class="number">45</span>)</span><br><span class="line">    <span class="comment"># 숫자를 추가할 때 lotto 리스트에 중복되는 숫자가 없으면 추가</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> lotto:   </span><br><span class="line">        lotto.append(num)</span><br><span class="line">        <span class="keyword">if</span> len(lotto) &gt;= <span class="number">6</span>:</span><br><span class="line">            lotto.sort() </span><br><span class="line">        </span><br><span class="line">            <span class="keyword">break</span>     </span><br><span class="line">lotto</span><br></pre></td></tr></table></figure></li></ul><p><strong>5. docstring</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 한줄로 작성</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="string">"echo print msg"</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    echo func return its input agument</span></span><br><span class="line"><span class="string">    The operation is:</span></span><br><span class="line"><span class="string">        1. print msg parameter</span></span><br><span class="line"><span class="string">        2. return msg parameter</span></span><br><span class="line"><span class="string">    param : mag : str</span></span><br><span class="line"><span class="string">    return : str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docstring 확인 방법</span></span><br><span class="line">echo?</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo??</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help(echo)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(echo.__doc__)</span><br></pre></td></tr></table></figure><p><strong>6. Scope 범위</strong></p><ul><li>함수 안에서 선언되는 변수와 함수 밖에서 선언되는 변수의 범위가 다릅니다. </li><li>global(전역), local(지역)</li><li>전역영역에 선언되어있으면 함수가 실행될 때 전역영역의 변수를 가져다 사용합니다. </li><li>지역영역에 선언되어있으면 함수가 실행될 때 지역영역의 변수를 가져다 사용합니다. </li><li>메모리를 덜 잡아먹기 때문에 로컬영역에서 선언할 수 있으면 로컬에서 선언하는 것이 좋습니다. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global</span></span><br><span class="line">gv = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">    print(gv)</span><br><span class="line"></span><br><span class="line">echo()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line">gv = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">    gv = <span class="number">100</span></span><br><span class="line">    print(gv)</span><br><span class="line"></span><br><span class="line">echo() <span class="comment"># 100</span></span><br><span class="line">gv <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gv = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gv</span><br><span class="line">    gv=<span class="number">100</span></span><br><span class="line">    print(gv)</span><br><span class="line"></span><br><span class="line">echo()</span><br><span class="line">gv <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p><strong>7. inner function</strong></p><ul><li>함수가 지역영역에 선언, 함수 안에 함수가 선언<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(c, d)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> c + d</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner(a, b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outer(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inner(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 오류발생 : 전역영역에서 지역영역의 함수를 사용하려 했기 때문입니다. 지역영역에 선언된 함수이므로 지역영역에서만 사용할 수 있습니다.</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>inner함수 = 익명함수라고 부릅니다. 전역영역에서 가져다 사용할 수 없는 함수이기 때문입니다.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지역영역의 함수 사용하기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(c, d)</span>:</span></span><br><span class="line">        print(a, b)</span><br><span class="line">        <span class="keyword">return</span> c + d</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment"># 리턴을 변경시켜주고</span></span><br><span class="line"></span><br><span class="line">outer(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>) <span class="comment"># inner(3, 4)</span></span><br></pre></td></tr></table></figure><p><strong>8. callback function</strong></p><ul><li>함수를 아규먼트, 파라미터로 설정해서 사용하는 것을 의미합니다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(func, a, b)</span>:</span></span><br><span class="line">    <span class="comment"># code</span></span><br><span class="line">    a **= <span class="number">2</span></span><br><span class="line">    b **= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> func(a, b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 덧셈</span></span><br><span class="line">calc(plus, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 뺄셈</span></span><br><span class="line">calc(minus, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>9. lambda function</strong></p><ul><li>파라미터를 간단한 계산으로 리턴되는 함수 : 삼항연산<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span> <span class="comment"># 파라미터</span></span><br><span class="line">    <span class="keyword">return</span> a + b <span class="comment"># 리턴</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda 파라미터: 리턴</span></span><br><span class="line">plus2 = <span class="keyword">lambda</span> a, b: a + b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plus2(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc(<span class="keyword">lambda</span> a, b: a + b, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>10. Map, Filter, Reduce</strong></p><ul><li>map: 순서가 있는 데이터 집합에서 모든 값에 함수를 적용시킨 결과를 출력</li><li>아규먼트로 func(함수), *iterable을 받음</li><li>iterable 한 데이터에 함수를 각 요소마다 모두 적용시킨 결과 데이터를 만들고 싶을 때 사용합니다. </li><li>map(func, ls1, ls2) : ls(iterable한 데이터)가 여러개 올 수 있습니다. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd_even</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'odd'</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> <span class="string">'even'</span></span><br><span class="line"></span><br><span class="line">odd_even(<span class="number">3</span>), odd_even(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(odd_even, ls)) <span class="comment"># 함수, 리스트를 넣음</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input 함수로 구분자는 " "으로 여러개의 숫자를 입력 받습니다. </span></span><br><span class="line"><span class="comment"># str.split(" ")리스트로 만들고</span></span><br><span class="line"><span class="comment"># 만들어진 리스트의 값들을 int로 형변환</span></span><br><span class="line">datas = input(<span class="string">"insert numbers : "</span>) <span class="comment"># 10 20 30 40 50 40 30 20 10</span></span><br><span class="line">result = datas.split(<span class="string">" "</span>)</span><br><span class="line">result</span><br><span class="line">``` </span><br><span class="line">```python</span><br><span class="line">result = list(map(int, result))</span><br><span class="line">result</span><br></pre></td></tr></table></figure><p><strong>10-2. Filter</strong></p><ul><li>Filter : 리스트 데이터에서 특정 조건에 맞는 value만 남기는 함수</li><li>filter(func, ls) : ls(iterable한 데이터)가 1개밖에 못옵니다. </li><li>True, False로 만듭니다. </li><li>func is True인 것만 리턴합니다. <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = range(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 홀수만 출력</span></span><br><span class="line">list(filter(<span class="keyword">lambda</span> data: <span class="literal">True</span> <span class="keyword">if</span> data % <span class="number">2</span> <span class="keyword">else</span> <span class="literal">False</span>, ls))</span><br></pre></td></tr></table></figure></li></ul><p><strong>10-3. Reduce</strong></p><ul><li>리스트 데이터를 처음부터 순서대로 특정 함수를 실행하여 결과를 누적시켜 주는 함수<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce <span class="comment"># import 해야 사용 가능합니다. </span></span><br><span class="line"></span><br><span class="line">ls = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># ((((1+2)+3)+4)+5)</span></span><br><span class="line"><span class="comment"># 파라미터가 반드시 2개여야 함</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x + y, ls)</span><br></pre></td></tr></table></figure></li></ul><p><strong>10. Decorlator</strong></p><ul><li>함수에서 코드를 바꾸지 않고 기능을 추가하거나 수정하고 싶을 때 사용하는 문법<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    code_1</span><br><span class="line">    code_2</span><br><span class="line">    code_3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    code_1</span><br><span class="line">    code_4</span><br><span class="line">    code_3</span><br></pre></td></tr></table></figure></li></ul><p><strong>데코레이터의 사용</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(func)</span>:</span> <span class="comment"># 2. func으로 def a()이 들어옴 </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># inner func </span></span><br><span class="line">        code_1 <span class="comment"># 4. 코드가 실행됨</span></span><br><span class="line">        result = func(*args, **kwargs) <span class="comment"># 5. 코드가 실행됨</span></span><br><span class="line">        code_3 <span class="comment"># 6. 코드가 실행됨</span></span><br><span class="line">        <span class="keyword">return</span> result <span class="comment"># 7. 반환함</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper <span class="comment"># 8. 반환함</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@c # 1. def c라는 함수가 실행이 됨, code_1, code_3 기능이 적용됨, code_1, 3, 2가 실행됨</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span> <span class="comment"># def a라는 함수가 wrapper 함수로 변경됨</span></span><br><span class="line">    code_2 <span class="comment"># 3. code_2 가 실행됨</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@c # code_1, code_3 기능이 실행됨, 결과적으로 code_1, 3, 4가 실행됨</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span> <span class="comment"># b라는 함수가 wrapper 함수로 변경됨</span></span><br><span class="line">    code_4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>)                                   <span class="comment"># code_1</span></span><br><span class="line">    result = a + b                                  <span class="comment"># code_2</span></span><br><span class="line">    print(<span class="string">"result : &#123;&#125;"</span>.format(result)) <span class="comment"># code_3</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>)                                   <span class="comment"># code_1</span></span><br><span class="line">    result = a - b                                   <span class="comment"># code_4</span></span><br><span class="line">    print(<span class="string">"result : &#123;&#125;"</span>.format(result)) <span class="comment"># code_3</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># c : code_1, cod_3을 묶어주는 데코레이션 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"start"</span>)                                   <span class="comment"># code_1</span></span><br><span class="line">        result = func(*args, **kwargs)   <span class="comment"># code_2, code_4</span></span><br><span class="line">        print(<span class="string">"result : &#123;&#125;"</span>.format(result)) <span class="comment"># code_3</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@disp</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    result = a + b                          <span class="comment"># code_2</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수의 실행 시간을 출력하는 데코레이터 함수를 작성하세요. </span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start_time = time.time()         <span class="comment"># code 1</span></span><br><span class="line">        result = func(*args, **kwargs)   <span class="comment"># code 2, code 4</span></span><br><span class="line">        end_time = time.time()           <span class="comment"># code 3</span></span><br><span class="line">        print(<span class="string">"running time : &#123;&#125;"</span>.format(end_time - start_time)) <span class="comment"># code 3</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    data = range(num1, num2+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> sum(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(num1, num2+<span class="number">1</span>):</span><br><span class="line">        result += num</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1(<span class="number">1</span>, <span class="number">100000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test2(<span class="number">1</span>, <span class="number">100000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 패스워드를 입력받아야 함수가 실행되도록하는 데코레이터 작성</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_password</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        pw = <span class="string">'dss12'</span></span><br><span class="line"><span class="comment">#         datas = [</span></span><br><span class="line"><span class="comment">#             &#123;'id': 'test', 'pw': '1234'&#125;,</span></span><br><span class="line"><span class="comment">#             &#123;'id': 'test2', 'pw': '12345'&#125;</span></span><br><span class="line"><span class="comment">#         ]</span></span><br><span class="line">        <span class="comment"># check password</span></span><br><span class="line">        input_pw = input(<span class="string">'insert pw : '</span>)</span><br><span class="line">        <span class="keyword">if</span> input_pw == pw:</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="string">'not allow!'</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@check_password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@check_password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lotto_func</span><span class="params">()</span>:</span></span><br><span class="line">    lotto = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        number = random.randint(<span class="number">1</span>, <span class="number">45</span>)</span><br><span class="line">        <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> lotto:</span><br><span class="line">            lotto.append(number)</span><br><span class="line">        <span class="keyword">if</span> len(lotto) &gt;= <span class="number">6</span>:</span><br><span class="line">            lotto.sort()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> lotto</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotto_func()</span><br></pre></td></tr></table></figure><p><strong>join()</strong></p><ul><li>리스트로 되어있는 데이터를 특정 문자열을 구분자로 사용해서 하나의 문장으로 만들어주는 함수<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">'python'</span>, <span class="string">'is'</span>, <span class="string">'good'</span>]</span><br><span class="line"><span class="string">" "</span>.join(ls)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pandas dataframe</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([ <span class="comment"># DataFrame : class</span></span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"jin"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"andy"</span>, <span class="string">"age"</span>: <span class="number">21</span>&#125;,</span><br><span class="line">])</span><br><span class="line">df</span><br></pre></td></tr></table></figure></li></ul><p><strong>id, pw 카운트 함수, 1. zip함수를 이용하는 방법</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">print(list(range(len(ls))))</span><br><span class="line">print(list(zip(range(len(ls)), ls)))</span><br><span class="line"><span class="keyword">for</span> idx, data <span class="keyword">in</span> list(zip(range(len(ls)), ls)):</span><br><span class="line">    print(idx, data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_datas = [</span><br><span class="line">    &#123;<span class="string">'user'</span>: <span class="string">'test'</span>, <span class="string">'pw'</span>: <span class="string">'1234'</span>, <span class="string">'count'</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'user'</span>: <span class="string">'python'</span>, <span class="string">'pw'</span>: <span class="string">'5678'</span>, <span class="string">'count'</span>: <span class="number">0</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user_data를 입력받아서 아이디와 패스워드를 체크하는 데코레이터 함수를 코드로 작성하세요. </span></span><br><span class="line"><span class="comment"># 로그인 될 때마다 count를 1씩 증가</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">need_login</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># inner function 만듬</span></span><br><span class="line">        <span class="comment"># 아아디 패스워드 입력</span></span><br><span class="line">        user, pw = tuple(input(<span class="string">"insert user pw : "</span>).split(<span class="string">' '</span>)) <span class="comment"># user와 pw 나눈 후 tuple로 변환</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 존재하는 아이디와 패스워드 확인</span></span><br><span class="line">        <span class="keyword">for</span> idx, user_data <span class="keyword">in</span> zip(range(len(user_datas)), user_datas): <span class="comment"># 카운트하기 위해 몇 번째 데이터인지 확인필요       </span></span><br><span class="line">            <span class="keyword">if</span> (user_data[<span class="string">'user'</span>] == user) <span class="keyword">and</span> (user_data[<span class="string">'pw'</span>] == pw):</span><br><span class="line">                user_datas[idx][<span class="string">'count'</span>] += <span class="number">1</span> <span class="comment"># 유저 데이터의 인덱스에서 카운트를 1씩 증가 시킴          </span></span><br><span class="line">                <span class="comment"># 함수 실행</span></span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs) <span class="comment"># wrapper 함수 종료, 결과값 출력          </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"wrong login data!"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@need_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_datas</span><br></pre></td></tr></table></figure><p><strong>2. enumerate함수를 이용하는 방법</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(enumerate(user_datas))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># user_data를 입력받아서 아이디와 패스워드를 체크하는 데코레이터 함수를 코드로 작성하세요. </span><br><span class="line"># 로그인 될 때마다 count를 1씩 증가</span><br><span class="line">def need_login(func):</span><br><span class="line">    def wrapper(*args, **kwargs): # inner function 만듬</span><br><span class="line">        # 아아디 패스워드 입력</span><br><span class="line">        user, pw &#x3D; tuple(input(&quot;insert user pw : &quot;).split(&#39; &#39;)) # user와 pw 나눈 후 tuple로 변환</span><br><span class="line">        </span><br><span class="line">        # 존재하는 아이디와 패스워드 확인</span><br><span class="line">        for idx, user_data in enumerate(user_datas): # 카운트하기 위해 몇 번째 데이터인지 확인필요       </span><br><span class="line">            if (user_data[&#39;user&#39;] &#x3D;&#x3D; user) and (user_data[&#39;pw&#39;] &#x3D;&#x3D; pw):</span><br><span class="line">                user_datas[idx][&#39;count&#39;] +&#x3D; 1 # 유저 데이터의 인덱스에서 카운트를 1씩 증가 시킴          </span><br><span class="line">                # 함수 실행</span><br><span class="line">                return func(*args, **kwargs) # wrapper 함수 종료, 결과값 출력          </span><br><span class="line">        return &quot;wrong login data!&quot;</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@need_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_datas</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;함수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반복되는 코드를 묶음으로 효율적인 코드를 작성하도록 해주는 기능&lt;/li&gt;
&lt;li&gt;기본 함수&lt;/li&gt;
&lt;li&gt;파라미터와 아규먼트&lt;/li&gt;
&lt;li&gt;리턴&lt;/li&gt;
&lt;li&gt;&lt;em&gt;args, *&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="function" scheme="https://cds0804.github/categories/python/function/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="function" scheme="https://cds0804.github/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>python 조건문 (if, while, for)</title>
    <link href="https://cds0804.github/2020/05/10/python_condition_loop/"/>
    <id>https://cds0804.github/2020/05/10/python_condition_loop/</id>
    <published>2020-05-09T16:54:23.000Z</published>
    <updated>2020-05-25T14:15:50.684Z</updated>
    
    <content type="html"><![CDATA[<p><strong>조건문</strong></p><ul><li>특정 조건에 따라서 코드를 실행하고자 할 때 사용</li><li>if, else, elif<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 문이 ture일 때 구문 안의 결과가 실행됨</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>: </span><br><span class="line">    print(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done"</span>)</span><br><span class="line"><span class="comment"># python done</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 문이 false일 때 구문 이외의 결과가 실행됨</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">False</span>: </span><br><span class="line">    print(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done"</span>)</span><br><span class="line"><span class="comment"># done</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 조건부문 : bool 데이터 타입 이외의 데이터 타입이 오면 bool으로 형변환 되어 판단</span></span><br><span class="line"><span class="comment"># int : 0을 제외한 나머지 값은 True</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num: </span><br><span class="line">    print(<span class="string">"python_1"</span>)</span><br><span class="line"><span class="comment"># 출력값 없음</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> num: </span><br><span class="line">    print(<span class="string">"python_2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python_2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'홀수'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'짝수'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># float : 0.0을 제외한 나머지 실수는 True</span></span><br><span class="line"><span class="comment"># str : ""을 제외한 나머지 문자열은 True</span></span><br><span class="line"><span class="comment"># list, tuple, dict : [], (), &#123;&#125;를 제외한 나머지는 True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 지갑에 돈이 10000원 이상 있으면 택시를 탑니다. </span></span><br><span class="line"><span class="comment"># 2000원 이상이 있으면 버스를 탑니다. </span></span><br><span class="line"><span class="comment"># 그렇지 않으면 걸어서 집에 갑니다. </span></span><br><span class="line">money = <span class="number">5000</span></span><br><span class="line"><span class="keyword">if</span> money &gt;= <span class="number">10000</span>:</span><br><span class="line">    print(<span class="string">'택시를 타고 집에 갑니다.'</span>)</span><br><span class="line"><span class="keyword">elif</span> money &gt;= <span class="number">5000</span>:</span><br><span class="line">    print(<span class="string">'광역버스를 타고 집에 갑니다.'</span>)</span><br><span class="line"><span class="keyword">elif</span> money &gt;= <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">'일반버스를 타고 집에 갑니다.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"걸어서 집에 갑니다."</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 계좌에 10000원이 들어있습니다. </span></span><br><span class="line"><span class="comment"># 인출 금액을 입력 받습니다. </span></span><br><span class="line"><span class="comment"># 인출 금액이 계좌에 있는 금액보다 크면 "인출이 불가능합니다." 출력</span></span><br><span class="line"><span class="comment"># 인출 금액이 계좌에 있는 금액보다 작으면 "인출 되었습니다." 출력</span></span><br><span class="line"><span class="comment"># 마지막에 현재 계좌의 잔액을 출력</span></span><br><span class="line">account = <span class="number">10000</span></span><br><span class="line">draw_money = int(input(<span class="string">"인출 금액을 입력하세요. : "</span>))</span><br><span class="line"><span class="keyword">if</span> account &gt;= draw_money:</span><br><span class="line">    account -= draw_money</span><br><span class="line">    print(str(draw_money) + <span class="string">"원이 인출되었습니다."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"인출이 불가능합니다. "</span> + str(draw_money - account) + <span class="string">"원의 잔액이 부족합니다."</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"현재 잔액은 "</span> + str(account) + <span class="string">"원 입니다."</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>삼항연산자</strong></p><ul><li>간단한 if, else 구문을 한줄의 코드로 표현할 수 있는 방법</li><li>(True) if (condition) else (False)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data 변수에 0이면 "zero"출력, 아니면 "not zero"출력</span></span><br><span class="line">data = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">    print(<span class="string">"not zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"zero"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="number">1</span></span><br><span class="line"><span class="string">"not zero"</span> <span class="keyword">if</span> data <span class="keyword">else</span> <span class="string">"zero"</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>반복문</strong></p><ul><li>반복되는 코드를 실행할 때 사용</li><li>while, for, break, continue</li><li>list comprehention<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while</span></span><br><span class="line">data = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> data: <span class="comment"># 조건이 False가 될 때까지 구문의 코드를 실행</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 반복되는 코드</span></span><br><span class="line">    print(data)</span><br><span class="line">    data -= <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 학생이 국어: 80점, 영어: 90점, 수학: 100점 while 문을 이용해서 총점과 평균을 출력</span></span><br><span class="line"><span class="comment"># 학생의 점수는 list, dict 표현</span></span><br><span class="line"><span class="comment"># len(), dict.values(), list.pop()</span></span><br><span class="line"><span class="comment"># list</span></span><br><span class="line">subject = [<span class="string">"korean"</span>, <span class="string">"english"</span>, <span class="string">"math"</span>]</span><br><span class="line">score = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">total, avg = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    total = sum(score)</span><br><span class="line">    avg= total / len(score)</span><br><span class="line">    print(<span class="string">'3과목 총점은 '</span> + str(total) + <span class="string">'점 입니다.'</span> )</span><br><span class="line">    print(<span class="string">'3과목 평균 점수는 &#123;&#125;점 입니다. '</span>.format(avg))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line">total, avg = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    total = sum(points_dict.values())</span><br><span class="line">    avg = total / len(subject)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"3과목 총점 : "</span>, total)</span><br><span class="line">    print(<span class="string">"3과목 평균 : "</span>, avg)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">subjects_ls = [<span class="string">"korean"</span>, <span class="string">"english"</span>, <span class="string">"math"</span>]</span><br><span class="line">points_ls = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">datas = points_ls.copy() <span class="comment"># 깊은 복사 : 원본 데이터를 보존</span></span><br><span class="line"></span><br><span class="line">total, avg = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> datas:</span><br><span class="line">    total += datas.pop()</span><br><span class="line">avg = total / len(points_ls)</span><br><span class="line">total, avg</span><br></pre></td></tr></table></figure><p><strong>무한루프</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> result:</span><br><span class="line">    result += <span class="number">1</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><ul><li>break : 반복문을 중단 시킬 때 사용되는 예약어<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> result:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> result &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    result += <span class="number">1</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ul><p><strong>for</strong></p><ul><li>iterable한 데이터를 하나씩 꺼내서 value에 대입시킨 후 코드를 iterable변수의 값 갯수만큼 실행<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;iterables&gt;:</span><br><span class="line">    &lt;code&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> ls:</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue: 조건부분으로 올라가서 콜드가 실행</span></span><br><span class="line">ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">if</span> data % <span class="number">2</span>: <span class="comment"># data가 홀수가 되면 continue를 실행하여 다시 포문으로 돌아감</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># data가 짝수이면 print를 실행</span></span><br><span class="line">    print(data, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>for를 이용해서 코드를 100번 실행</strong></p><ul><li>range 함수<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list(range(100))</span><br><span class="line">result &#x3D; 0</span><br><span class="line">for data in range(100):</span><br><span class="line">    result +&#x3D; data</span><br><span class="line">result</span><br></pre></td></tr></table></figure></li><li>offset index 개념과 비슷하게 사용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(range(<span class="number">5</span>)), list(range(<span class="number">5</span>, <span class="number">10</span>)), list(range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0~10 까지 짝수를 더한 총합</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    result += number</span><br><span class="line">result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> points_dict:</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure></li></ul><p><strong>items 함수 사용</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dict 형태</span></span><br><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> subject, point <span class="keyword">in</span> points_dict.items():</span><br><span class="line">    print(subject, point)</span><br></pre></td></tr></table></figure><p><strong>zip 함수 사용</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list 형태</span></span><br><span class="line"><span class="comment"># for 문에서 iterable 데이터가 tuple로 나오면 여러개의 변수로 받을 수 있습니다. </span></span><br><span class="line">subjects_ls = [<span class="string">"korean"</span>, <span class="string">"english"</span>, <span class="string">"math"</span>]</span><br><span class="line">points_ls = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line"><span class="keyword">for</span> subject, point <span class="keyword">in</span> zip(subjects_ls, points_ls):</span><br><span class="line">    print(subject, point)</span><br></pre></td></tr></table></figure><p><strong>구구단 가로 출력</strong></p><ul><li>2<em>1=2       3</em>1=3     …   9*1=9<br> …</li><li>2<em>9=18    3</em>9=27   …   9*9=81<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>): <span class="comment"># 1, 2, 3, ... 9를 만들어 줌</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>): <span class="comment"># 2단, 3단, ... 9단을 만들어줌</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;'</span>.format(j, i, i*j), end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></li></ul><p><strong>List Comprehention</strong></p><ul><li>리스트 데이터를 만들어주는 방법</li><li>for문 보다 빠르게 동작합니다. </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 각각 값에 제곱한 결과 출력</span></span><br><span class="line">ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> ls:</span><br><span class="line">    result.append(data ** <span class="number">2</span>)</span><br><span class="line">result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = [data**<span class="number">2</span> <span class="keyword">for</span> data <span class="keyword">in</span> ls] <span class="comment"># [연산 for 각각의 데이터 in 데이터의 집합]</span></span><br><span class="line">result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 컴프리헨션을 써서 홀수와 짝수를 리스트로 출력해주는 코드</span></span><br><span class="line"><span class="comment"># 삼항연산자 사용</span></span><br><span class="line">ls = range(<span class="number">0</span>, <span class="number">11</span>)</span><br><span class="line">result = [<span class="string">"홀수"</span> <span class="keyword">if</span> data % <span class="number">2</span> <span class="keyword">else</span> <span class="string">"짝수"</span> <span class="keyword">for</span> data <span class="keyword">in</span> ls]</span><br><span class="line">result</span><br></pre></td></tr></table></figure><p><strong>리스트 컴프리헨션 조건문</strong></p><ul><li>0 ~ 9까지에서 홀수만 출력하기<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = range(<span class="number">10</span>)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> ls <span class="keyword">if</span> i%<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dir(ls)에서 "__" 없는 함수만 출력하기</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(ls)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dir(ls) <span class="keyword">if</span> i[:<span class="number">2</span>] != <span class="string">'__'</span>] <span class="comment"># 앞에 2개가 __ 인 것을 제외</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 앞글자가 c인 것만 가져오기</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(ls)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dir(ls) <span class="keyword">if</span> i[:<span class="number">2</span>] != <span class="string">'__'</span> <span class="keyword">if</span> i[:<span class="number">1</span>] == <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(ls)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dir(ls) <span class="keyword">if</span> i[:<span class="number">2</span>] != <span class="string">'__'</span> <span class="keyword">and</span> i[<span class="number">0</span>] == <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li></ul><p><strong>for문과 list comprehention 성능 비교</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line">    ls.append(ls)</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = [num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>)]</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3의 배수만 찾기 소요시간 비교</span></span><br><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>: </span><br><span class="line">        ls.append(num)</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = [num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;조건문&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정 조건에 따라서 코드를 실행하고자 할 때 사용&lt;/li&gt;
&lt;li&gt;if, else, elif&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="condition" scheme="https://cds0804.github/categories/python/condition/"/>
    
      <category term="loop" scheme="https://cds0804.github/categories/python/condition/loop/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="codition" scheme="https://cds0804.github/tags/codition/"/>
    
      <category term="loop" scheme="https://cds0804.github/tags/loop/"/>
    
  </entry>
  
  <entry>
    <title>basic</title>
    <link href="https://cds0804.github/2020/05/09/python_basic_syntax/"/>
    <id>https://cds0804.github/2020/05/09/python_basic_syntax/</id>
    <published>2020-05-09T14:57:11.000Z</published>
    <updated>2020-05-10T01:31:01.733Z</updated>
    
    <content type="html"><![CDATA[<p><strong>파이썬 기본 문법</strong></p><ul><li>변수 선언, 식별자, 자료형, 형변환, 연산자</li></ul><ol><li><p>주석(comment)과 출력(print)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 주석 : 앞에 #을 붙이면 코드로 실행이 안됩니다. </span></span><br><span class="line"><span class="comment"># 코드에 대한 설명이나 코드를 실행시키고 싶지 않을 때 사용</span></span><br><span class="line"><span class="comment"># 단축키 : ctrl(cmd) + /</span></span><br><span class="line"><span class="comment"># 블럭설정 : shift + 방향키</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 출력 : print 함수</span></span><br><span class="line"><span class="comment"># 코드 중간에 변수에 들어있는 값을 확인하고 싶을 때 사용</span></span><br><span class="line"><span class="comment"># 1, 2, 3을 출력하는 코드, 아래를 실행시키면 1, 3이 출력 됩니다. </span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(2)</span></span><br><span class="line">print(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print 함수의 옵션</span></span><br><span class="line"><span class="comment"># docstring : 함수에 대한 설명 : 단축키(shift + tab)</span></span><br><span class="line">print(<span class="number">1</span>, <span class="number">2</span>, sep=<span class="string">"-"</span>, end=<span class="string">"\t"</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 자동완성 : tab</span></span><br></pre></td></tr></table></figure></li><li><p>변수 선언</p></li></ol><ul><li>RAM 저장공간에 값을 할당하는 행위<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 하나씩 선언</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="comment"># 한줄로 여러개의 변수를 선언</span></span><br><span class="line">d, e = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="comment"># 5라는 값이 f와 g에 선언</span></span><br><span class="line">f = g = <span class="number">5</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>식별자</li></ol><ul><li>변수, 함수, 클래스, 모듈 등의 이름을 식별자라고 합니다. </li><li>식별자 규칙<ul><li>소문자, 대문자, 숫자, 언더스코어(_)를 사용합니다. </li><li>가장 앞에 숫자 사용 불가</li><li>예약어의 사용 불가 : def, class, try, except, 등</li><li>컨벤션<pre><code>- snake case : fast_campus : 변수, 함수- camel case : FastCampus, fastCampus : 클래스</code></pre></li></ul></li></ul><ol start="4"><li>데이터 타입</li></ol><ul><li>RAM 저장공간을 효율적으로 사용하기 위해서 저장공간의 타입을 설정</li><li>동적타이핑(인터프리터 방식에서 주로 사용함)<pre><code>- 변수 선언시 저장되는 값에 따라서 자동으로 데이터 타입이 설정</code></pre></li><li>기본 데이터 타입 : int, float, bool, str</li><li>컬렉션 데이터 타입 : list, tuple, dict</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment"># int a = 1</span></span><br><span class="line">b = <span class="string">"python"</span></span><br><span class="line"><span class="comment"># int, str</span></span><br><span class="line">type(a), type(b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기본 데이터 타입 : int, float, bool, str</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1.2</span></span><br><span class="line">c = <span class="literal">True</span> <span class="comment"># False</span></span><br><span class="line">d = <span class="string">"data"</span></span><br><span class="line">type(a), type(b), type(c), type(d)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 데이터 타입의 함수 : 문자열</span></span><br><span class="line">d = <span class="string">"data"</span></span><br><span class="line"><span class="comment"># upper : 대문자로 변환</span></span><br><span class="line">d.upper()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="string">' THAt Car '</span></span><br><span class="line"><span class="comment"># lower : 소문자로 변환</span></span><br><span class="line">f.lower()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strip : 공백 제거</span></span><br><span class="line">f.strip()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># replace : 모든 공백제거</span></span><br><span class="line">f.replace(<span class="string">" "</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># replace : 특정 문자열 치환</span></span><br><span class="line">f.replace(<span class="string">"THAt"</span>, <span class="string">"THIS"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dir : 함수 확인</span></span><br><span class="line">dir(f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 오프셋 인덱스 : 마스크, 마스킹 : []</span></span><br><span class="line"><span class="comment"># 문자열은 순서가 있는 문자들의 집합</span></span><br><span class="line">g = <span class="string">"abcdefg"</span></span><br><span class="line">g[<span class="number">2</span>] <span class="comment"># 'c'</span></span><br><span class="line">g[<span class="number">-2</span>] <span class="comment"># 'f'</span></span><br><span class="line">g[<span class="number">2</span>:<span class="number">5</span>] <span class="comment"># 'cde' 2는 포함, 5는 미포함</span></span><br><span class="line">g[<span class="number">2</span>:] <span class="comment"># 'cdefg' 2번째부터 끝까지</span></span><br><span class="line">g[:<span class="number">3</span>] <span class="comment"># 'abc' 0번째부터 2번째까지 g[0:3]과 같음</span></span><br><span class="line">g[<span class="number">-2</span>:] <span class="comment"># 'fg' -2에서 끝까지 </span></span><br><span class="line">g[:] <span class="comment"># 'abcdefg' 처음부터 끝까지</span></span><br><span class="line">g[::<span class="number">2</span>] <span class="comment"># 'aceg' 2칸씩 점프하며 출력</span></span><br><span class="line">g[::<span class="number">-1</span>] <span class="comment"># 'gfedcba' 역순으로 출력</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 97531 출력</span></span><br><span class="line">numbers = <span class="string">'123456789'</span> </span><br><span class="line"><span class="comment"># numbers[::-2]</span></span><br><span class="line"><span class="comment"># result = numbers[::2]</span></span><br><span class="line"><span class="comment"># result[::-1]</span></span><br><span class="line"><span class="comment"># numbers[::2][::-1]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 컬렉션 데이터 타입 : list, tuple, dict</span></span><br><span class="line"><span class="comment"># list [] : 순서가 있는 수정이 가능한 데이터 타입</span></span><br><span class="line"><span class="comment"># tuple () : 순서가 있는 수정이 불가능한 데이터 타입</span></span><br><span class="line"><span class="comment"># dict &#123;&#125; : 순서가 없고 키: 값으로 구성되어 있는 데이터 타입</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"four"</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="literal">True</span>, <span class="number">1.2</span>]</span><br><span class="line">type(ls), ls</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># offset index 사용 가능</span></span><br><span class="line">ls[<span class="number">3</span>], ls[<span class="number">1</span>:<span class="number">3</span>], ls[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list 함수</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># append : 가장 뒤에 값을 추가</span></span><br><span class="line">ls.append(<span class="number">3</span>)</span><br><span class="line">ls <span class="comment"># [1, 5, 2, 4, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort : 오름차순으로 정렬</span></span><br><span class="line">ls.sort()</span><br><span class="line">ls <span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># 내림차순 정렬</span></span><br><span class="line">ls[::<span class="number">-1</span>] <span class="comment"># [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pop : 가장 마지막 데이터를 출력하고 출력한 데이터를 삭제</span></span><br><span class="line"><span class="comment"># ctrl + enter : 현재 셀을 계속 실행</span></span><br><span class="line">num = ls.pop()</span><br><span class="line">num, ls</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트의 복사</span></span><br><span class="line">ls1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ls2 = ls1</span><br><span class="line">ls1, ls2 <span class="comment"># ([1, 2, 3], [1, 2, 3])</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 얕은 복사 :주소값 복사</span></span><br><span class="line">ls1[<span class="number">2</span>] = <span class="number">5</span></span><br><span class="line">ls1, ls2 <span class="comment">#([1, 2, 5], [1, 2, 5])</span></span><br></pre></td></tr></table></figure><p><strong>깊은 복사</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 깊은 복사</span></span><br><span class="line">ls3 = ls1.copy()</span><br><span class="line">ls1, ls3 <span class="comment">#([1, 2, 5], [1, 2, 5])</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls1[<span class="number">2</span>]  = <span class="number">10</span></span><br><span class="line">ls1, ls3 <span class="comment"># ([1, 2, 10], [1, 2, 5])</span></span><br></pre></td></tr></table></figure><p><strong>tuple ()</strong> </p><ul><li>리스트와 같지만 수정이 불가능한 데이터 타입, 괄호 생략 가능</li><li>튜플은 리스트보다 같은 데이터를 가졌을 때 공간을 적게 사용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tp1 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">tp2 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">type(tp1), type(tp2), tp1, tp2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># offset index 사용 가능</span></span><br><span class="line">tp1[<span class="number">1</span>], [tp1[::<span class="number">-1</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트와 튜플의 저장공간 차이 비교</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">tp = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(sys.getsizeof(ls), sys.getsizeof(tp))</span><br><span class="line"><span class="comment"># 96 80</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">**dict &#123;&#125;**</span><br><span class="line">- 순서가 없고 &#123;키: 값&#125;으로 구성되어 있는 데이터 타입</span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 선언: 키는 정수, 문자열 데이터 타입만 사용이 가능</span></span><br><span class="line"><span class="comment"># 인덱스 대신 키를 사용</span></span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">"one"</span>,</span><br><span class="line">    <span class="string">"two"</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">'tree'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">&#125;</span><br><span class="line">type(dic), dic</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dic[1], dic[&quot;tree&quot;]</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">dic[&quot;two&quot;] &#x3D; 123</span><br><span class="line">dic</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래의 데이터를 list와 dict로 선언</span></span><br><span class="line"><span class="comment"># 도시 : seoul, busan, daegu</span></span><br><span class="line"><span class="comment"># 인구 : 9,700,000, 3,400,000, 2,400,000</span></span><br><span class="line"><span class="comment"># 딕셔너리 : 변수 1개 선언</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"seoul"</span>: <span class="number">9700000</span>,</span><br><span class="line">    <span class="string">"busan"</span>: <span class="number">3400000</span>,</span><br><span class="line">    <span class="string">"daegu"</span>: <span class="number">2400000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 리스트 : 변수 2개 선언</span></span><br><span class="line">city = [seoul, busan, daegu]</span><br><span class="line">population = [<span class="number">9700000</span>, <span class="number">3400000</span>, <span class="number">2400000</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(population)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(data.values())</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>형변환</li></ol><ul><li>데이터 타입을 변환하는 방법</li><li>int, float, bool, str, list, tuple, dict<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">"2"</span></span><br><span class="line">a + int(b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(a) + b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(data.values())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zip : 같은 인덱스에 있는 데이터를 묶어주는 함수</span></span><br><span class="line"><span class="comment"># zip 함수 사용하여 list 타입으로 변환하기</span></span><br><span class="line">list(zip(city, population))</span><br><span class="line"><span class="comment"># dict 타입으로 변환하기</span></span><br><span class="line">dict(zip(city, population))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = dict(list(zip(city, population)))</span><br><span class="line">result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data1 = list(result.keys())</span><br><span class="line">data2 = list(resutl.values())</span><br><span class="line">data1, data2</span><br><span class="line">``` </span><br><span class="line"><span class="number">6.</span> 연산자 : 멤버 &gt;  논리 </span><br><span class="line">- 산술연산자 : +, -, *, /, //(몫), %(나머지), **(제곱)</span><br><span class="line">- 할당연산자 : 변수에 누적시켜서 연산 : +=, //=, **= 등</span><br><span class="line">- 비교연산자 : &gt;(크다), &lt;(작다), ==, !=, &lt;=(작거나 같다), &gt;=(크거나 같다), 결과로 <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line">- 논리연산자 : <span class="literal">True</span>, <span class="literal">False</span> 를 연산 : <span class="keyword">or</span>(T와 F연산 <span class="literal">True</span>가 출력), <span class="keyword">and</span>(T와 T일 때 <span class="literal">True</span>), <span class="keyword">not</span>(<span class="literal">True</span>를 <span class="literal">False</span>로 <span class="literal">False</span>를 <span class="literal">True</span>로 변경)</span><br><span class="line">- 멤버연산자 : 특정 데이터가 있는지 확인 할 때 사용 : <span class="keyword">not</span> <span class="keyword">in</span>, <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 산술연산 : 제곱, 나눗셈, 더하기 순</span></span><br><span class="line"><span class="number">1</span> + <span class="number">4</span> / <span class="number">2</span> ** <span class="number">2</span> <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 할당연산</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">a +=<span class="number">10</span></span><br><span class="line">a += <span class="number">10</span></span><br><span class="line">a <span class="comment"># 30</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 비교연산</span></span><br><span class="line">a &lt; b, a == b, a != b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 논리연산 : and(교집합), or(합집합), 괄호가 있는 경우에는 왼쪽이 먼저 연산됨</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>, <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>, <span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="comment"># (not True = False가 되어 False or Flase는 False가 됨)</span></span><br><span class="line"><span class="comment"># False, True, False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="string">'jin'</span>, <span class="string">'andy'</span>, <span class="string">'john'</span>]</span><br><span class="line"><span class="string">'andy'</span> <span class="keyword">in</span> ls, <span class="string">'anchel'</span> <span class="keyword">in</span> ls, <span class="string">'john'</span> <span class="keyword">not</span> <span class="keyword">in</span> ls</span><br><span class="line"><span class="comment"># True, False, False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 랜덤함수</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 입력함수</span></span><br><span class="line">data = input(<span class="string">'insert string : '</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 해결의 책 만들기 : 질문을 하면 질문에 대한 답변을 해주는 책</span></span><br><span class="line"><span class="comment"># 1. solution을 리스트로 작성</span></span><br><span class="line"><span class="comment"># 2. 질문 입력 받음</span></span><br><span class="line"><span class="comment"># 3. 솔루션의 갯수에 맞게 랜덤한 index 정수 값을 생성</span></span><br><span class="line"><span class="comment"># 4. index 해당하는 솔루션 리스트의 데이터를 출력</span></span><br><span class="line">solution =[</span><br><span class="line">    <span class="string">"무엇을 하던 잘 풀릴 것이다."</span>, </span><br><span class="line">    <span class="string">'생각지도 않게 좋은 일이 생길 것이다.'</span>, </span><br><span class="line">    <span class="string">'무엇을 상상하던 그 이상이다.'</span>,</span><br><span class="line">]</span><br><span class="line">input(<span class="string">"질문을 입력하세요. : "</span>)</span><br><span class="line">idx = random.randint(<span class="number">0</span>, len(solution) - <span class="number">1</span>) <span class="comment"># 솔루션 = 총 3개: 0, 1, 2 이므로 솔루션 숫자 -1을 해야 randint(0, 2)가 됨</span></span><br><span class="line">solution[idx]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;파이썬 기본 문법&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언, 식별자, 자료형, 형변환, 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;주석(comment)과 출력(print)&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="basic syntax" scheme="https://cds0804.github/categories/python/basic-syntax/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="basic syntax" scheme="https://cds0804.github/tags/basic-syntax/"/>
    
  </entry>
  
  <entry>
    <title>jupyter notebook</title>
    <link href="https://cds0804.github/2020/05/09/python_jupyter_notebook/"/>
    <id>https://cds0804.github/2020/05/09/python_jupyter_notebook/</id>
    <published>2020-05-09T14:14:00.000Z</published>
    <updated>2020-05-09T16:52:20.622Z</updated>
    
    <content type="html"><![CDATA[<p><strong>python</strong></p><ul><li>coding program</li><li>numpy, pandas, sklearn 등의 모듈을 각각 설치해야 함</li></ul><p><strong>anaconda</strong></p><ul><li>numpy, pandas, sklearn 등의 모듈이 모두 포함되어 있음</li><li>용량이 큼(약 500MB)</li></ul><p><strong>jupyter notebook</strong></p><blockquote><p>mode</p></blockquote><ul><li>명령모드(esc) :  셀을 수정할 때 사용, 왼쪽 바의 색깔이 파란색입니다. </li><li>편집모드(enter) : 셀안의 내용을 수정할 때 사용, 왼쪽 바의 색깔이 녹색입니다. </li></ul><blockquote><p>style</p></blockquote><ul><li>markdown(명령모드 + m) : 셀 안에 설명을 작성할 때 사용</li><li>code(명령모드 + y) : 파이썬 코드를 작성할 때 사용</li><li>라인 넘버(명령모드 + l)</li></ul><blockquote><p>단축키</p></blockquote><ul><li>셀 실행 : shift + enter, ctrl + enter</li><li>셀 삭제 : (명령모드) x</li><li>되돌리기 : (명령모드)  z</li><li>셀 생성 : (명령모드) a(위에), b(아래)</li></ul><blockquote><p>매직 커맨드</p></blockquote><ul><li>셀 내부에서 특별하게 동작하는 커맨드</li><li>% : 한줄의 magic command를 동작</li><li>%% : 셀 단위의 magic command를 동작</li></ul><blockquote><p>주요 magic command</p></blockquote><ul><li>%pwd : 현재 주피터 노트북 파일의 경로</li><li>%ls : 현재 디렉토리의 파일 리스트</li><li>%whos : 현재 선언된 변수를 출력 </li><li>%reset : 현재 선언된 변수를 모두 삭제</li></ul><blockquote><p>shell command</p></blockquote><ul><li>주피터 노트북을 실행 셀 환경의 명령을 사용</li><li>명령어 앞에 !를 붙여서 실행</li></ul><blockquote><p>주요 명령어 : ls, cat, echo 등</p></blockquote><ul><li>!echo python : 뒤에 오는 문자열(python)을 출력해줍니다. </li><li>!ls : 현재 디렉토리에 있는 데이터를 표시해줍니다. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;python&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coding program&lt;/li&gt;
&lt;li&gt;numpy, pandas, sklearn 등의 모듈을 각각 설치해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;anaconda&lt;/stro
      
    
    </summary>
    
    
      <category term="python" scheme="https://cds0804.github/categories/python/"/>
    
      <category term="jupyter netebook" scheme="https://cds0804.github/categories/python/jupyter-netebook/"/>
    
    
      <category term="python" scheme="https://cds0804.github/tags/python/"/>
    
      <category term="anaconda" scheme="https://cds0804.github/tags/anaconda/"/>
    
      <category term="jupyter notebook" scheme="https://cds0804.github/tags/jupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>mysql query</title>
    <link href="https://cds0804.github/2020/05/08/AWS_server_mysql_query/"/>
    <id>https://cds0804.github/2020/05/08/AWS_server_mysql_query/</id>
    <published>2020-05-08T09:12:12.000Z</published>
    <updated>2020-05-26T06:24:30.119Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="Server-Database-Table"><a href="#Server-Database-Table" class="headerlink" title="Server - Database - Table"></a>Server - Database - Table</h4></li><li><h4 id="1-데이터-베이스-보기"><a href="#1-데이터-베이스-보기" class="headerlink" title="1. 데이터 베이스 보기"></a>1. 데이터 베이스 보기</h4>SHOW DATABASES;</li><li><h4 id="생성"><a href="#생성" class="headerlink" title="생성"></a>생성</h4>CREATE DATABASE test;</li><li><h4 id="선택"><a href="#선택" class="headerlink" title="선택"></a>선택</h4>USE test</li><li><h4 id="현재-확인"><a href="#현재-확인" class="headerlink" title="현재 확인"></a>현재 확인</h4>SELECT DATABASE()</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Server-Database-Table&quot;&gt;&lt;a href=&quot;#Server-Database-Table&quot; class=&quot;headerlink&quot; title=&quot;Server - Database - Table&quot;&gt;&lt;/a&gt;Server - D
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://cds0804.github/categories/AWS/"/>
    
      <category term="mysql" scheme="https://cds0804.github/categories/AWS/mysql/"/>
    
      <category term="query" scheme="https://cds0804.github/categories/AWS/mysql/query/"/>
    
    
      <category term="AWS" scheme="https://cds0804.github/tags/AWS/"/>
    
      <category term="mysql" scheme="https://cds0804.github/tags/mysql/"/>
    
      <category term="query" scheme="https://cds0804.github/tags/query/"/>
    
  </entry>
  
  <entry>
    <title>tmux</title>
    <link href="https://cds0804.github/2020/05/08/AWS%20server_tmux/"/>
    <id>https://cds0804.github/2020/05/08/AWS%20server_tmux/</id>
    <published>2020-05-08T07:45:02.000Z</published>
    <updated>2020-05-09T14:54:30.899Z</updated>
    
    <content type="html"><![CDATA[<p><strong>tmux(터미널 멀티플렉서) 실행, session name : dss</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tmux new -s dss</span><br></pre></td></tr></table></figure><ul><li>새로운 세션을 dss란 이름으로 만든다는 뜻</li></ul><p><strong>세션 종료</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><strong>세션 목록보기</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tmux ls</span><br></pre></td></tr></table></figure><p><strong>세션 접속</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tmux attach -t dss</span><br></pre></td></tr></table></figure><p><strong>윈도우 생성</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ctrl + b, c</span><br></pre></td></tr></table></figure><p><strong>윈도우 이동</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   ctrl + b, 0-9</span><br></pre></td></tr></table></figure><p><strong>윈도우 종료</strong></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   ctrl + b, &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;tmux(터미널 멀티플렉서) 실행, session name : dss&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="terminal" scheme="https://cds0804.github/categories/terminal/"/>
    
      <category term="tmux" scheme="https://cds0804.github/categories/terminal/tmux/"/>
    
    
      <category term="terminal" scheme="https://cds0804.github/tags/terminal/"/>
    
      <category term="tmux" scheme="https://cds0804.github/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>git branch, git checkout, git merge</title>
    <link href="https://cds0804.github/2020/05/05/git-branch/"/>
    <id>https://cds0804.github/2020/05/05/git-branch/</id>
    <published>2020-05-05T07:32:38.000Z</published>
    <updated>2020-05-05T11:49:06.366Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git 3번째 내용 git branch</strong></p><blockquote><p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p></blockquote><p><strong>병합하기 1</strong></p><ul><li>헤드 브랜치에 변경사항이 없고</li><li>병합 대상 브랜치가 헤드로부터 시작된 경우</li><li>아주 쉽게 병합 가능 = Fast-forward</li></ul><p><strong>병합하기 2</strong></p><ul><li>헤드 브랜치에 추가적인 커밋이 생기는 경우</li><li>진짜 변합이 필요합니다. </li><li>충돌이 나면 충돌난 부분을 확인한 후 해결하면 됩니다. </li></ul><p><strong>soucetree에서 git branch</strong></p><ul><li>branch : 기존 내용을 유지한 체 새로운 내용을 추가하고 싶을 때 사용합니다. </li><li>checkout : 특정 브랜치(혹은 커밋)으로 돌아가고 싶을 때 사용합니다. </li><li>sourcetree의 checkout : 브랜치 이름을 더블 클릭하여 체크아웃합니다. </li><li>master : 고객에게 전달해야 하는 내용이 들어있습니다. </li><li>branch : 개발을 진행하는 내용이 들어있습니다. </li><li>merge : 하나의 브랜치를 현재 브랜치와 합치는 거을 병합(merge)라고 합니다. </li><li>head branch : 현재 작업중인 브랜치</li></ul><p><a href="https://learngitbranching.js.org/?locale=ko">learn_git_branch</a></p><p><strong>git에서 bugFix라는 branch 만들기</strong></p><ol><li><p>터미널 명령어 : git branch 새로만들 브랜치 이름 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch bugFix</span><br></pre></td></tr></table></figure></li><li><p>git checkout bugFix 라는 명령어로 bugFix branch로 이동할 수 있습니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout bugFix</span><br></pre></td></tr></table></figure></li></ol><p>2-1. git checkout master 를 입력하면 master로 돌아갑니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><ol start="3"><li>Merge : 브랜치와 병합하기</li></ol><ul><li>각 브랜치에서 독립된 커밋이 하나씩 있을 경우, 이 경우는 지금까지 작업한 내용이 나뉘어 담겨있다는 뜻입니다. 이럴 때 두 브랜치를 합칠(merge) 수 있습니다. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>git branch bugFix </p></li><li><p>git commit</p></li><li><p>git checkout master</p></li><li><p>git commit 을 하면 아래와 같은 그림이 나옵니다.<br><img src="/img/git_merge_bugFix_1.png" alt="git_merge_bugFix_1"></p></li><li><p>git merge bugFix<br><img src="/img/git_merge_bugFix_2.png" alt="git_merge_bugFix_2"></p></li><li><p>git checkout bugFix</p></li><li><p>git merge master<br><img src="/img/git_merge_bugFix_3.png" alt="git_merge_bugFix_3"></p></li></ol><p><strong>틀리거나 이상한 내용이 있으면 알려주세요, 확인 후 수정하겠습니다!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;git 3번째 내용 git branch&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/git-and-github/lecture/14171&quot;&gt;인프런 무료강
      
    
    </summary>
    
    
      <category term="git" scheme="https://cds0804.github/categories/git/"/>
    
      <category term="branch" scheme="https://cds0804.github/categories/git/branch/"/>
    
    
      <category term="github" scheme="https://cds0804.github/tags/github/"/>
    
      <category term="git" scheme="https://cds0804.github/tags/git/"/>
    
      <category term="branch" scheme="https://cds0804.github/tags/branch/"/>
    
  </entry>
  
  <entry>
    <title>git clone과 sourceTree</title>
    <link href="https://cds0804.github/2020/05/05/git_clone&amp;sourceTree/"/>
    <id>https://cds0804.github/2020/05/05/git_clone&amp;sourceTree/</id>
    <published>2020-05-05T07:07:17.000Z</published>
    <updated>2020-05-05T11:45:35.323Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git 2번째 내용 : sourcetree 만들기 및 commit 주의사항</strong></p><blockquote><p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p></blockquote><p>Source Tree 설치<br><a href="https://www.sourcetreeapp.com/">소스트리 다운로드</a><br><strong>주의사항</strong></p><ol><li>아틀라시안에 가입해야 합니다. </li><li>bitbucket 등의 설정은 skip합니다. </li></ol><p><strong>소스트리를 설치한 후 저장소 클론</strong><br>github에 만들어진 README.md 등의 파일이 내 컴퓨터 문서폴더 안으로 복사됩니다.<br>이 때, 내 컴퓨터 문서폴더 안에 저장소이름의 폴더가 생성됩니다. </p><p><strong>작업 후 스테이지에 파일 추가</strong><br>만들어진 폴더를 열고 에디터 등을 이용해서 hello.html을 만들어 봅시다.<br>저장위치는 Documents/hello-world/가 됩니다. </p><p><strong>커밋 주의사항</strong></p><ol><li>반드시 한 번에 하나의 논리적인 작업만을 커밋합니다. </li><li>커밋 메세지를 잘 적어야 합니다.<br>특히 커밋 메세지는 미래의 여러분과 다른 개발자를 위해서 꼼꼼히 적어야 합니다. </li></ol><p><strong>커밋 메세지 작성법</strong></p><ol><li>첫 줄에 간단하지만 명확하게 내용을 씁니다. </li><li>한줄 비웁니다. </li><li>자세한 내용을 적습니다. </li></ol><p><strong>checkout을 이용해서 저장하지 않은 변경 내용 취소하기</strong></p><ul><li>checkout을 이용하면 마지막 커밋으로 되돌아갈 수 있습니다. </li><li>sourceTree의 코드뭉치 버리기 기능을 사용하면 변경사항을 되돌릴 수 있습니다. </li><li>commit 전 내용을 돌릴 수 있습니다. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;git 2번째 내용 : sourcetree 만들기 및 commit 주의사항&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/git-and-github/le
      
    
    </summary>
    
    
      <category term="git" scheme="https://cds0804.github/categories/git/"/>
    
      <category term="sourcetree" scheme="https://cds0804.github/categories/git/sourcetree/"/>
    
    
      <category term="github" scheme="https://cds0804.github/tags/github/"/>
    
      <category term="git" scheme="https://cds0804.github/tags/git/"/>
    
      <category term="sourcetree" scheme="https://cds0804.github/tags/sourcetree/"/>
    
  </entry>
  
  <entry>
    <title>Hexo icarus 테마에 adsense 추가하기</title>
    <link href="https://cds0804.github/2020/05/04/Hexo-adsense/"/>
    <id>https://cds0804.github/2020/05/04/Hexo-adsense/</id>
    <published>2020-05-03T17:07:04.000Z</published>
    <updated>2020-05-04T05:48:01.355Z</updated>
    
    <content type="html"><![CDATA[<p><strong>오늘은 Hexo icarus 테마에 adsense를 적용하는 것을 공유하려 합니다.</strong></p><ol><li><p>아래 구글 애드센스 홈페이지에 접속합니다. </p><blockquote><p><a href="https://www.google.com/adsense/">구글애드센스</a></p></blockquote></li><li><p>구글계정으로 로그인하고 애드센스를 신청합니다. </p></li><li><p>Hexo icarus 테마 !_config.yml에 아래와 같이 등록합니다.<br><img src="/img/hexo-icarus-adsense.png" alt="hexo-icarus-adsense.png"></p></li><li><p>구글 에드센스 확인버튼을 누른 후 다음과 같은 이미지가 뜨면 승인을 기다립니다.<br><img src="/img/hexo-icarus-adsense1.png" alt="hexo-icarus-adsense1"></p></li></ol><p>수고하셨습니다!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;오늘은 Hexo icarus 테마에 adsense를 적용하는 것을 공유하려 합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;아래 구글 애드센스 홈페이지에 접속합니다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://cds0804.github/categories/hexo/"/>
    
      <category term="adsense" scheme="https://cds0804.github/categories/hexo/adsense/"/>
    
    
      <category term="hexo" scheme="https://cds0804.github/tags/hexo/"/>
    
      <category term="icarus" scheme="https://cds0804.github/tags/icarus/"/>
    
      <category term="adsense" scheme="https://cds0804.github/tags/adsense/"/>
    
  </entry>
  
</feed>
