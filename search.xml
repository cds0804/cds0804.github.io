<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git branch, git checkout, git merge</title>
    <url>/2020/05/05/git-branch/</url>
    <content><![CDATA[<p><strong>git 3번째 내용 git branch</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p>
</blockquote>
<p><strong>병합하기 1</strong></p>
<ul>
<li>헤드 브랜치에 변경사항이 없고</li>
<li>병합 대상 브랜치가 헤드로부터 시작된 경우</li>
<li>아주 쉽게 병합 가능 = Fast-forward</li>
</ul>
<p><strong>병합하기 2</strong></p>
<ul>
<li>헤드 브랜치에 추가적인 커밋이 생기는 경우</li>
<li>진짜 변합이 필요합니다. </li>
<li>충돌이 나면 충돌난 부분을 확인한 후 해결하면 됩니다. </li>
</ul>
<p><strong>soucetree에서 git branch</strong></p>
<ul>
<li>branch : 기존 내용을 유지한 체 새로운 내용을 추가하고 싶을 때 사용합니다. </li>
<li>checkout : 특정 브랜치(혹은 커밋)으로 돌아가고 싶을 때 사용합니다. </li>
<li>sourcetree의 checkout : 브랜치 이름을 더블 클릭하여 체크아웃합니다. </li>
<li>master : 고객에게 전달해야 하는 내용이 들어있습니다. </li>
<li>branch : 개발을 진행하는 내용이 들어있습니다. </li>
<li>merge : 하나의 브랜치를 현재 브랜치와 합치는 거을 병합(merge)라고 합니다. </li>
<li>head branch : 현재 작업중인 브랜치</li>
</ul>
<p><a href="https://learngitbranching.js.org/?locale=ko">learn_git_branch</a></p>
<p><strong>git에서 bugFix라는 branch 만들기</strong></p>
<ol>
<li><p>터미널 명령어 : git branch 새로만들 브랜치 이름 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch bugFix</span><br></pre></td></tr></table></figure>
</li>
<li><p>git checkout bugFix 라는 명령어로 bugFix branch로 이동할 수 있습니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout bugFix</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2-1. git checkout master 를 입력하면 master로 돌아갑니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Merge : 브랜치와 병합하기</li>
</ol>
<ul>
<li>각 브랜치에서 독립된 커밋이 하나씩 있을 경우, 이 경우는 지금까지 작업한 내용이 나뉘어 담겨있다는 뜻입니다. 이럴 때 두 브랜치를 합칠(merge) 수 있습니다. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p>git branch bugFix </p>
</li>
<li><p>git commit</p>
</li>
<li><p>git checkout master</p>
</li>
<li><p>git commit 을 하면 아래와 같은 그림이 나옵니다.<br><img src="/img/git_merge_bugFix_1.png" alt="git_merge_bugFix_1"></p>
</li>
<li><p>git merge bugFix<br><img src="/img/git_merge_bugFix_2.png" alt="git_merge_bugFix_2"></p>
</li>
<li><p>git checkout bugFix</p>
</li>
<li><p>git merge master<br><img src="/img/git_merge_bugFix_3.png" alt="git_merge_bugFix_3"></p>
</li>
</ol>
<p><strong>틀리거나 이상한 내용이 있으면 알려주세요, 확인 후 수정하겠습니다!</strong></p>
]]></content>
      <categories>
        <category>git</category>
        <category>branch</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>branch</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone과 sourceTree</title>
    <url>/2020/05/05/git_clone&amp;sourceTree/</url>
    <content><![CDATA[<p><strong>git 2번째 내용 : sourcetree 만들기 및 commit 주의사항</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p>
</blockquote>
<p>Source Tree 설치<br><a href="https://www.sourcetreeapp.com/">소스트리 다운로드</a><br><strong>주의사항</strong></p>
<ol>
<li>아틀라시안에 가입해야 합니다. </li>
<li>bitbucket 등의 설정은 skip합니다. </li>
</ol>
<p><strong>소스트리를 설치한 후 저장소 클론</strong><br>github에 만들어진 README.md 등의 파일이 내 컴퓨터 문서폴더 안으로 복사됩니다.<br>이 때, 내 컴퓨터 문서폴더 안에 저장소이름의 폴더가 생성됩니다. </p>
<p><strong>작업 후 스테이지에 파일 추가</strong><br>만들어진 폴더를 열고 에디터 등을 이용해서 hello.html을 만들어 봅시다.<br>저장위치는 Documents/hello-world/가 됩니다. </p>
<p><strong>커밋 주의사항</strong></p>
<ol>
<li>반드시 한 번에 하나의 논리적인 작업만을 커밋합니다. </li>
<li>커밋 메세지를 잘 적어야 합니다.<br>특히 커밋 메세지는 미래의 여러분과 다른 개발자를 위해서 꼼꼼히 적어야 합니다. </li>
</ol>
<p><strong>커밋 메세지 작성법</strong></p>
<ol>
<li>첫 줄에 간단하지만 명확하게 내용을 씁니다. </li>
<li>한줄 비웁니다. </li>
<li>자세한 내용을 적습니다. </li>
</ol>
<p><strong>checkout을 이용해서 저장하지 않은 변경 내용 취소하기</strong></p>
<ul>
<li>checkout을 이용하면 마지막 커밋으로 되돌아갈 수 있습니다. </li>
<li>sourceTree의 코드뭉치 버리기 기능을 사용하면 변경사항을 되돌릴 수 있습니다. </li>
<li>commit 전 내용을 돌릴 수 있습니다. </li>
</ul>
]]></content>
      <categories>
        <category>git</category>
        <category>sourcetree</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>sourcetree</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo icarus 테마에 adsense 추가하기</title>
    <url>/2020/05/04/Hexo-adsense/</url>
    <content><![CDATA[<p><strong>오늘은 Hexo icarus 테마에 adsense를 적용하는 것을 공유하려 합니다.</strong></p>
<ol>
<li><p>아래 구글 애드센스 홈페이지에 접속합니다. </p>
<blockquote>
<p><a href="https://www.google.com/adsense/">구글애드센스</a></p>
</blockquote>
</li>
<li><p>구글계정으로 로그인하고 애드센스를 신청합니다. </p>
</li>
<li><p>Hexo icarus 테마 !_config.yml에 아래와 같이 등록합니다.<br><img src="/img/hexo-icarus-adsense.png" alt="hexo-icarus-adsense.png"></p>
</li>
<li><p>구글 에드센스 확인버튼을 누른 후 다음과 같은 이미지가 뜨면 승인을 기다립니다.<br><img src="/img/hexo-icarus-adsense1.png" alt="hexo-icarus-adsense1"></p>
</li>
</ol>
<p>수고하셨습니다!</p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>adsense</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>icarus</tag>
        <tag>adsense</tag>
      </tags>
  </entry>
  <entry>
    <title>cheatsheet</title>
    <url>/2020/04/29/cheatsheet/</url>
    <content><![CDATA[<p><strong>나만의 cheatsheet 정리</strong></p>
<p><strong>math</strong></p>
<blockquote>
<p><a href="https://datascienceschool.net/view-notebook/04358acdcf3347fc989c4cfc0ef6121c/">김도형의 데이터 사이언스 스쿨 - 수학편</a></p>
</blockquote>
<p><strong>pandas</strong></p>
<blockquote>
<p><a href="https://www.journaldev.com/23365/python-string-to-datetime-strptime">pandas 날짜 데이터</a><br><a href="https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf">pandas cheatsheet</a><br><a href="https://dataitgirls2.github.io/10minutes2pandas/">pandas 10분 완성</a><br><a href="https://www.kaggle.com/grroverpr/pandas-cheatsheet">kaggle pandas cheatsheet</a></p>
</blockquote>
<p><strong>seaborn</strong></p>
<blockquote>
<p><a href="https://www.interactivechaos.com/sites/default/files/data/seaborn_cheat_sheet.pdf">seaborn cheatsheet</a></p>
</blockquote>
<p><strong>데이터 분석가 인터뷰 용어 정리</strong></p>
<blockquote>
<p><a href="https://yamalab.tistory.com/78?category=711359">인터뷰 용어 정리</a></p>
</blockquote>
<p><strong>git 내용 정리</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a><br><a href="https://learngitbranching.js.org/?locale=ko">learning_git</a></p>
</blockquote>
]]></content>
      <categories>
        <category>cheatsheet</category>
      </categories>
      <tags>
        <tag>cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo profile 변경하기</title>
    <url>/2020/04/25/Hexo-profile/</url>
    <content><![CDATA[<p>안녕하세요, Hexo Icarus theme의 프로필 사진을 변경하는 방법에 대해 알아보겠습니다. </p>
<ol>
<li><p>아래와 같이 터미널에서 source 폴더 안에 img 폴더를 만든 후 img 폴더 안에 이미지 사진을 올리고 아래와 같이 작성하면 됩니다. </p>
</li>
<li><p>파일이름 대소문자를 구분한다고 하니 동일하게 진행하셔야 이미지가 보입니다. </p>
</li>
<li><p><strong>![문자 사이에 공간이 없어야 합니다]</strong> 즉, 대쉬를 이용해서 문자와 문자 사이에 공간을 없애야 정상적으로 작동합니다. </p>
</li>
<li><p>upload까지 약 3~4분 정도 소요되니 참고하시길 바랍니다.  </p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir img</span><br></pre></td></tr></table></figure>

<ol>
<li>Hexo 프로필 사진 변경<br><img src="/img/hexo-icarus-profile-avata.jpg" alt="hexo-icarus-profile-avata"></li>
</ol>
<ol start="2">
<li>Hexo 프로필 아래 twitter 아이콘 제거하기<br><img src="/img/hexo-icarus-twitter.png" alt="hexo-icarus-twitter.png"></li>
</ol>
<ol start="3">
<li>Hexo 블로그에 이미지 올리기<br><img src="/img/hexo-icarus-image-upload.png" alt="img 폴더를 만들고 그 안에 이미지를 추가한다"></li>
</ol>
<blockquote>
<p>출처: <a href="https://github.com/ppoffice/hexo-theme-icarus/wiki/Theme">이카루스 테마 페이지</a></p>
</blockquote>
<hr/>]]></content>
      <categories>
        <category>hexo</category>
        <category>profile</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>icarus</tag>
        <tag>profile</tag>
        <tag>logo</tag>
      </tags>
  </entry>
  <entry>
    <title>project-LinearRegression</title>
    <url>/2020/04/25/project-LinearRegression/</url>
    <content><![CDATA[<p><strong>Linear Regression project</strong></p>
<ul>
<li>한달동안 팀원들과 함께 한 프로젝트</li>
<li>홍성현님, 유호원님, 배준영님 한달동안 수고 많았습니다 :)</li>
<li>자료는 아래 깃헙에서 확인해주세요. </li>
</ul>
<blockquote>
<p><a href="https://nbviewer.jupyter.org/github/HowardHowonYu/usedcar_regression_project/blob/howard/howard/used_car_regression_final.ipynb">Linear Regression project UsedCar price</a></p>
</blockquote>
]]></content>
      <categories>
        <category>project</category>
        <category>LinearRegression</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>LinearRegression</tag>
      </tags>
  </entry>
  <entry>
    <title>favicon</title>
    <url>/2020/04/25/favicon/</url>
    <content><![CDATA[<p><strong>favicon</strong></p>
<blockquote>
<p><a href="'https://pngtree.com/">favicon 출처</a></p>
</blockquote>
]]></content>
      <categories>
        <category>favicon</category>
      </categories>
      <tags>
        <tag>favicon</tag>
      </tags>
  </entry>
  <entry>
    <title>re(regular expression)</title>
    <url>/2020/04/24/re/</url>
    <content><![CDATA[<ul>
<li><p>정규표현식 </p>
<ul>
<li>regular expression</li>
<li>특정한 패턴과 일치하는 문자열를 ‘검색’, ‘치환’, ‘제거’ 하는 기능을 지원</li>
<li>정규표현식의 도움없이 패턴을 찾는 작업(Rule 기반)은 불완전 하거나, 작업의 cost가 높음</li>
<li>e.g) 이메일 형식 판별, 전화번호 형식 판별, 숫자로만 이루어진 문자열 등</li>
</ul>
</li>
<li><p><strong>raw string</strong></p>
<ul>
<li>문자열 앞에 r이 붙으면 해당 문자열이 구성된 그대로 문자열로 변환</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abcdef\n'</span> <span class="comment"># escapce 문자열</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = <span class="string">r'abcdef\n'</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<h4 id="기본-패턴"><a href="#기본-패턴" class="headerlink" title="기본 패턴"></a><strong>기본 패턴</strong></h4><ul>
<li><p>a, X, 9 등등 문자 하나하나의 character들은 정확히 해당 문자와 일치</p>
<ul>
<li>e.g) 패턴 test는 test 문자열과 일치</li>
<li>대소문자의 경우 기본적으로 구별하나, 구별하지 않도록 설정 가능</li>
</ul>
</li>
<li><p>몇몇 문자들에 대해서는 예외가 존재하는데, 이들은 틀별한 의미로 사용 됨</p>
<ul>
<li>. ^ $ * + ? { } [ ] \ | ( )</li>
</ul>
</li>
<li><p>. (마침표) - 어떤 한개의 character와 일치 (newline(엔터) 제외)</p>
</li>
<li><p>\w - 문자 character와 일치 [a-zA-Z0-9_]</p>
</li>
<li><p>\s - 공백문자와 일치</p>
</li>
<li><p>\t, \n, \r - tab, newline, return</p>
</li>
<li><p>\d - 숫자 character와 일치 [0-9]</p>
</li>
<li><p>^ = 시작, $ = 끝 각각 문자열의 시작과 끝을 의미</p>
</li>
<li><p>\가 붙으면 스페셜한 의미가 없어짐. 예를들어 \.는 .자체를 의미 \\는 \를 의미</p>
</li>
<li><p>자세한 내용은 링크 참조 <a href="https://docs.python.org/3/library/re.html">https://docs.python.org/3/library/re.html</a></p>
</li>
</ul>
<h4 id="search-method"><a href="#search-method" class="headerlink" title="search method"></a><strong>search method</strong></h4><ul>
<li>첫번째로 패턴을 찾으면 match 객체를 반환</li>
<li>패턴을 찾지 못하면 None 반환</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'abc'</span>, <span class="string">'123abdef'</span>)</span><br><span class="line">m</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'\d\d\d\w'</span>, <span class="string">'112abcdef119'</span>)</span><br><span class="line">m</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'..\w\w'</span>, <span class="string">'@#$%ABCDabcd'</span>)</span><br><span class="line">m</span><br></pre></td></tr></table></figure>

<h4 id="metacharacters-메타-캐릭터"><a href="#metacharacters-메타-캐릭터" class="headerlink" title="metacharacters (메타 캐릭터)"></a><strong>metacharacters (메타 캐릭터)</strong></h4><h4 id="문자들의-범위를-나타내기-위해-사용"><a href="#문자들의-범위를-나타내기-위해-사용" class="headerlink" title="[] 문자들의 범위를 나타내기 위해 사용"></a><strong>[]</strong> 문자들의 범위를 나타내기 위해 사용</h4><ul>
<li>[] 내부의 메타 캐릭터는 캐릭터 자체를 나타냄</li>
<li>e.g)</li>
<li>[abck] : a or b or c or k</li>
<li>[abc.^] : a or b or c or . or ^</li>
<li>[a-d]  : -와 함께 사용되면 해당 문자 사이의 범위에 속하는 문자 중 하나</li>
<li>[0-9]  : 모든 숫자</li>
<li>[a-z]  : 모든 소문자</li>
<li>[A-Z]  : 모든 대문자</li>
<li>[a-zA-Z0-9] : 모든 알파벳 문자 및 숫자</li>
<li>[^0-9] : ^가 맨 앞에 사용 되는 경우 해당 문자 패턴이 아닌 것과 매칭</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'[cbm]at'</span>, <span class="string">'aat'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'[0-4]haha'</span>, <span class="string">'7hahah'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'[abc.^]aron'</span>, <span class="string">'daron'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'[^abc]aron'</span>, <span class="string">'0aron'</span>)</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title="\"></a><strong>\</strong></h4><ol>
<li>다른 문자와 함께 사용되어 특수한 의미를 지님<ul>
<li>\d : 숫자를          [0-9]와 동일</li>
<li>\D : 숫자가 아닌 문자  [^0-9]와 동일</li>
<li>\s : 공백 문자(띄어쓰기, 탭, 엔터 등)</li>
<li>\S : 공백이 아닌 문자</li>
<li>\w : 알파벳대소문자, 숫자 [0-9a-zA-Z]와 동일</li>
<li>\W : non alpha-numeric 문자 [^0-9a-zA-Z]와 동일</li>
</ul>
</li>
<li>메타 캐릭터가 캐릭터 자체를 표현하도록 할 경우 사용<ul>
<li>\. , \\</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'\Sand'</span>, <span class="string">'apple land banana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'\.and'</span>, <span class="string">'.and'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title="."></a><strong>.</strong></h4><ul>
<li>모든 문자를 의미</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'p.g'</span>, <span class="string">'pig'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="반복패턴"><a href="#반복패턴" class="headerlink" title="반복패턴"></a><strong>반복패턴</strong></h4><ul>
<li>패턴 뒤에 위치하는 *, +, ?는 해당 패턴이 반복적으로 존재하는지 검사 <ul>
<li>‘+’ -&gt; 1번 이상의 패턴이 발생</li>
<li>‘*’ -&gt; 0번 이상의 패턴이 발생</li>
<li>‘?’ -&gt; 0 혹은 1번의 패턴이 발생</li>
</ul>
</li>
<li>반복을 패턴의 경우 greedy하게 검색 함, 즉 가능한 많은 부분이 매칭되도록 함<ul>
<li>e.g) a[bcd]*b  패턴을 abcbdccb에서 검색하는 경우<ul>
<li>ab, abcb, abcbdccb 전부 가능 하지만 최대한 많은 부분이 매칭된 abcbdccb가 검색된 패턴</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'a[bcd]*b'</span>, <span class="string">'abcbdccb'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'b\w+a'</span>, <span class="string">'banana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'i+'</span>, <span class="string">'piigiii'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'pi+g'</span>, <span class="string">'pg'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'pi*g'</span>, <span class="string">'pg'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'https?'</span>, <span class="string">'http://www.naver.com'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="-2"><a href="#-2" class="headerlink" title="^, $"></a><strong>^</strong>, <strong>$</strong></h4><ul>
<li>^  문자열의 맨 앞부터 일치하는 경우 검색</li>
<li>$  문자열의 맨 뒤부터 일치하는 경우 검색</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'b\w+a'</span>, <span class="string">'cabana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'^b\w+a'</span>, <span class="string">'cabana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'^b\w+a'</span>, <span class="string">'babana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'b\w+a$'</span>, <span class="string">'cabana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'b\w+a$'</span>, <span class="string">'cabanap'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="grouping"><a href="#grouping" class="headerlink" title="grouping"></a><strong>grouping</strong></h4><ul>
<li>()을 사용하여 그루핑</li>
<li>매칭 결과를 각 그룹별로 분리 가능</li>
<li>패턴 명시 할 때, 각 그룹을 괄호() 안에 넣어 분리하여 사용</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = re.search(<span class="string">r'(\w+)@(.+)'</span>, <span class="string">'test@gmail.com'</span>)</span><br><span class="line">print(m.group(<span class="number">1</span>))</span><br><span class="line">print(m.group(<span class="number">2</span>))</span><br><span class="line">print(m.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h4 id="-3"><a href="#-3" class="headerlink" title="{}"></a><strong>{}</strong></h4><ul>
<li>*, +, ?을 사용하여 반복적인 패턴을 찾는 것이 가능하나, 반복의 횟수 제한은 불가</li>
<li>패턴뒤에 위치하는 중괄호{}에 숫자를 명시하면 해당 숫자 만큼의 반복인 경우에만 매칭</li>
<li>{4} - 4번 반복</li>
<li>{3,4} - 3 ~ 4번 반복</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">'pi&#123;3,5&#125;g'</span>, <span class="string">'piiiiig'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="미니멈-매칭-non-greedy-way"><a href="#미니멈-매칭-non-greedy-way" class="headerlink" title="미니멈 매칭(non-greedy way)"></a><strong>미니멈 매칭(non-greedy way)</strong></h4><ul>
<li>기본적으로 *, +, ?를 사용하면 greedy(맥시멈 매칭)하게 동작함</li>
<li>*?, +?을 이용하여 해당 기능을 구현</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'&lt;.+&gt;'</span>, <span class="string">'&lt;html&gt;haha&lt;/html&gt;'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'&lt;.+?&gt;'</span>, <span class="string">'&lt;html&gt;haha&lt;/html&gt;'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="-4"><a href="#-4" class="headerlink" title="{}?"></a><strong>{}?</strong></h4><ul>
<li>{m,n}의 경우 m번 에서 n번 반복하나 greedy하게 동작</li>
<li>{m,n}?로 사용하면 non-greedy하게 동작. 즉, 최소 m번만 매칭하면 만족</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'a&#123;3,5&#125;'</span>, <span class="string">'aaaaa'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'a&#123;3,5&#125;?'</span>, <span class="string">'aaaaa'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="match"><a href="#match" class="headerlink" title="match"></a><strong>match</strong></h4><ul>
<li>search와 유사하나, 주어진 문자열의 시작부터 비교하여 패턴이 있는지 확인</li>
<li>시작부터 해당 패턴이 존재하지 않다면 None 반환</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(<span class="string">r'\d\d\d'</span>, <span class="string">'my number is 123'</span>)</span><br><span class="line"></span><br><span class="line">re.match(<span class="string">r'\d\d\d'</span>, <span class="string">'123 is my number'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'^\d\d\d'</span>, <span class="string">'123 is my number'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="findall"><a href="#findall" class="headerlink" title="findall"></a><strong>findall</strong></h4><ul>
<li>search가 최초로 매칭되는 패턴만 반환한다면, findall은 매칭되는 전체의 패턴을 반환</li>
<li>매칭되는 모든 결과를 리스트 형태로 반환</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r'[\w-]+@[\w.]+'</span>, <span class="string">'test@gmail.com haha test2@gmail.com nice test test'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="sub"><a href="#sub" class="headerlink" title="sub"></a><strong>sub</strong></h4><ul>
<li>주어진 문자열에서 일치하는 모든 패턴을 replace</li>
<li>그 결과를 문자열로 다시 반환함</li>
<li>두번째 인자는 특정 문자열이 될 수도 있고, 함수가 될 수 도 있음</li>
<li>count가 0인 경우는 전체를, 1이상이면 해당 숫자만큼 치환 됨</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(<span class="string">r'[\w-]+@[\w.]+'</span>, <span class="string">'great'</span>, <span class="string">'test@gmail.com haha test2@gmail.com nice test test'</span>, count=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a><strong>compile</strong></h4><ul>
<li>동일한 정규표현식을 매번 다시 쓰기 번거로움을 해결</li>
<li>compile로 해당표현식을 re.RegexObject 객체로 저장하여 사용가능</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">email_reg = re.compile(<span class="string">r'[\w-]+@[\w.]+'</span>)</span><br><span class="line">email_reg.search(<span class="string">'test@gmail.com haha good'</span>)</span><br><span class="line">email_reg.findall()</span><br></pre></td></tr></table></figure>

<h3 id="연습문제"><a href="#연습문제" class="headerlink" title="연습문제"></a>연습문제</h3><ul>
<li>아래 뉴스에서 이메일 주소를 추출해 보세요</li>
<li>다음중 올바른 (http, https) 웹페이지만 찾으시오</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">&gt; 위의 두 모듈이 없는 경우에는 pip install requests bs4 실행</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news_content</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    content = response.text</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">'html5lib'</span>)</span><br><span class="line"></span><br><span class="line">    div = soup.find(<span class="string">'div'</span>, attrs = &#123;<span class="string">'id'</span> : <span class="string">'harmonyContainer'</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    content = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> paragraph <span class="keyword">in</span> div.find_all(<span class="string">'p'</span>):</span><br><span class="line">        content += paragraph.get_text()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">news1 = get_news_content(<span class="string">'https://news.v.daum.net/v/20190617073049838'</span>)</span><br><span class="line">print(news1)</span><br><span class="line"></span><br><span class="line">email_reg = re.compile(<span class="string">r'[\w-]+@[\w.]+\w+'</span>)</span><br><span class="line">email_reg.search(news1)</span><br><span class="line"></span><br><span class="line">webs = [<span class="string">'http://www.test.co.kr'</span>,</span><br><span class="line">        <span class="string">'https://www.test1.com'</span>,</span><br><span class="line">        <span class="string">'http://www.test.com'</span>,</span><br><span class="line">        <span class="string">'ftp://www.test.com'</span>,</span><br><span class="line">        <span class="string">'http:://www.test.com'</span>,</span><br><span class="line">        <span class="string">'htp://www.test.com'</span>,</span><br><span class="line">        <span class="string">'http://www.google.com'</span>,</span><br><span class="line">        <span class="string">'https://www.homepage.com.'</span>]</span><br><span class="line"></span><br><span class="line">web_reg = re.compile(<span class="string">r'https?://[\w.]+\w+$'</span>)</span><br><span class="line">list(map(<span class="keyword">lambda</span> w:web_reg.search(w) != <span class="literal">None</span>, webs))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>re</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>porject EDA</title>
    <url>/2020/04/23/porject-EDA/</url>
    <content><![CDATA[<p><strong>EDA project</strong></p>
<ul>
<li>처음으로 진행했던 프로젝트</li>
<li>아파트 가격분석 EDA </li>
<li>자세한 내용은 아래 깃헙을 참고해주세요. </li>
</ul>
<blockquote>
<p><a href="https://github.com/cds0804/project-1-EDA/blob/master/EDA%20project%20Analysis%20APT%20price_20200219.ipynb">EDA project Analysis APT price</a></p>
</blockquote>
]]></content>
      <categories>
        <category>project</category>
        <category>EDA</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>eda</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/21/webcrawling-robots.txt/</url>
    <content><![CDATA[<h3 id="web-crawling-하기전에-알아둬야-할-사항"><a href="#web-crawling-하기전에-알아둬야-할-사항" class="headerlink" title="web crawling 하기전에 알아둬야 할 사항"></a>web crawling 하기전에 알아둬야 할 사항</h3><ul>
<li>예를들어, 네이버 홈페이지를 크롤링한다고 하면 <a href="http://www.naver.com/robots.txt을">www.naver.com/robots.txt을</a> 브라우저 주소창에 입력하면 로봇 배제 규약에 관한 내용이 나옵니다. </li>
</ul>
<h3 id="robots-txt-내용-요약"><a href="#robots-txt-내용-요약" class="headerlink" title="robots.txt 내용 요약"></a>robots.txt 내용 요약</h3><ol>
<li>모든 로봇 접근 허락<br>User-agent: *<br>Allow : /<ol>
<li>모든 로봇 접근 차단<br>User-agent: *<br>Disallow: /</li>
<li>모든 로봇에 디렉토리 3곳 접근 차단<br>User-agent: *<br>Disallow: /cgi-bin/<br>Disallow: /tmp/<br>Disallow: /junk/</li>
<li>모든 로봇에 특정 파일 접근 차단<br>User-agent: *<br>Disallow: /directory/file.html</li>
<li>BadBot 로봇에 모든 파일 접근 차단<br>User-agent: BadBot<br>Disallow: /</li>
<li>BadBot과 Googlebot에 특정 디렉토리 접근 차단<br>User-agent: BadBot<br>User-agent: Googlebot<br>Disallow: /private/</li>
</ol>
</li>
</ol>
<h1 id="참고사항-2020년-4월-21일-현재"><a href="#참고사항-2020년-4월-21일-현재" class="headerlink" title="참고사항 2020년 4월 21일 현재"></a>참고사항 2020년 4월 21일 현재</h1><ol>
<li>네이버 로봇 규약 설정<br>출처:  <a href="https://searchadvisor.naver.com/guide/seo-basic-robots">https://searchadvisor.naver.com/guide/seo-basic-robots</a></li>
</ol>
<ul>
<li><p>사이트의 루트 페이지만 수집 허용으로 설정합니다.<br>User-agent: *<br>Disallow: /<br>Allow: /$</p>
<ul>
<li>sitemap.xml 지정<br>User-agent: *<br>Allow: /<br>Sitemap: <a href="http://www.example.com/sitemap.xml">http://www.example.com/sitemap.xml</a></li>
</ul>
</li>
</ul>
<ol>
<li>다음 로봇 규약 설정</li>
</ol>
<ul>
<li><p>모든 로봇의 접근 차단<br>User-agent: *<br>Disallow: /</p>
<ol>
<li>카카오 로봇 규약 설정</li>
</ol>
</li>
<li><p>모든 로봇의 접근 차단</p>
</li>
<li><p>See <a href="http://www.robotstxt.org/wc/norobots.html">http://www.robotstxt.org/wc/norobots.html</a> for documentation on how to use the robots.txt file</p>
</li>
<li><p>To ban all spiders from the entire site uncomment the next two lines:<br>User-agent: *<br>Disallow: /</p>
</li>
</ul>
<p>문제가 있거나 오타가 있으면 댓글이나 메일로 알려주세요.<br>감사합니다 :)</p>
<p>자세한 내용은 아래 사이트를 참조하세요.<br>출처: <a href="https://gbsb.tistory.com/80">https://gbsb.tistory.com/80</a><br>출처: <a href="https://medium.com/@euncho/robots-txt-e08328c4f0fd">https://medium.com/@euncho/robots-txt-e08328c4f0fd</a><br>출처: <a href="https://support.google.com/webmasters/answer/6062596?hl=ko">https://support.google.com/webmasters/answer/6062596?hl=ko</a><br>출처: <a href="https://ko.wikipedia.org/wiki/%EB%A1%9C%EB%B4%87_%EB%B0%B0%EC%A0%9C_%ED%91%9C%EC%A4%80">https://ko.wikipedia.org/wiki/%EB%A1%9C%EB%B4%87_%EB%B0%B0%EC%A0%9C_%ED%91%9C%EC%A4%80</a></p>
]]></content>
      <categories>
        <category>crawling</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
        <tag>robots.txt</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/21/webcrawling-3/</url>
    <content><![CDATA[<h3 id="python의-request-모듈을-사용하여-http-request-resopnse-확인하기"><a href="#python의-request-모듈을-사용하여-http-request-resopnse-확인하기" class="headerlink" title="python의 request 모듈을 사용하여 http request/resopnse 확인하기"></a>python의 request 모듈을 사용하여 http request/resopnse 확인하기</h3><h4 id="requests-모듈"><a href="#requests-모듈" class="headerlink" title="requests 모듈"></a>requests 모듈</h4><ol>
<li>http request/response를 위한 모듈</li>
<li>HTTP method를 메소드 명으로 사용하여 request 요청 예) get, post</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># get 방식</span></span><br><span class="line">url = <span class="string">'https://news.v.daum.net/v/20190728165812603'</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 방식</span></span><br><span class="line">url = <span class="string">'https://www.kangcom.com/member/member_check.asp'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'testid'</span>,</span><br><span class="line">    <span class="string">'pwd'</span>: <span class="string">'password'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=data)</span><br><span class="line">resp.text</span><br></pre></td></tr></table></figure>

<h4 id="HTTP-header-데이터-이용하기"><a href="#HTTP-header-데이터-이용하기" class="headerlink" title="HTTP header 데이터 이용하기"></a>HTTP header 데이터 이용하기</h4><ol>
<li>header 데이터 구성하기</li>
<li>header 데이터 전달하기</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://news.v.daum.net/v/20190728165812603'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">resp.text</span><br></pre></td></tr></table></figure>
<h4 id="HTTP-response-처리하기"><a href="#HTTP-response-처리하기" class="headerlink" title="HTTP response 처리하기"></a>HTTP response 처리하기</h4><ol>
<li>response 객체의 이해</li>
<li>status_code 확인하기</li>
<li>text 속성 확인하기</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://news.v.daum.net/v/20190728165812603'</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">    resp.headers</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="BeautifulSoup의-find와-find-all-함수"><a href="#BeautifulSoup의-find와-find-all-함수" class="headerlink" title="BeautifulSoup의 find와 find_all 함수"></a>BeautifulSoup의 find와 find_all 함수</h3><ol>
<li>find 함수 <ul>
<li>조건에 만족하는 하나의 tag만 검색</li>
<li>특정 html tag를 검색</li>
<li>검색 조건을 명시하여 찾고자하는 tag를 검색</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = soup.find(<span class="string">'h3'</span>)</span><br><span class="line">tag.get_text()</span><br><span class="line"></span><br><span class="line">tag = soup.find(<span class="string">'p'</span>)</span><br><span class="line">tag.get_text()</span><br><span class="line"></span><br><span class="line">tag = soup.find(<span class="string">'div'</span>, id=<span class="string">'upper'</span>)</span><br><span class="line">tag.get_text().strip()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>find_all함수 </p>
<ul>
<li>조건에 맞는 모든 tag를 리스트로 반환합니다. </li>
</ul>
</li>
<li><p>get_text 함수</p>
<ul>
<li>tag안의 value를 추출</li>
<li>부모tag의 경우, 모든 자식 tag의 value를 추출</li>
</ul>
</li>
<li><p>attribute 값 추출하기</p>
<ul>
<li>경우에 따라 추출하고자 하는 값이 attribute에도 존재함</li>
<li>이 경우에는 검색한 tag에 attribute 이름을 [ ]연산을 통해 추출가능</li>
<li>예) div.find(‘h3’)[‘title’]</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = soup.find(<span class="string">'h3'</span>)</span><br><span class="line">tag[<span class="string">'title'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="CSS의-select-one과-select-함수"><a href="#CSS의-select-one과-select-함수" class="headerlink" title="CSS의 select_one과 select 함수"></a>CSS의 select_one과 select 함수</h3><ul>
<li>CSS를 이용하여 tag 찾기<ul>
<li>select, select_one함수 사용 </li>
<li>css selector 사용법<ul>
<li>태그명 찾기 tag </li>
<li>자손 태그 찾기 - 자손 관계 (tag tag)</li>
<li>자식 태그 찾기 - 다이렉트 자식 관계 (tag &gt; tag)</li>
<li>아이디 찾기 #id</li>
<li>클래스 찾기 .class</li>
<li>속성값 찾기 [name=’test’]<ul>
<li>속성값 prefix 찾기 [name ^=’test’]</li>
<li>속성값 suffix 찾기 [name $=’test’]</li>
<li>속성값 substring 찾기 [name *=’test]</li>
</ul>
</li>
<li>n번째 자식 tag 찾기 :nth-child(n)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>crawling</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/21/webcrawling-2/</url>
    <content><![CDATA[<p>※ 출처 : fast campus 머신러닝 인강(변영효 강사님)</p>
<ul>
<li><p>일부 내용만 발췌하였고, 기본적인 개념 및 추가내용을 확인하시려면 인강 수강을 권장드립니다. </p>
</li>
<li><p>내용요약</p>
</li>
<li><ol>
<li>웹사이트에서 원하는 정보의 태그를 파악</li>
</ol>
</li>
<li><ol start="2">
<li>모듈을 통해 태그를 찾은 후 원하는 값을 가져옴</li>
</ol>
</li>
</ul>
<h3 id="2-HTML-Hyper-Text-Markup-Language"><a href="#2-HTML-Hyper-Text-Markup-Language" class="headerlink" title="2. HTML(Hyper Text Markup Language)"></a>2. HTML(Hyper Text Markup Language)</h3><ul>
<li><p>웹 사이트를 생성하기 위한 언어로 문서와 문서가 링크로 연결되어 있고, 태그를 사용하는 언어</p>
</li>
<li><p>태그 : HTML 문서의 기본 블락</p>
</li>
<li><p>브라우저에 어떻게 렌더링(화면에 표시)될지 전달</p>
</li>
<li><p>&lt;태그명 속성1=”속성값1” 속성2=”속성값2”&gt;Value&lt;/태그명&gt;</p>
</li>
<li><p>&lt;태그명 속성1=”속성값1” 속성2=”속성값2”/&gt;</p>
</li>
<li><p>p 태그 : paragraph tag</p>
<p>한 문단으로 표시해주는 태그</p>
</li>
<li><p>div 태그</p>
<div>그룹핑을 하는 태그</div>
</li>
<li><p>대부분의 crawling은 태그 안에 있는 값을 추출하는 작업입니다. </p>
</li>
<li><p>html 기본구조</p>
</li>
</ul>
<html>
    <head>
        <title>BeautifulSoup test</title>
    <link rel="alternate" href="/atom.xml" title="안녕하세요!! 목표는 1인분!" type="application/atom+xml">
</head>
    <bocy>
        <div id='upper' class='test'>
            <h3 title='Good Content Title'>Contents Title</h3>
            <p>Test contents</p>
            <img src='https://newsimg.sedaily.com/2018/05/16/1RZJYCTROK_1.jpg'>
        </div>
        <div id='lower' class='test'>
            <p>Test Test Test 1</p>
            <p>Test Test Test 2</p>
            <p>Test Test Test 3</p>
        </div>
    </body>
</html>

<p>웹 사이트에서 본인에게 필요한 정보를 가져오는 실습을 해보는걸 추천드립니다. </p>
]]></content>
      <categories>
        <category>crawling</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>visited_count</title>
    <url>/2020/04/17/Hexo-visited-count/</url>
    <content><![CDATA[<p><strong>블로그 방문자 수 설정하기</strong></p>
<blockquote>
<p><a href="https://msj0319.github.io/2020/02/15/Hexo-Blog-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B0%A9%EB%AC%B8%EC%9E%90-%EB%B0%8F-%EC%A1%B0%ED%9A%8C%EC%88%98-%EC%B9%B4%EC%9A%B4%ED%8C%85-%EA%B8%B0%EB%8A%A5-%EB%84%A3%EA%B8%B0/">참조 사이트</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>icarus</tag>
        <tag>visit</tag>
      </tags>
  </entry>
  <entry>
    <title>git 기본 개념 및 계정 만들기</title>
    <url>/2020/04/15/git_ceate/</url>
    <content><![CDATA[<p><strong>git 1번째 내용 : 아래 인프런 무료강의를 시청한 후 작성하였습니다.</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p>
</blockquote>
<ul>
<li>Git이란?<br>형상 관리 시스템(version control system)의 한 종류입니다.<br>주로 개발자들이 프로그램과 관련된 파일들을 저장하는데 사용합니다.<br>게임의 세이브 포인트와 유사한데, 언제든지 저장 시점으로 되돌아 갈 수 있습니다. </li>
</ul>
<p><strong>절차</strong></p>
<ol>
<li>github 가입</li>
<li>github 저장소 생성</li>
<li>github 저장소 클론</li>
<li>내 컴퓨터의 내 문서 아래에 생성된 프로젝트 디렉토리에서 파일 생성 및 작업 완료</li>
<li>커밋할 파일들 선택해서 스테이지에 올리기(add)</li>
<li>커밋하기(commit)</li>
<li>푸시하기(push)</li>
<li>github.com/내아이디/내프로젝트 링크를 통해서 정상적으로 업로드 되어있는지 확인</li>
</ol>
<p><strong>3가지 기본 개념</strong></p>
<ol>
<li>커밋(commit)<br>게임의 세이브에 해당하는 행동입니다.<br>언제든지 커밋한 시점으로 돌아갈 수 있습니다.<br>저장을 원하는 파일들을 묶어서 커밋 명령을 수행하면 됩니다. </li>
<li>스테이지에 올린다(add)<br>커밋전에 저장을 원하는 파일들을 묶는 일입니다.<br>스테이지에 파일을 올리는 작업, 이를 간단히 줄여서 add라고 합니다. </li>
<li>github에 업로드(push)<br>커밋을 하면 현재 작업 내용의 세이브 데이터가 내 컴퓨터에 저장됩니다.<br>github에 업로드하면 게임의 원격 저장과 비슷한 일을 합니다.<br>다른 사람과 공유할 수 있고, 내 컴퓨터의 데이터가 날아가도 안전하게 다시 복구할 수 있습니다.<br>github에 업로드 하는걸 git에서는 “push”라고 합니다. </li>
</ol>
<p><strong>직접 해 보기</strong><br>github.com 가입<br><a href="http://github.com/join을">http://github.com/join을</a> 통해 깃헙 가입을 합니다.<br><strong>주의사항</strong></p>
<ol>
<li>github은 아이디 노출도가 높습니다.<br>개발자스러운 아이디를 신중하게 정합니다. </li>
<li>가입 후 이메일 인증을 해야 가입이 완료됩니다. </li>
</ol>
<p><strong>참고사항</strong><br>github의 캐릭터는 옥토캣입니다.<br>개발자들 사이에서 인기가 매우 높다고 합니다.<br><a href="https://octodex.github.com/">옥토캣 이미지</a></p>
<p><strong>저장소 생성</strong><br>가입 후 저장소를 하나 만듭니다. </p>
<ol>
<li>Repository name 입력합니다. </li>
<li>Description을 적습니다. </li>
<li>Public으로 공개 설정합니다. </li>
<li>initialize this repository with a README 박스를 체크합니다. </li>
<li>Create repository, 초록색 new repository 버튼을 눌러서 저장소를 만듭니다.</li>
</ol>
<ul>
<li><p>저장소 주소를 메모장 등에 저장해 놓습니다. </p>
</li>
<li><p>저장소 주소의 규칙 : <a href="https://github.com/내아이디/저장소이름">https://github.com/내아이디/저장소이름</a> 입니다. </p>
</li>
<li><p>프로젝트와 repository 생성</p>
<blockquote>
<p><a href="https://greeksharifa.github.io/github/2018/06/29/github-usage-02-create-project/">참고 사이트</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Agile</title>
    <url>/2020/04/08/Agile/</url>
    <content><![CDATA[<p><strong>Agile(애자일) 방법론 3줄 요약</strong></p>
<ul>
<li>작업 계획을 짧은 단위로 세우고</li>
<li>시제품을 만들어 나가는 사이클을 반복</li>
<li>고객의 요구 변화에 유연하고도 신속하게 대응하는 개발 방법론 <blockquote>
<p><a href="https://m.post.naver.com/viewer/postView.nhn?volumeNo=18903174&memberNo=36647560">자료출처</a></p>
</blockquote>
</li>
</ul>
<p>요즘 에자일, 에자일 기법에 대해 2번 이상 듣기도 하고 기업에서도 에자일 기법으로 프로세스를 진행한다고 하니 무엇인지에 대한 개념도 알아보고 내 삶에 적용 시키기도 해볼 겸해서 간단하게 기록하려합니다. </p>
<p>우선, 애자일 방법이란 ?<br>기업경영 및 소프트웨어 등의 개발을 고객중심으로 진행하는 방법론</p>
<p>애자일방식의 조직운영</p>
<ol>
<li>고객중심</li>
<li>아웃풋 중심</li>
<li>유연하고도 민첩한 대응력</li>
<li>자율성과 권한을 가진 조직 운영</li>
</ol>
<blockquote>
<p><a href="http://agilemanifesto.org/">에자일 개발 선언문</a></p>
</blockquote>
<p>애자일 방법은 급변화하고 진화하고 있는 환경에 효과적으로 대응할 수 있는 방법이라고 생각됩니다. </p>
<p>피드백 댓글로 남겨주세요~!<br>감사합니다 :)</p>
]]></content>
      <categories>
        <category>concept</category>
        <category>agile</category>
      </categories>
      <tags>
        <tag>concept</tag>
        <tag>agile</tag>
        <tag>Agile</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 만들기</title>
    <url>/2020/04/05/Hexo%20create/</url>
    <content><![CDATA[<p>안녕하세요!<br>hexo 블로그 만드는 방법입니다. </p>
<p>hexo 블로그 생성전 아래 2가지를 먼저 설치해야 합니다. </p>
<ol>
<li><a href="https://nodejs.org/en/">Node.js</a><ul>
<li>Should be at least Node.js 8.10, recommends 10.0 or higher</li>
</ul>
</li>
<li><a href="https://git-scm.com/">Git</a><ul>
<li>github에서 repository를 생성해야 합니다. </li>
</ul>
</li>
</ol>
<blockquote>
<p><a href="https://greeksharifa.github.io/github/2018/06/29/github-usage-02-create-project/">참고 사이트</a></p>
</blockquote>
<blockquote>
<p><a href="https://hexo.io/ko/index.html">hexo 블로그 공식 홈페이지</a></p>
</blockquote>
<blockquote>
<p><a href="https://hexo.io/ko/docs/">hexo 블로그 설치하기 공식문서</a></p>
</blockquote>
<ol>
<li><p>터미널을 엽니다.</p>
</li>
<li><p>블로그를 만들면 폴더가 생성됩니다. 폴더를 생성하고자 하는 곳으로 가셔서 아래의 $를 제외한 명령어를 입력하세요. </p>
</li>
<li><p>띄어쓰기 대소문자 모두 그대로 입력해주세요.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. $ npm install hexo-cli -g</span><br><span class="line">2. $ hexo init blog</span><br></pre></td></tr></table></figure></li>
<li><p>블로그를 만든 폴더로 이동합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5. $ <span class="built_in">cd</span> blog</span><br><span class="line">6. $ npm install</span><br><span class="line">7.  $ hexo server</span><br></pre></td></tr></table></figure></li>
<li><p>로컬에서 hexo 블로그를 확인하실 수 있습니다. </p>
</li>
<li><p>아래 터미널의 경로로 가셔서 파일을 만듭니다. </p>
</li>
</ol>
<p><strong>터미널에서의 경로</strong></p>
<p>본인이 만든 폴더 안의 source 폴더 안에 _post</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span>/_posts/</span><br></pre></td></tr></table></figure>

<p>** 파일 이름(본인이 원하는 이름을 적으시면 됩니다.)**</p>
<p>파일명.md</p>
<p>파일 안에 원하는 내용을 적는데, 맨 위에 제목은 아래처럼 작성해주세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo에 글을 쓰고 사이트에 반영하기</span><br><span class="line">---</span><br><span class="line">위처럼 제목을 적으셨으면 아래줄에 내용을 입력하면 됩니다. </span><br><span class="line"></span><br><span class="line">1번 내용</span><br><span class="line">2번 내용 등</span><br><span class="line">주석을 적을 때는 &#96;#&#96;을 사용하여 적으시면 됩니다.</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://cds0804.github.io/2020/04/05/markdown-0/">마크다운 문법</a></p>
</blockquote>
<p>올릴 내용이 준비되었다면 아래와 같이 4가지 단계를 거쳐 블로그에 내용을 올리시면 됩니다. </p>
<p>1번: 헥소에 변화를 주겠다고 얘기한다.<br>2번: 헥소에 내용을 반영하겠다고 얘기한다.<br>3번: 헥소에 반영된 내용을 확인하겠다고 얘기한다. 수정이 필요하면 수정을 진행한다. 수정이 완료되면 아래 4번을 통해 내용을 공개하겠다고 얘기한다.<br>4번: 블로그에 내용을 게시하겠다고 얘기한다.</p>
<h3 id="터미널-창으로-가셔서-표시-뒤의-글자를-치세요"><a href="#터미널-창으로-가셔서-표시-뒤의-글자를-치세요" class="headerlink" title="터미널 창으로 가셔서 $ 표시 뒤의 글자를 치세요."></a>터미널 창으로 가셔서 $ 표시 뒤의 글자를 치세요.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server <span class="comment"># 생략가능, 로컬영역에서 확인</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<blockquote>
<p>추가적인 내용은 지속적으로 편집하도록 하겠습니다. </p>
</blockquote>
<blockquote>
<p>최대한 자세히 쓰려고 노력중입니다.<br>여러가지 의견 감사히 받겠습니다.<br>댓글을 어떻게 활성화해야 하는지 몰라 여기저기 구글링중입니다. </p>
<blockquote>
<p>댓글기능을 추가하였습니다. </p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
        <category>create</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>create</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 문법에 대하여</title>
    <url>/2020/04/05/markdown-0/</url>
    <content><![CDATA[<p><strong>markdown 문법 사용법</strong></p>
<blockquote>
<p><a href="https://greeksharifa.github.io/references/2018/06/29/markdown-usage/">출처</a></p>
</blockquote>
<p><strong>python</strong> is really <em>cool</em></p>
<ul>
<li>python<ul>
<li>pandas<ul>
<li>depth1</li>
<li>depth2</li>
</ul>
</li>
<li>numpy</li>
</ul>
</li>
<li>java</li>
<li>c++</li>
<li>golang</li>
</ul>
<ol>
<li>python</li>
<li>java</li>
<li>c++</li>
</ol>
<blockquote>
<p>파이썬은 재밌다.</p>
</blockquote>
<p>y = 3x</p>
<blockquote>
<p>$y = 3x$</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.python.org/">파이썬 공식 페이지</a></p>
</blockquote>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/03/webcrawling-1/</url>
    <content><![CDATA[<h3 id="1-개발자-도구를-활용한-웹페이지-분석"><a href="#1-개발자-도구를-활용한-웹페이지-분석" class="headerlink" title="1. 개발자 도구를 활용한 웹페이지 분석"></a>1. 개발자 도구를 활용한 웹페이지 분석</h3><ul>
<li><p>chrome 기준 </p>
</li>
<li><p>웹 브라우저 : html로 작성된 내용을 user(사람들)가 보기 쉽게 랜더링 해주는 기능을 함</p>
</li>
<li><p>Elements 탭</p>
</li>
<li><p>원하는 데이터로 이동하는 기능을 사용</p>
</li>
<li><p>엘레먼트 탭 : 왼쪽 상단에 있음, 원하는 데이터를 클릭했을 때 어떤 테그와 어떤 속성을 가지는지 표시해주는 역할을 함</p>
</li>
<li><p>어떤 태그와 속성을 가지는지 먼저 파악해야 함</p>
</li>
<li><p>Network 탭</p>
</li>
<li><p>Preserve log : 체크 시, 로그가 지워지지 않고 유지됨</p>
</li>
<li><p>브라우저가 서버에 요청되는 모든 요청을 로그함</p>
</li>
<li><p>url 확인 가능</p>
</li>
<li><p>요청이 많은 이유 : 이미지 등은 첫번째 요청에 한번에 오지 않고, 따로 요청하여 받아옴</p>
</li>
<li><p>처음엔 기본적인 데이터만 넘기고, 나머지 데이터는 브라우저에서 ajax 등의 기술을 이용해서 비동기적으로 가져갈 수 있도록 함</p>
</li>
<li><p>HTTP(Hyper Text Transfer Protocol) : HTML 문서 등의 리소스를 전송하는 프로토콜(규약)</p>
</li>
<li><p>클라이언트(user가 사용하는 브라우저)가 서버에 HTTP 요청(Get, Post 등)</p>
</li>
<li><p>서버에서 클라이언트로 HTTP 응답을 함</p>
</li>
<li><p>Get 요청 : 데이터를 url에 포함하여 전달(주로 리소스 요청에 사용), 정보의 공유가능</p>
</li>
<li><p>Post 요청 : 데이터를 Form data에 포함하여 전달(주로 로그인에 사용)</p>
</li>
<li><p>rendering(렌더링) : html을 받아 사용자(사람들)이 볼 수 있도록 출력해주는 작업</p>
</li>
</ul>
]]></content>
      <categories>
        <category>crawling</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>안녕하세요 !!</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
