<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>numpy 모듈을 사용하여 ndarray 데이터 생성하기</title>
    <url>/2020/05/21/python_numpy/</url>
    <content><![CDATA[<p><strong>numpy 모듈을 사용하여 ndarray 데이터 생성하기</strong></p>
<ul>
<li><p>numpy(넘파이) </p>
<ul>
<li>수치해석용 Python 라이브러리</li>
<li>CPython에서만 사용 가능</li>
<li>BLAS/LAPACK 기반</li>
<li>ndarray 다차원 행렬 자료 구조 제공</li>
<li>내부 반복문 사용으로 빠른 행렬 연산 가능</li>
<li>행렬 인덱싱(array indexing) 기능<blockquote>
<p><a href="https://datascienceschool.net/view-notebook/416d733c3a734565b69fd0c8dc959edb/">데이터 사이언스 스쿨</a></p>
</blockquote>
</li>
</ul>
</li>
<li><p>ndarray 클래스</p>
<ul>
<li>다차원 행렬 자료 구조를 지원</li>
<li>벡터화 연산(vectorized operation) 지원</li>
</ul>
</li>
<li><p>Python 리스트</p>
<ul>
<li>여러가지 타입의 원소</li>
<li>linked List 구현</li>
<li>메모리 용량이 크고 속도가 느림</li>
<li>벡터화 연산 불가</li>
</ul>
</li>
<li><p>NumPy ndarray</p>
<ul>
<li>동일 타입의 원소</li>
<li>contiguous memory layout</li>
<li>메모리 최적화, 계산 속도 향상</li>
<li>벡터화 연산 가능</li>
</ul>
</li>
<li><p>행렬의 차원 및 크기는 ndim 속성과 shape 속성으로 알 수 있다. </p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 필요 모듈 호출</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1차원 벡터</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># 2차원 행렬(2행 3열), 리스트안에 리스트로 만듬</span></span><br><span class="line">y = np.array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>]])</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment"># 타입 확인</span></span><br><span class="line">print(type(y))</span><br><span class="line"><span class="comment"># 차원 확인</span></span><br><span class="line">print(x.ndim, y.ndim)</span><br></pre></td></tr></table></figure>
<p><strong>np.arange 함수로 생성하기</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0 ~ 9까지 ndarray 생성</span></span><br><span class="line">np.arange(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 ~ 9까지 ndarray 생성</span></span><br><span class="line">np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 ~ 9까지 2칸씩 띄어서 생성</span></span><br><span class="line">np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5 ~ 100까지 5의 배수 생성</span></span><br><span class="line">np.arange(<span class="number">5</span>, <span class="number">101</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><strong>zeros, ones</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4행 5열의 모든 원소가 1인 ndarray 생성, 튜플을 이용하여 생성</span></span><br><span class="line">np.ones((<span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3차원 tensor 생성</span></span><br><span class="line"><span class="comment"># 3행 4열의 행렬 2개, 대괄호가 3개 생김</span></span><br><span class="line">np.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4차원 생성</span></span><br><span class="line"><span class="comment"># 대괄호가 4개 생김</span></span><br><span class="line">np.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 초기화된 ndarray 생성</span></span><br><span class="line">np.empty((<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 7로만 이루어진 tensor 생성</span></span><br><span class="line">np.full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5행 5열의 단위 행렬 2차원</span></span><br><span class="line"><span class="comment"># 대각선의 모든 값이 1, 나머지 0</span></span><br><span class="line">np.eye(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><strong>np.linspace</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 시작, 끝, 전체 수가 3개가 되도록 나눔</span></span><br><span class="line"><span class="comment"># 원소간의 차이가 동일하게 만듬</span></span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 숫자 사이 간격이 동일하게</span></span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4등분, 전체 갯수 5</span></span><br><span class="line"><span class="comment"># 그래프에서 x축에 균등하게 값을 줄 때 사용</span></span><br><span class="line">np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p><strong>reshape</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 ~ 15까지 벡터 생성</span></span><br><span class="line">x = np.arange(<span class="number">1</span>, <span class="number">16</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1차원의 shape</span></span><br><span class="line">x.shape</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2차원의 행렬로 형태를 바꿈, 3행 5열로 변경</span></span><br><span class="line">x.reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x. reshape(<span class="number">5</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3차원으로 바꿈, 3행 1열이 5개</span></span><br><span class="line">x.reshape(<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 숫자 20개 필요하나 x안에는 15개만 있으므로 대응이 불가능하여 오류 발생</span></span><br><span class="line"><span class="comment"># reshape 하려는 숫자가 원래 존재하는 숫자와 동일한지 확인 필요</span></span><br><span class="line">x.reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p><strong>random 서브 모듈 이용하여 ndarray 생성히기</strong></p>
<ul>
<li>랜덤한 값을 생성</li>
<li>보통 train 전 초반에 무작위 값을 생성</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rand 함수, 2행 3열의 랜덤한 값 생성</span></span><br><span class="line"><span class="comment"># 0과 1 사이의 값이 생성</span></span><br><span class="line">np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1차원 벡터</span></span><br><span class="line">np.random.rand(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3차원 tensor, 4행 2열</span></span><br><span class="line">np.random.rand(<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 정규분포, n: normal distribution(정규분포)</span></span><br><span class="line"><span class="comment"># 정규분포로 샘플링된 랜덤 ndarrya 생성</span></span><br><span class="line"><span class="comment"># 정규분포이므로 음수값도 생성</span></span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p><strong>randint 함수</strong></p>
<ul>
<li>정수에서 샘플링할 때 사용</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 정수에서 샘플링할 때 사용</span></span><br><span class="line"><span class="comment"># 1 ~ 99, 3행 5열 2차원 행렬</span></span><br><span class="line">np.random.randint(<span class="number">1</span>, <span class="number">100</span>, size=(<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p><strong>seed 함수</strong></p>
<ul>
<li>랜덤한 값을 동일하게 다시 생성하고자 할 때 사용</li>
<li>고정된 랜덤 값</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 항상 호출 전 동일한 값을 갖고 싶을 때 사용</span></span><br><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p><strong>choice</strong></p>
<ul>
<li>주어진 1차원 ndarray로부터 랜덤으로 샘플링</li>
<li>정수가 주어진 경우, np.arange(해당숫자)로 간주</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 정수 : 100</span></span><br><span class="line"><span class="comment"># size 샘플링을 3, 4로 가져옴</span></span><br><span class="line">np.random.choice(<span class="number">100</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 중복 허용</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.5</span>, <span class="number">2.6</span>, <span class="number">4.9</span>])</span><br><span class="line">np.random.choice(x, size=(<span class="number">2</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 중복 x</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.5</span>, <span class="number">2.6</span>, <span class="number">4.9</span>])</span><br><span class="line">np.random.choice(x, size=(<span class="number">2</span>, <span class="number">2</span>), replace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 확률분포에 따른 ndarray 생성</span></span><br><span class="line"><span class="comment"># uniform : low에서 high 사이의 값을 가져옴</span></span><br><span class="line"><span class="comment"># normal 등</span></span><br><span class="line">np.random.uniform(<span class="number">1.0</span>, <span class="number">3.0</span>, size=(<span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 정규분포</span></span><br><span class="line">np.random.normal(size=(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 정규분포 : 평균, 분포, 사이즈 </span></span><br><span class="line">np.random.normal(size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 아래와 동일</span></span><br><span class="line">np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>machine_learning CNN</title>
    <url>/2020/05/17/machine_learning_cnn/</url>
    <content><![CDATA[<p><strong>C.N.N</strong></p>
<ul>
<li>Convolutional Neural Network </li>
<li>이미지 공간의 정보를 유지한 상태로 학습이 가능한 모델</li>
</ul>
<p><strong>CNN의 주요 용어 정리</strong></p>
<ul>
<li><h2 id="Convolution-합성곱"><a href="#Convolution-합성곱" class="headerlink" title="Convolution(합성곱)"></a>Convolution(합성곱)</h2></li>
<li>채널(Channel)<ul>
<li>이미지 픽셀 1개 = 하나의 실수(scalar)</li>
<li>컬러사진: 3차원 * 높이 150 * 길이 250 = shape(150<em>250</em>3)</li>
<li>흑백사진: 1차원 * 높이 150 * 길이 250 = shape(150<em>250</em>3)</li>
</ul>
</li>
<li>필터(Filter, kernel)<ul>
<li>1개의 filter = 1개의 feature map</li>
<li>convolution layer에 n개의 filter필터가 적용된다면 출력데이터는 n개의 채널을 갖습니다. </li>
</ul>
</li>
<li>커널(Kernel)</li>
<li>스트라이드(Strid)<ul>
<li>필터가 순회하는 지정된 간격</li>
</ul>
</li>
<li>패딩(Padding)<ul>
<li>Padding을 통해서 Convolution 레이어의 출력 데이터의 사이즈를 조절하는 기능이 외에, 외각을 “0”값으로 둘러싸는 특징으로 부터 인공 신경망이 이미지의 외각을 인식하는 학습 효과도 있습니다.</li>
</ul>
</li>
<li>피처 맵(Feature Map)</li>
<li>액티베이션 맵(Activation Map)</li>
<li>풀링(Pooling) 레이어<ul>
<li>일반적으로 Pooing 크기와 Stride를 같은 크기로 설정하여 모든 원소가 한 번씩 처리 되도록 설정합니다.</li>
<li>CNN에서는 주로 Max Pooling을 사용합니다.</li>
</ul>
</li>
</ul>
<p><strong>2.1 Convolution 레이어 출력 데이터 크기 산정</strong></p>
<ul>
<li>입력 데이터 높이: H</li>
<li>입력 데이터 폭: W</li>
<li>필터 높이: FH</li>
<li>필터 폭: FW</li>
<li>Strid 크기: S</li>
<li>패딩 사이즈: P<br>\begin{align}<br>OutputHeight &amp; = OH = \frac{(H + 2P - FH)}{S} + 1 \<br>OutputWeight &amp; = OW = \frac{(W + 2P - FW)}{S} + 1<br>\end{align}</li>
<li>만약 Pooling 사이즈가 (3, 3)이라면 위 식의 결과는 자연수이고 3의 배수여야 합니다. 이 조건을 만족하도록 Filter의 크기, Stride의 간격, Pooling 크기 및 패딩 크기를 조절해야 합니다.</li>
</ul>
<p><strong>2.2 Pooling 레이어 출력 데이터 크기 산정</strong></p>
<ul>
<li><p>일반적인 Pooling 사이즈는 정사각형입니다.</p>
</li>
<li><p>Pooling 사이즈를 Stride 같은 크기로 만들어서, 모든 요소가 한번씩 Pooling되도록 만듭니다. </p>
</li>
<li><p>입력 데이터의 행 크기와 열 크기는 Pooling 사이즈의 배수(나누어 떨어지는 수)여야 합니다.</p>
</li>
<li><p>결과적으로 Pooling 레이어의 출력 데이터의 크기는 행과 열의 크기를 Pooling 사이즈로 나눈 몫입니다.</p>
</li>
<li><p>Pooling 크기가 (2, 2) 라면 출력 데이터 크기는 입력 데이터의 행과 열 크기를 2로 나눈 몫입니다. pooling 크기가 (3, 3)이라면 입력데이터의 행과 크기를 3으로 나눈 몫이 됩니다.</p>
</li>
<li><p>CNN을 구성하면서 Filter, Stride, Padding을 조절하여 특징 추출(Feature Extraction) 부분의 입력과 출력 크기를 계산하고 맞추는 작업이 중요합니다. </p>
</li>
</ul>
<blockquote>
<p><a href="http://taewan.kim/post/cnn/">자료 출처</a></p>
</blockquote>
<p><strong>케라스 CNN model 중간 저장</strong></p>
<blockquote>
<p><a href="https://teddylee777.github.io/tensorflow/keras-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98-vol-03">자료 출처</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
        <category>machine_learning</category>
        <category>CNN</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>CNN</tag>
        <tag>machine_learning</tag>
      </tags>
  </entry>
  <entry>
    <title>python function</title>
    <url>/2020/05/10/python_function/</url>
    <content><![CDATA[<p><strong>함수</strong></p>
<ul>
<li>반복되는 코드를 묶음으로 효율적인 코드를 작성하도록 해주는 기능</li>
<li>기본 함수</li>
<li>파라미터와 아규먼트</li>
<li>리턴</li>
<li><em>args, *</em>kwargs</li>
<li>docstring</li>
<li>scope</li>
<li>inner function</li>
<li>lambda function</li>
<li>Map, Filter, Reduce</li>
<li>Decorlator</li>
</ul>
<p><strong>1. 기본 함수</strong></p>
<ul>
<li>함수의 선언과 호출<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수선언</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(point)</span>:</span> <span class="comment"># def : 예약어, 함수이름 : grade, 파라미터 : point</span></span><br><span class="line">    <span class="keyword">if</span> point &gt;= <span class="number">90</span>:</span><br><span class="line">        print(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">elif</span> point &gt;= <span class="number">80</span>:</span><br><span class="line">        print(<span class="string">"B"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"C"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수호출</span></span><br><span class="line">grade(<span class="number">88</span>) <span class="comment"># 함수이름(point로 넘겨줄 값을 입력)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>2. 파라미터와 아규먼트</strong></p>
<ul>
<li>파라미터: 함수를 선언할 때 호출하는 부분에서 보내주는 데이터를 받는 변수</li>
<li>아규먼트: 함수를 호출할 때 함수에 보내주는 데이터</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span> <span class="comment"># 파라미터</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 아규먼트</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2=<span class="number">10</span>)</span>:</span> <span class="comment"># 디폴트 파라미터</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 아규먼트</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2=<span class="number">10</span>, num3=<span class="number">20</span>)</span>:</span> <span class="comment"># 디폴트 파라미터</span></span><br><span class="line">    print(num1 + num2 - num3)</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 아규먼트</span></span><br></pre></td></tr></table></figure>
<ul>
<li>키워드 아규먼트 : 특정 파라미터를 지정해서 넣고 싶을 때 사용<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plus(<span class="number">3</span>, num3=<span class="number">100</span>) <span class="comment"># 키워드 아규먼트</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>3. 리턴</strong></p>
<ul>
<li>함수를 실행한 결과를 저장하고 싶을 때 사용합니다. </li>
<li>함수에서 return 코드가 실행되면 무조건 함수가 종료됩니다. </li>
<li>return<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line"></span><br><span class="line">result = plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">result = plus(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(point)</span>:</span> <span class="comment"># def : 예약어, 함수이름 : grade, 파라미터 : point</span></span><br><span class="line">    <span class="keyword">if</span> point &gt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">elif</span> point &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line">grade(<span class="number">90</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passornot</span><span class="params">(result)</span>:</span></span><br><span class="line">    pass_ = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> result == <span class="string">"A"</span> <span class="keyword">or</span> result == <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PASS"</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FAIL"</span></span><br><span class="line">passornot(<span class="string">"A"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(point)</span>:</span> <span class="comment"># def : 예약어, 함수이름 : grade, 파라미터 : point</span></span><br><span class="line">    <span class="keyword">if</span> point &gt;= <span class="number">90</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">elif</span> point &gt;= <span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passornot</span><span class="params">(result)</span>:</span></span><br><span class="line">    pass_ = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> result == <span class="string">"A"</span> <span class="keyword">or</span> result == <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PASS"</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FAIL"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수 호출하기</span></span><br><span class="line">passornot(grade(<span class="number">98</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수에서 return 코드가 실행되면 무조건 함수가 종료됩니다. </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>4. <em>args, *</em>kwargs</strong></p>
<ul>
<li>함수를 호출할 때 아규먼트와 키워드 아규먼트의 갯수를 특정지을 수 없을 때 사용<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 갯수에 상관없이 모든 아규먼트를 더해주는  함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(type(args), args)</span><br><span class="line">    <span class="keyword">return</span> sum(args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 호출</span></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 키워드가 있는 아규먼트</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(type(args), args)</span><br><span class="line">    print(type(kwargs), kwargs)</span><br><span class="line">    <span class="keyword">return</span> sum(args) + sum(kwargs.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수 실행</span></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, num1=<span class="number">6</span>, num2=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2, num3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(*data) <span class="comment"># func(1, 2, 3)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2=<span class="number">10</span>, num3=<span class="number">20</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(num1) + num2 + num3</span><br><span class="line">    </span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(data) <span class="comment"># func([1, 2, 3])</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2, num3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(*data) <span class="comment"># func(1, 2, 3)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num1, num2, num3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"num2"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"num3"</span>: <span class="number">200</span>,</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">1</span>, **data) <span class="comment"># func(1, num2=100, num3=200)</span></span><br></pre></td></tr></table></figure>
<h1 id="문장을-입력받아서-문법에-맞도록-결과를-출력하는-코드를-작성"><a href="#문장을-입력받아서-문법에-맞도록-결과를-출력하는-코드를-작성" class="headerlink" title="문장을 입력받아서 문법에 맞도록 결과를 출력하는 코드를 작성"></a>문장을 입력받아서 문법에 맞도록 결과를 출력하는 코드를 작성</h1><h1 id="마지막-문자는-이-있을수도-있고-없을수도-있습니다"><a href="#마지막-문자는-이-있을수도-있고-없을수도-있습니다" class="headerlink" title="마지막 문자는 . 이 있을수도 있고 없을수도 있습니다."></a>마지막 문자는 . 이 있을수도 있고 없을수도 있습니다.</h1><h1 id="논리적인-문제해결-순서-gt-코드로-변경"><a href="#논리적인-문제해결-순서-gt-코드로-변경" class="headerlink" title="논리적인 문제해결 순서 -&gt; 코드로 변경"></a>논리적인 문제해결 순서 -&gt; 코드로 변경</h1><h1 id="str-upper-str-lower-offset-index-str-add-문자열-덧셈"><a href="#str-upper-str-lower-offset-index-str-add-문자열-덧셈" class="headerlink" title="str.upper(), str.lower(), offset index [], str.add(문자열 덧셈)"></a>str.upper(), str.lower(), offset index [], str.<strong>add</strong>(문자열 덧셈)</h1><h1 id="python-IS-the-best-Language"><a href="#python-IS-the-best-Language" class="headerlink" title="python IS the best Language"></a>python IS the best Language</h1><h1 id="python-IS-the-best-Language-1"><a href="#python-IS-the-best-Language-1" class="headerlink" title="python IS the best Language."></a>python IS the best Language.</h1><h1 id="Python-is-the-best-lagnuage"><a href="#Python-is-the-best-lagnuage" class="headerlink" title="Python is the best lagnuage."></a>Python is the best lagnuage.</h1></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 문자열 입력받기</span></span><br><span class="line">sentence = input(<span class="string">'input sentence : '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 모두 소문자로 변경</span></span><br><span class="line">result = sentence.lower() <span class="comment"># lower함수는 리턴이 있는 함수이므로 result에 저장</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 가장 앞글자를 대문자로 변경</span></span><br><span class="line">result = result[<span class="number">0</span>].upper() + result[<span class="number">1</span>:] <span class="comment"># 가장 앞글자 + 나머지 글자</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 마지막 문자가 .인지 확인해서 .이 아니면 .을 추가</span></span><br><span class="line"><span class="keyword">if</span> result[<span class="number">-1</span>] != <span class="string">"."</span>:</span><br><span class="line">    result += <span class="string">"."</span></span><br><span class="line"></span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6자리의 로또번호를 생성하는 코드를 작성하세요. </span></span><br><span class="line"><span class="comment"># 6자리의 번호는 중복이 없어야 합니다. </span></span><br><span class="line"><span class="comment"># 문자열, 숫자, 리스트</span></span><br><span class="line"><span class="comment"># while, not in, in, list.append(), break, len(), list.sort()</span></span><br><span class="line"><span class="comment"># 문제가 조금 복잡하면 간단한 기능부터 구현하고 업데이트를 하는 방법으로 해결</span></span><br><span class="line"><span class="comment"># 랜덤한 숫자 6개 출력 -&gt; 숫자가 중복되지 않는 코드를 추가</span></span><br><span class="line"></span><br><span class="line">ilotto = []</span><br><span class="line"><span class="comment"># 랜덤한 숫자 6개를 while문을 사용해서 작성</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num = random.randint(<span class="number">1</span>, <span class="number">45</span>)</span><br><span class="line">    <span class="comment"># 숫자를 추가할 때 lotto 리스트에 중복되는 숫자가 없으면 추가</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> lotto:   </span><br><span class="line">        lotto.append(num)</span><br><span class="line">        <span class="keyword">if</span> len(lotto) &gt;= <span class="number">6</span>:</span><br><span class="line">            lotto.sort() </span><br><span class="line">        </span><br><span class="line">            <span class="keyword">break</span>     </span><br><span class="line">lotto</span><br></pre></td></tr></table></figure>

<p><strong>5. docstring</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 한줄로 작성</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="string">"echo print msg"</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    echo func return its input agument</span></span><br><span class="line"><span class="string">    The operation is:</span></span><br><span class="line"><span class="string">        1. print msg parameter</span></span><br><span class="line"><span class="string">        2. return msg parameter</span></span><br><span class="line"><span class="string">    param : mag : str</span></span><br><span class="line"><span class="string">    return : str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(msg)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docstring 확인 방법</span></span><br><span class="line">echo?</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">echo??</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">help(echo)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(echo.__doc__)</span><br></pre></td></tr></table></figure>

<p><strong>6. Scope 범위</strong></p>
<ul>
<li>함수 안에서 선언되는 변수와 함수 밖에서 선언되는 변수의 범위가 다릅니다. </li>
<li>global(전역), local(지역)</li>
<li>전역영역에 선언되어있으면 함수가 실행될 때 전역영역의 변수를 가져다 사용합니다. </li>
<li>지역영역에 선언되어있으면 함수가 실행될 때 지역영역의 변수를 가져다 사용합니다. </li>
<li>메모리를 덜 잡아먹기 때문에 로컬영역에서 선언할 수 있으면 로컬에서 선언하는 것이 좋습니다. </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># global</span></span><br><span class="line">gv = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">    print(gv)</span><br><span class="line"></span><br><span class="line">echo()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line">gv = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">    gv = <span class="number">100</span></span><br><span class="line">    print(gv)</span><br><span class="line"></span><br><span class="line">echo() <span class="comment"># 100</span></span><br><span class="line">gv <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gv = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gv</span><br><span class="line">    gv=<span class="number">100</span></span><br><span class="line">    print(gv)</span><br><span class="line"></span><br><span class="line">echo()</span><br><span class="line">gv <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<p><strong>7. inner function</strong></p>
<ul>
<li>함수가 지역영역에 선언, 함수 안에 함수가 선언<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(c, d)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> c + d</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner(a, b)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outer(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inner(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 오류발생 : 전역영역에서 지역영역의 함수를 사용하려 했기 때문입니다. 지역영역에 선언된 함수이므로 지역영역에서만 사용할 수 있습니다.</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>inner함수 = 익명함수라고 부릅니다. 전역영역에서 가져다 사용할 수 없는 함수이기 때문입니다.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 지역영역의 함수 사용하기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(c, d)</span>:</span></span><br><span class="line">        print(a, b)</span><br><span class="line">        <span class="keyword">return</span> c + d</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment"># 리턴을 변경시켜주고</span></span><br><span class="line"></span><br><span class="line">outer(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>) <span class="comment"># inner(3, 4)</span></span><br></pre></td></tr></table></figure>

<p><strong>8. callback function</strong></p>
<ul>
<li>함수를 아규먼트, 파라미터로 설정해서 사용하는 것을 의미합니다. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(func, a, b)</span>:</span></span><br><span class="line">    <span class="comment"># code</span></span><br><span class="line">    a **= <span class="number">2</span></span><br><span class="line">    b **= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> func(a, b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 덧셈</span></span><br><span class="line">calc(plus, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 뺄셈</span></span><br><span class="line">calc(minus, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>9. lambda function</strong></p>
<ul>
<li>파라미터를 간단한 계산으로 리턴되는 함수 : 삼항연산<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span> <span class="comment"># 파라미터</span></span><br><span class="line">    <span class="keyword">return</span> a + b <span class="comment"># 리턴</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda 파라미터: 리턴</span></span><br><span class="line">plus2 = <span class="keyword">lambda</span> a, b: a + b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plus2(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">calc(<span class="keyword">lambda</span> a, b: a + b, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>10. Map, Filter, Reduce</strong></p>
<ul>
<li>map: 순서가 있는 데이터 집합에서 모든 값에 함수를 적용시킨 결과를 출력</li>
<li>아규먼트로 func(함수), *iterable을 받음</li>
<li>iterable 한 데이터에 함수를 각 요소마다 모두 적용시킨 결과 데이터를 만들고 싶을 때 사용합니다. </li>
<li>map(func, ls1, ls2) : ls(iterable한 데이터)가 여러개 올 수 있습니다. </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd_even</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'odd'</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> <span class="string">'even'</span></span><br><span class="line"></span><br><span class="line">odd_even(<span class="number">3</span>), odd_even(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(map(odd_even, ls)) <span class="comment"># 함수, 리스트를 넣음</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input 함수로 구분자는 " "으로 여러개의 숫자를 입력 받습니다. </span></span><br><span class="line"><span class="comment"># str.split(" ")리스트로 만들고</span></span><br><span class="line"><span class="comment"># 만들어진 리스트의 값들을 int로 형변환</span></span><br><span class="line">datas = input(<span class="string">"insert numbers : "</span>) <span class="comment"># 10 20 30 40 50 40 30 20 10</span></span><br><span class="line">result = datas.split(<span class="string">" "</span>)</span><br><span class="line">result</span><br><span class="line">``` </span><br><span class="line">```python</span><br><span class="line">result = list(map(int, result))</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<p><strong>10-2. Filter</strong></p>
<ul>
<li>Filter : 리스트 데이터에서 특정 조건에 맞는 value만 남기는 함수</li>
<li>filter(func, ls) : ls(iterable한 데이터)가 1개밖에 못옵니다. </li>
<li>True, False로 만듭니다. </li>
<li>func is True인 것만 리턴합니다. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = range(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 홀수만 출력</span></span><br><span class="line">list(filter(<span class="keyword">lambda</span> data: <span class="literal">True</span> <span class="keyword">if</span> data % <span class="number">2</span> <span class="keyword">else</span> <span class="literal">False</span>, ls))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>10-3. Reduce</strong></p>
<ul>
<li>리스트 데이터를 처음부터 순서대로 특정 함수를 실행하여 결과를 누적시켜 주는 함수<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce <span class="comment"># import 해야 사용 가능합니다. </span></span><br><span class="line"></span><br><span class="line">ls = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># ((((1+2)+3)+4)+5)</span></span><br><span class="line"><span class="comment"># 파라미터가 반드시 2개여야 함</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x + y, ls)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>10. Decorlator</strong></p>
<ul>
<li>함수에서 코드를 바꾸지 않고 기능을 추가하거나 수정하고 싶을 때 사용하는 문법<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    code_1</span><br><span class="line">    code_2</span><br><span class="line">    code_3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    code_1</span><br><span class="line">    code_4</span><br><span class="line">    code_3</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>데코레이터의 사용</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(func)</span>:</span> <span class="comment"># 2. func으로 def a()이 들어옴 </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># inner func </span></span><br><span class="line">        code_1 <span class="comment"># 4. 코드가 실행됨</span></span><br><span class="line">        result = func(*args, **kwargs) <span class="comment"># 5. 코드가 실행됨</span></span><br><span class="line">        code_3 <span class="comment"># 6. 코드가 실행됨</span></span><br><span class="line">        <span class="keyword">return</span> result <span class="comment"># 7. 반환함</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper <span class="comment"># 8. 반환함</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@c # 1. def c라는 함수가 실행이 됨, code_1, code_3 기능이 적용됨, code_1, 3, 2가 실행됨</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span> <span class="comment"># def a라는 함수가 wrapper 함수로 변경됨</span></span><br><span class="line">    code_2 <span class="comment"># 3. code_2 가 실행됨</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@c # code_1, code_3 기능이 실행됨, 결과적으로 code_1, 3, 4가 실행됨</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span> <span class="comment"># b라는 함수가 wrapper 함수로 변경됨</span></span><br><span class="line">    code_4</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>)                                   <span class="comment"># code_1</span></span><br><span class="line">    result = a + b                                  <span class="comment"># code_2</span></span><br><span class="line">    print(<span class="string">"result : &#123;&#125;"</span>.format(result)) <span class="comment"># code_3</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>)                                   <span class="comment"># code_1</span></span><br><span class="line">    result = a - b                                   <span class="comment"># code_4</span></span><br><span class="line">    print(<span class="string">"result : &#123;&#125;"</span>.format(result)) <span class="comment"># code_3</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># c : code_1, cod_3을 묶어주는 데코레이션 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disp</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"start"</span>)                                   <span class="comment"># code_1</span></span><br><span class="line">        result = func(*args, **kwargs)   <span class="comment"># code_2, code_4</span></span><br><span class="line">        print(<span class="string">"result : &#123;&#125;"</span>.format(result)) <span class="comment"># code_3</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@disp</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    result = a + b                          <span class="comment"># code_2</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수의 실행 시간을 출력하는 데코레이터 함수를 작성하세요. </span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start_time = time.time()         <span class="comment"># code 1</span></span><br><span class="line">        result = func(*args, **kwargs)   <span class="comment"># code 2, code 4</span></span><br><span class="line">        end_time = time.time()           <span class="comment"># code 3</span></span><br><span class="line">        print(<span class="string">"running time : &#123;&#125;"</span>.format(end_time - start_time)) <span class="comment"># code 3</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    data = range(num1, num2+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> sum(data)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(num1, num2+<span class="number">1</span>):</span><br><span class="line">        result += num</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test1(<span class="number">1</span>, <span class="number">100000</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test2(<span class="number">1</span>, <span class="number">100000</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 패스워드를 입력받아야 함수가 실행되도록하는 데코레이터 작성</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_password</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        pw = <span class="string">'dss12'</span></span><br><span class="line"><span class="comment">#         datas = [</span></span><br><span class="line"><span class="comment">#             &#123;'id': 'test', 'pw': '1234'&#125;,</span></span><br><span class="line"><span class="comment">#             &#123;'id': 'test2', 'pw': '12345'&#125;</span></span><br><span class="line"><span class="comment">#         ]</span></span><br><span class="line">        <span class="comment"># check password</span></span><br><span class="line">        input_pw = input(<span class="string">'insert pw : '</span>)</span><br><span class="line">        <span class="keyword">if</span> input_pw == pw:</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="string">'not allow!'</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@check_password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@check_password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lotto_func</span><span class="params">()</span>:</span></span><br><span class="line">    lotto = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        number = random.randint(<span class="number">1</span>, <span class="number">45</span>)</span><br><span class="line">        <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> lotto:</span><br><span class="line">            lotto.append(number)</span><br><span class="line">        <span class="keyword">if</span> len(lotto) &gt;= <span class="number">6</span>:</span><br><span class="line">            lotto.sort()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> lotto</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lotto_func()</span><br></pre></td></tr></table></figure>

<p><strong>join()</strong></p>
<ul>
<li>리스트로 되어있는 데이터를 특정 문자열을 구분자로 사용해서 하나의 문장으로 만들어주는 함수<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">'python'</span>, <span class="string">'is'</span>, <span class="string">'good'</span>]</span><br><span class="line"><span class="string">" "</span>.join(ls)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pandas dataframe</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([ <span class="comment"># DataFrame : class</span></span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"jin"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"andy"</span>, <span class="string">"age"</span>: <span class="number">21</span>&#125;,</span><br><span class="line">])</span><br><span class="line">df</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>id, pw 카운트 함수, 1. zip함수를 이용하는 방법</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">print(list(range(len(ls))))</span><br><span class="line">print(list(zip(range(len(ls)), ls)))</span><br><span class="line"><span class="keyword">for</span> idx, data <span class="keyword">in</span> list(zip(range(len(ls)), ls)):</span><br><span class="line">    print(idx, data)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_datas = [</span><br><span class="line">    &#123;<span class="string">'user'</span>: <span class="string">'test'</span>, <span class="string">'pw'</span>: <span class="string">'1234'</span>, <span class="string">'count'</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'user'</span>: <span class="string">'python'</span>, <span class="string">'pw'</span>: <span class="string">'5678'</span>, <span class="string">'count'</span>: <span class="number">0</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># user_data를 입력받아서 아이디와 패스워드를 체크하는 데코레이터 함수를 코드로 작성하세요. </span></span><br><span class="line"><span class="comment"># 로그인 될 때마다 count를 1씩 증가</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">need_login</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># inner function 만듬</span></span><br><span class="line">        <span class="comment"># 아아디 패스워드 입력</span></span><br><span class="line">        user, pw = tuple(input(<span class="string">"insert user pw : "</span>).split(<span class="string">' '</span>)) <span class="comment"># user와 pw 나눈 후 tuple로 변환</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 존재하는 아이디와 패스워드 확인</span></span><br><span class="line">        <span class="keyword">for</span> idx, user_data <span class="keyword">in</span> zip(range(len(user_datas)), user_datas): <span class="comment"># 카운트하기 위해 몇 번째 데이터인지 확인필요       </span></span><br><span class="line">            <span class="keyword">if</span> (user_data[<span class="string">'user'</span>] == user) <span class="keyword">and</span> (user_data[<span class="string">'pw'</span>] == pw):</span><br><span class="line">                user_datas[idx][<span class="string">'count'</span>] += <span class="number">1</span> <span class="comment"># 유저 데이터의 인덱스에서 카운트를 1씩 증가 시킴          </span></span><br><span class="line">                <span class="comment"># 함수 실행</span></span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs) <span class="comment"># wrapper 함수 종료, 결과값 출력          </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"wrong login data!"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@need_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_datas</span><br></pre></td></tr></table></figure>
<p><strong>2. enumerate함수를 이용하는 방법</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(enumerate(user_datas))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># user_data를 입력받아서 아이디와 패스워드를 체크하는 데코레이터 함수를 코드로 작성하세요. </span><br><span class="line"># 로그인 될 때마다 count를 1씩 증가</span><br><span class="line">def need_login(func):</span><br><span class="line">    def wrapper(*args, **kwargs): # inner function 만듬</span><br><span class="line">        # 아아디 패스워드 입력</span><br><span class="line">        user, pw &#x3D; tuple(input(&quot;insert user pw : &quot;).split(&#39; &#39;)) # user와 pw 나눈 후 tuple로 변환</span><br><span class="line">        </span><br><span class="line">        # 존재하는 아이디와 패스워드 확인</span><br><span class="line">        for idx, user_data in enumerate(user_datas): # 카운트하기 위해 몇 번째 데이터인지 확인필요       </span><br><span class="line">            if (user_data[&#39;user&#39;] &#x3D;&#x3D; user) and (user_data[&#39;pw&#39;] &#x3D;&#x3D; pw):</span><br><span class="line">                user_datas[idx][&#39;count&#39;] +&#x3D; 1 # 유저 데이터의 인덱스에서 카운트를 1씩 증가 시킴          </span><br><span class="line">                # 함수 실행</span><br><span class="line">                return func(*args, **kwargs) # wrapper 함수 종료, 결과값 출력          </span><br><span class="line">        return &quot;wrong login data!&quot;</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@need_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">plus(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_datas</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
        <category>function</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>python 조건문 (if, while, for)</title>
    <url>/2020/05/10/python_condition_loop/</url>
    <content><![CDATA[<p><strong>조건문</strong></p>
<ul>
<li>특정 조건에 따라서 코드를 실행하고자 할 때 사용</li>
<li>if, else, elif<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if 문이 ture일 때 구문 안의 결과가 실행됨</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>: </span><br><span class="line">    print(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done"</span>)</span><br><span class="line"><span class="comment"># python done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if 문이 false일 때 구문 이외의 결과가 실행됨</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">False</span>: </span><br><span class="line">    print(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done"</span>)</span><br><span class="line"><span class="comment"># done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 조건부문 : bool 데이터 타입 이외의 데이터 타입이 오면 bool으로 형변환 되어 판단</span></span><br><span class="line"><span class="comment"># int : 0을 제외한 나머지 값은 True</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num: </span><br><span class="line">    print(<span class="string">"python_1"</span>)</span><br><span class="line"><span class="comment"># 출력값 없음</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> num: </span><br><span class="line">    print(<span class="string">"python_2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python_2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'홀수'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'짝수'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># float : 0.0을 제외한 나머지 실수는 True</span></span><br><span class="line"><span class="comment"># str : ""을 제외한 나머지 문자열은 True</span></span><br><span class="line"><span class="comment"># list, tuple, dict : [], (), &#123;&#125;를 제외한 나머지는 True</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 지갑에 돈이 10000원 이상 있으면 택시를 탑니다. </span></span><br><span class="line"><span class="comment"># 2000원 이상이 있으면 버스를 탑니다. </span></span><br><span class="line"><span class="comment"># 그렇지 않으면 걸어서 집에 갑니다. </span></span><br><span class="line">money = <span class="number">5000</span></span><br><span class="line"><span class="keyword">if</span> money &gt;= <span class="number">10000</span>:</span><br><span class="line">    print(<span class="string">'택시를 타고 집에 갑니다.'</span>)</span><br><span class="line"><span class="keyword">elif</span> money &gt;= <span class="number">5000</span>:</span><br><span class="line">    print(<span class="string">'광역버스를 타고 집에 갑니다.'</span>)</span><br><span class="line"><span class="keyword">elif</span> money &gt;= <span class="number">2000</span>:</span><br><span class="line">    print(<span class="string">'일반버스를 타고 집에 갑니다.'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"걸어서 집에 갑니다."</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 계좌에 10000원이 들어있습니다. </span></span><br><span class="line"><span class="comment"># 인출 금액을 입력 받습니다. </span></span><br><span class="line"><span class="comment"># 인출 금액이 계좌에 있는 금액보다 크면 "인출이 불가능합니다." 출력</span></span><br><span class="line"><span class="comment"># 인출 금액이 계좌에 있는 금액보다 작으면 "인출 되었습니다." 출력</span></span><br><span class="line"><span class="comment"># 마지막에 현재 계좌의 잔액을 출력</span></span><br><span class="line">account = <span class="number">10000</span></span><br><span class="line">draw_money = int(input(<span class="string">"인출 금액을 입력하세요. : "</span>))</span><br><span class="line"><span class="keyword">if</span> account &gt;= draw_money:</span><br><span class="line">    account -= draw_money</span><br><span class="line">    print(str(draw_money) + <span class="string">"원이 인출되었습니다."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"인출이 불가능합니다. "</span> + str(draw_money - account) + <span class="string">"원의 잔액이 부족합니다."</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"현재 잔액은 "</span> + str(account) + <span class="string">"원 입니다."</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>삼항연산자</strong></p>
<ul>
<li>간단한 if, else 구문을 한줄의 코드로 표현할 수 있는 방법</li>
<li>(True) if (condition) else (False)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data 변수에 0이면 "zero"출력, 아니면 "not zero"출력</span></span><br><span class="line">data = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">    print(<span class="string">"not zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"zero"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="number">1</span></span><br><span class="line"><span class="string">"not zero"</span> <span class="keyword">if</span> data <span class="keyword">else</span> <span class="string">"zero"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>반복문</strong></p>
<ul>
<li>반복되는 코드를 실행할 때 사용</li>
<li>while, for, break, continue</li>
<li>list comprehention<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while</span></span><br><span class="line">data = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> data: <span class="comment"># 조건이 False가 될 때까지 구문의 코드를 실행</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 반복되는 코드</span></span><br><span class="line">    print(data)</span><br><span class="line">    data -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="학생이-국어-80점-영어-90점-수학-100점-while-문을-이용해서-총점과-평균을-출력"><a href="#학생이-국어-80점-영어-90점-수학-100점-while-문을-이용해서-총점과-평균을-출력" class="headerlink" title="학생이 국어: 80점, 영어: 90점, 수학: 100점 while 문을 이용해서 총점과 평균을 출력"></a>학생이 국어: 80점, 영어: 90점, 수학: 100점 while 문을 이용해서 총점과 평균을 출력</h1><h1 id="학생의-점수는-list-dict-표현"><a href="#학생의-점수는-list-dict-표현" class="headerlink" title="학생의 점수는 list, dict 표현"></a>학생의 점수는 list, dict 표현</h1><h1 id="len-dict-values-list-pop"><a href="#len-dict-values-list-pop" class="headerlink" title="len(), dict.values(), list.pop()"></a>len(), dict.values(), list.pop()</h1></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line">subject = [<span class="string">"korean"</span>, <span class="string">"english"</span>, <span class="string">"math"</span>]</span><br><span class="line">score = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">total, avg = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    total = sum(score)</span><br><span class="line">    avg= total / len(score)</span><br><span class="line">    print(<span class="string">'3과목 총점은 '</span> + str(total) + <span class="string">'점 입니다.'</span> )</span><br><span class="line">    print(<span class="string">'3과목 평균 점수는 &#123;&#125;점 입니다. '</span>.format(avg))</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line">total, avg = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    total = sum(points_dict.values())</span><br><span class="line">    avg = total / len(subject)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"3과목 총점 : "</span>, total)</span><br><span class="line">    print(<span class="string">"3과목 평균 : "</span>, avg)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">subjects_ls = [<span class="string">"korean"</span>, <span class="string">"english"</span>, <span class="string">"math"</span>]</span><br><span class="line">points_ls = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line">datas = points_ls.copy() <span class="comment"># 깊은 복사 : 원본 데이터를 보존</span></span><br><span class="line"></span><br><span class="line">total, avg = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> datas:</span><br><span class="line">    total += datas.pop()</span><br><span class="line">avg = total / len(points_ls)</span><br><span class="line">total, avg</span><br></pre></td></tr></table></figure>
<p><strong>무한루프</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> result:</span><br><span class="line">    result += <span class="number">1</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<ul>
<li>break : 반복문을 중단 시킬 때 사용되는 예약어<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> result:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> result &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    result += <span class="number">1</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>for</strong></p>
<ul>
<li>iterable한 데이터를 하나씩 꺼내서 value에 대입시킨 후 코드를 iterable변수의 값 갯수만큼 실행<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;iterables&gt;:</span><br><span class="line">    &lt;code&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> ls:</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># continue: 조건부분으로 올라가서 콜드가 실행</span></span><br><span class="line">ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">if</span> data % <span class="number">2</span>: <span class="comment"># data가 홀수가 되면 continue를 실행하여 다시 포문으로 돌아감</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># data가 짝수이면 print를 실행</span></span><br><span class="line">    print(data, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>for를 이용해서 코드를 100번 실행</strong></p>
<ul>
<li>range 함수<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list(range(100))</span><br><span class="line">result &#x3D; 0</span><br><span class="line">for data in range(100):</span><br><span class="line">    result +&#x3D; data</span><br><span class="line">result</span><br></pre></td></tr></table></figure></li>
<li>offset index 개념과 비슷하게 사용<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(range(<span class="number">5</span>)), list(range(<span class="number">5</span>, <span class="number">10</span>)), list(range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0~10 까지 짝수를 더한 총합</span></span><br><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    result += number</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> points_dict:</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>items 함수 사용</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict 형태</span></span><br><span class="line">points_dict = &#123;<span class="string">"korean"</span>: <span class="number">80</span>, <span class="string">"english"</span>: <span class="number">90</span>, <span class="string">"math"</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">for</span> subject, point <span class="keyword">in</span> points_dict.items():</span><br><span class="line">    print(subject, point)</span><br></pre></td></tr></table></figure>
<p><strong>zip 함수 사용</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 형태</span></span><br><span class="line"><span class="comment"># for 문에서 iterable 데이터가 tuple로 나오면 여러개의 변수로 받을 수 있습니다. </span></span><br><span class="line">subjects_ls = [<span class="string">"korean"</span>, <span class="string">"english"</span>, <span class="string">"math"</span>]</span><br><span class="line">points_ls = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line"><span class="keyword">for</span> subject, point <span class="keyword">in</span> zip(subjects_ls, points_ls):</span><br><span class="line">    print(subject, point)</span><br></pre></td></tr></table></figure>
<p><strong>구구단 가로 출력</strong></p>
<ul>
<li>2<em>1=2       3</em>1=3     …   9*1=9<br> …</li>
<li>2<em>9=18    3</em>9=27   …   9*9=81<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>): <span class="comment"># 1, 2, 3, ... 9를 만들어 줌</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>): <span class="comment"># 2단, 3단, ... 9단을 만들어줌</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;'</span>.format(j, i, i*j), end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>List Comprehention</strong></p>
<ul>
<li>리스트 데이터를 만들어주는 방법</li>
<li>for문 보다 빠르게 동작합니다. </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 각각 값에 제곱한 결과 출력</span></span><br><span class="line">ls = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> ls:</span><br><span class="line">    result.append(data ** <span class="number">2</span>)</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = [data**<span class="number">2</span> <span class="keyword">for</span> data <span class="keyword">in</span> ls] <span class="comment"># [연산 for 각각의 데이터 in 데이터의 집합]</span></span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 리스트 컴프리헨션을 써서 홀수와 짝수를 리스트로 출력해주는 코드</span></span><br><span class="line"><span class="comment"># 삼항연산자 사용</span></span><br><span class="line">ls = range(<span class="number">0</span>, <span class="number">11</span>)</span><br><span class="line">result = [<span class="string">"홀수"</span> <span class="keyword">if</span> data % <span class="number">2</span> <span class="keyword">else</span> <span class="string">"짝수"</span> <span class="keyword">for</span> data <span class="keyword">in</span> ls]</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<p><strong>리스트 컴프리헨션 조건문</strong></p>
<ul>
<li>0 ~ 9까지에서 홀수만 출력하기<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = range(<span class="number">10</span>)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> ls <span class="keyword">if</span> i%<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dir(ls)에서 "__" 없는 함수만 출력하기</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(ls)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dir(ls) <span class="keyword">if</span> i[:<span class="number">2</span>] != <span class="string">'__'</span>] <span class="comment"># 앞에 2개가 __ 인 것을 제외</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 앞글자가 c인 것만 가져오기</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(ls)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dir(ls) <span class="keyword">if</span> i[:<span class="number">2</span>] != <span class="string">'__'</span> <span class="keyword">if</span> i[:<span class="number">1</span>] == <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(ls)</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dir(ls) <span class="keyword">if</span> i[:<span class="number">2</span>] != <span class="string">'__'</span> <span class="keyword">and</span> i[<span class="number">0</span>] == <span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>for문과 list comprehention 성능 비교</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line">    ls.append(ls)</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = [num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>)]</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3의 배수만 찾기 소요시간 비교</span></span><br><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>: </span><br><span class="line">        ls.append(num)</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit <span class="comment"># magic command : 셀 안에서 실행되는 시간 측정</span></span><br><span class="line">ls = [num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>) <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">len(ls)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>condition</category>
        <category>loop</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>codition</tag>
        <tag>loop</tag>
      </tags>
  </entry>
  <entry>
    <title>basic</title>
    <url>/2020/05/09/python_basic_syntax/</url>
    <content><![CDATA[<p><strong>파이썬 기본 문법</strong></p>
<ul>
<li>변수 선언, 식별자, 자료형, 형변환, 연산자</li>
</ul>
<ol>
<li><p>주석(comment)과 출력(print)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 주석 : 앞에 #을 붙이면 코드로 실행이 안됩니다. </span></span><br><span class="line"><span class="comment"># 코드에 대한 설명이나 코드를 실행시키고 싶지 않을 때 사용</span></span><br><span class="line"><span class="comment"># 단축키 : ctrl(cmd) + /</span></span><br><span class="line"><span class="comment"># 블럭설정 : shift + 방향키</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 출력 : print 함수</span></span><br><span class="line"><span class="comment"># 코드 중간에 변수에 들어있는 값을 확인하고 싶을 때 사용</span></span><br><span class="line"><span class="comment"># 1, 2, 3을 출력하는 코드, 아래를 실행시키면 1, 3이 출력 됩니다. </span></span><br><span class="line">print(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(2)</span></span><br><span class="line">print(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print 함수의 옵션</span></span><br><span class="line"><span class="comment"># docstring : 함수에 대한 설명 : 단축키(shift + tab)</span></span><br><span class="line">print(<span class="number">1</span>, <span class="number">2</span>, sep=<span class="string">"-"</span>, end=<span class="string">"\t"</span>)</span><br><span class="line">print(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 자동완성 : tab</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>변수 선언</p>
</li>
</ol>
<ul>
<li>RAM 저장공간에 값을 할당하는 행위<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 하나씩 선언</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="comment"># 한줄로 여러개의 변수를 선언</span></span><br><span class="line">d, e = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="comment"># 5라는 값이 f와 g에 선언</span></span><br><span class="line">f = g = <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>식별자</li>
</ol>
<ul>
<li>변수, 함수, 클래스, 모듈 등의 이름을 식별자라고 합니다. </li>
<li>식별자 규칙<ul>
<li>소문자, 대문자, 숫자, 언더스코어(_)를 사용합니다. </li>
<li>가장 앞에 숫자 사용 불가</li>
<li>예약어의 사용 불가 : def, class, try, except, 등</li>
<li>컨벤션<pre><code>- snake case : fast_campus : 변수, 함수
- camel case : FastCampus, fastCampus : 클래스</code></pre></li>
</ul>
</li>
</ul>
<ol start="4">
<li>데이터 타입</li>
</ol>
<ul>
<li>RAM 저장공간을 효율적으로 사용하기 위해서 저장공간의 타입을 설정</li>
<li>동적타이핑(인터프리터 방식에서 주로 사용함)<pre><code>- 변수 선언시 저장되는 값에 따라서 자동으로 데이터 타입이 설정</code></pre></li>
<li>기본 데이터 타입 : int, float, bool, str</li>
<li>컬렉션 데이터 타입 : list, tuple, dict</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="comment"># int a = 1</span></span><br><span class="line">b = <span class="string">"python"</span></span><br><span class="line"><span class="comment"># int, str</span></span><br><span class="line">type(a), type(b)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 기본 데이터 타입 : int, float, bool, str</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1.2</span></span><br><span class="line">c = <span class="literal">True</span> <span class="comment"># False</span></span><br><span class="line">d = <span class="string">"data"</span></span><br><span class="line">type(a), type(b), type(c), type(d)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 데이터 타입의 함수 : 문자열</span></span><br><span class="line">d = <span class="string">"data"</span></span><br><span class="line"><span class="comment"># upper : 대문자로 변환</span></span><br><span class="line">d.upper()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="string">' THAt Car '</span></span><br><span class="line"><span class="comment"># lower : 소문자로 변환</span></span><br><span class="line">f.lower()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strip : 공백 제거</span></span><br><span class="line">f.strip()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace : 모든 공백제거</span></span><br><span class="line">f.replace(<span class="string">" "</span>, <span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace : 특정 문자열 치환</span></span><br><span class="line">f.replace(<span class="string">"THAt"</span>, <span class="string">"THIS"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dir : 함수 확인</span></span><br><span class="line">dir(f)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 오프셋 인덱스 : 마스크, 마스킹 : []</span></span><br><span class="line"><span class="comment"># 문자열은 순서가 있는 문자들의 집합</span></span><br><span class="line">g = <span class="string">"abcdefg"</span></span><br><span class="line">g[<span class="number">2</span>] <span class="comment"># 'c'</span></span><br><span class="line">g[<span class="number">-2</span>] <span class="comment"># 'f'</span></span><br><span class="line">g[<span class="number">2</span>:<span class="number">5</span>] <span class="comment"># 'cde' 2는 포함, 5는 미포함</span></span><br><span class="line">g[<span class="number">2</span>:] <span class="comment"># 'cdefg' 2번째부터 끝까지</span></span><br><span class="line">g[:<span class="number">3</span>] <span class="comment"># 'abc' 0번째부터 2번째까지 g[0:3]과 같음</span></span><br><span class="line">g[<span class="number">-2</span>:] <span class="comment"># 'fg' -2에서 끝까지 </span></span><br><span class="line">g[:] <span class="comment"># 'abcdefg' 처음부터 끝까지</span></span><br><span class="line">g[::<span class="number">2</span>] <span class="comment"># 'aceg' 2칸씩 점프하며 출력</span></span><br><span class="line">g[::<span class="number">-1</span>] <span class="comment"># 'gfedcba' 역순으로 출력</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 97531 출력</span></span><br><span class="line">numbers = <span class="string">'123456789'</span> </span><br><span class="line"><span class="comment"># numbers[::-2]</span></span><br><span class="line"><span class="comment"># result = numbers[::2]</span></span><br><span class="line"><span class="comment"># result[::-1]</span></span><br><span class="line"><span class="comment"># numbers[::2][::-1]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 컬렉션 데이터 타입 : list, tuple, dict</span></span><br><span class="line"><span class="comment"># list [] : 순서가 있는 수정이 가능한 데이터 타입</span></span><br><span class="line"><span class="comment"># tuple () : 순서가 있는 수정이 불가능한 데이터 타입</span></span><br><span class="line"><span class="comment"># dict &#123;&#125; : 순서가 없고 키: 값으로 구성되어 있는 데이터 타입</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"four"</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="literal">True</span>, <span class="number">1.2</span>]</span><br><span class="line">type(ls), ls</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># offset index 사용 가능</span></span><br><span class="line">ls[<span class="number">3</span>], ls[<span class="number">1</span>:<span class="number">3</span>], ls[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 함수</span></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># append : 가장 뒤에 값을 추가</span></span><br><span class="line">ls.append(<span class="number">3</span>)</span><br><span class="line">ls <span class="comment"># [1, 5, 2, 4, 3]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sort : 오름차순으로 정렬</span></span><br><span class="line">ls.sort()</span><br><span class="line">ls <span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># 내림차순 정렬</span></span><br><span class="line">ls[::<span class="number">-1</span>] <span class="comment"># [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pop : 가장 마지막 데이터를 출력하고 출력한 데이터를 삭제</span></span><br><span class="line"><span class="comment"># ctrl + enter : 현재 셀을 계속 실행</span></span><br><span class="line">num = ls.pop()</span><br><span class="line">num, ls</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 리스트의 복사</span></span><br><span class="line">ls1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ls2 = ls1</span><br><span class="line">ls1, ls2 <span class="comment"># ([1, 2, 3], [1, 2, 3])</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 얕은 복사 :주소값 복사</span></span><br><span class="line">ls1[<span class="number">2</span>] = <span class="number">5</span></span><br><span class="line">ls1, ls2 <span class="comment">#([1, 2, 5], [1, 2, 5])</span></span><br></pre></td></tr></table></figure>
<p><strong>깊은 복사</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 깊은 복사</span></span><br><span class="line">ls3 = ls1.copy()</span><br><span class="line">ls1, ls3 <span class="comment">#([1, 2, 5], [1, 2, 5])</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls1[<span class="number">2</span>]  = <span class="number">10</span></span><br><span class="line">ls1, ls3 <span class="comment"># ([1, 2, 10], [1, 2, 5])</span></span><br></pre></td></tr></table></figure>

<p><strong>tuple ()</strong> </p>
<ul>
<li>리스트와 같지만 수정이 불가능한 데이터 타입, 괄호 생략 가능</li>
<li>튜플은 리스트보다 같은 데이터를 가졌을 때 공간을 적게 사용<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tp1 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">tp2 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">type(tp1), type(tp2), tp1, tp2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># offset index 사용 가능</span></span><br><span class="line">tp1[<span class="number">1</span>], [tp1[::<span class="number">-1</span>]]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 리스트와 튜플의 저장공간 차이 비교</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">tp = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(sys.getsizeof(ls), sys.getsizeof(tp))</span><br><span class="line"><span class="comment"># 96 80</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**dict &#123;&#125;**</span><br><span class="line">- 순서가 없고 &#123;키: 값&#125;으로 구성되어 있는 데이터 타입</span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 선언: 키는 정수, 문자열 데이터 타입만 사용이 가능</span></span><br><span class="line"><span class="comment"># 인덱스 대신 키를 사용</span></span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">"one"</span>,</span><br><span class="line">    <span class="string">"two"</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">'tree'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">&#125;</span><br><span class="line">type(dic), dic</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dic[1], dic[&quot;tree&quot;]</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">dic[&quot;two&quot;] &#x3D; 123</span><br><span class="line">dic</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 아래의 데이터를 list와 dict로 선언</span></span><br><span class="line"><span class="comment"># 도시 : seoul, busan, daegu</span></span><br><span class="line"><span class="comment"># 인구 : 9,700,000, 3,400,000, 2,400,000</span></span><br><span class="line"><span class="comment"># 딕셔너리 : 변수 1개 선언</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"seoul"</span>: <span class="number">9700000</span>,</span><br><span class="line">    <span class="string">"busan"</span>: <span class="number">3400000</span>,</span><br><span class="line">    <span class="string">"daegu"</span>: <span class="number">2400000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 리스트 : 변수 2개 선언</span></span><br><span class="line">city = [seoul, busan, daegu]</span><br><span class="line">population = [<span class="number">9700000</span>, <span class="number">3400000</span>, <span class="number">2400000</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum(population)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum(data.values())</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>형변환</li>
</ol>
<ul>
<li>데이터 타입을 변환하는 방법</li>
<li>int, float, bool, str, list, tuple, dict<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">"2"</span></span><br><span class="line">a + int(b)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str(a) + b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list(data.values())</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zip : 같은 인덱스에 있는 데이터를 묶어주는 함수</span></span><br><span class="line"><span class="comment"># zip 함수 사용하여 list 타입으로 변환하기</span></span><br><span class="line">list(zip(city, population))</span><br><span class="line"><span class="comment"># dict 타입으로 변환하기</span></span><br><span class="line">dict(zip(city, population))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = dict(list(zip(city, population)))</span><br><span class="line">result</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1 = list(result.keys())</span><br><span class="line">data2 = list(resutl.values())</span><br><span class="line">data1, data2</span><br><span class="line">``` </span><br><span class="line"><span class="number">6.</span> 연산자 : 멤버 &gt;  논리 </span><br><span class="line">- 산술연산자 : +, -, *, /, //(몫), %(나머지), **(제곱)</span><br><span class="line">- 할당연산자 : 변수에 누적시켜서 연산 : +=, //=, **= 등</span><br><span class="line">- 비교연산자 : &gt;(크다), &lt;(작다), ==, !=, &lt;=(작거나 같다), &gt;=(크거나 같다), 결과로 <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line">- 논리연산자 : <span class="literal">True</span>, <span class="literal">False</span> 를 연산 : <span class="keyword">or</span>(T와 F연산 <span class="literal">True</span>가 출력), <span class="keyword">and</span>(T와 T일 때 <span class="literal">True</span>), <span class="keyword">not</span>(<span class="literal">True</span>를 <span class="literal">False</span>로 <span class="literal">False</span>를 <span class="literal">True</span>로 변경)</span><br><span class="line">- 멤버연산자 : 특정 데이터가 있는지 확인 할 때 사용 : <span class="keyword">not</span> <span class="keyword">in</span>, <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 산술연산 : 제곱, 나눗셈, 더하기 순</span></span><br><span class="line"><span class="number">1</span> + <span class="number">4</span> / <span class="number">2</span> ** <span class="number">2</span> <span class="comment"># 2.0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 할당연산</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">a +=<span class="number">10</span></span><br><span class="line">a += <span class="number">10</span></span><br><span class="line">a <span class="comment"># 30</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 비교연산</span></span><br><span class="line">a &lt; b, a == b, a != b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 논리연산 : and(교집합), or(합집합), 괄호가 있는 경우에는 왼쪽이 먼저 연산됨</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>, <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>, <span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="comment"># (not True = False가 되어 False or Flase는 False가 됨)</span></span><br><span class="line"><span class="comment"># False, True, False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">'jin'</span>, <span class="string">'andy'</span>, <span class="string">'john'</span>]</span><br><span class="line"><span class="string">'andy'</span> <span class="keyword">in</span> ls, <span class="string">'anchel'</span> <span class="keyword">in</span> ls, <span class="string">'john'</span> <span class="keyword">not</span> <span class="keyword">in</span> ls</span><br><span class="line"><span class="comment"># True, False, False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 랜덤함수</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 입력함수</span></span><br><span class="line">data = input(<span class="string">'insert string : '</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 해결의 책 만들기 : 질문을 하면 질문에 대한 답변을 해주는 책</span></span><br><span class="line"><span class="comment"># 1. solution을 리스트로 작성</span></span><br><span class="line"><span class="comment"># 2. 질문 입력 받음</span></span><br><span class="line"><span class="comment"># 3. 솔루션의 갯수에 맞게 랜덤한 index 정수 값을 생성</span></span><br><span class="line"><span class="comment"># 4. index 해당하는 솔루션 리스트의 데이터를 출력</span></span><br><span class="line">solution =[</span><br><span class="line">    <span class="string">"무엇을 하던 잘 풀릴 것이다."</span>, </span><br><span class="line">    <span class="string">'생각지도 않게 좋은 일이 생길 것이다.'</span>, </span><br><span class="line">    <span class="string">'무엇을 상상하던 그 이상이다.'</span>,</span><br><span class="line">]</span><br><span class="line">input(<span class="string">"질문을 입력하세요. : "</span>)</span><br><span class="line">idx = random.randint(<span class="number">0</span>, len(solution) - <span class="number">1</span>) <span class="comment"># 솔루션 = 총 3개: 0, 1, 2 이므로 솔루션 숫자 -1을 해야 randint(0, 2)가 됨</span></span><br><span class="line">solution[idx]</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>basic syntax</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>basic syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter notebook</title>
    <url>/2020/05/09/python_jupyter_notebook/</url>
    <content><![CDATA[<p><strong>python</strong></p>
<ul>
<li>coding program</li>
<li>numpy, pandas, sklearn 등의 모듈을 각각 설치해야 함</li>
</ul>
<p><strong>anaconda</strong></p>
<ul>
<li>numpy, pandas, sklearn 등의 모듈이 모두 포함되어 있음</li>
<li>용량이 큼(약 500MB)</li>
</ul>
<p><strong>jupyter notebook</strong></p>
<blockquote>
<p>mode</p>
</blockquote>
<ul>
<li>명령모드(esc) :  셀을 수정할 때 사용, 왼쪽 바의 색깔이 파란색입니다. </li>
<li>편집모드(enter) : 셀안의 내용을 수정할 때 사용, 왼쪽 바의 색깔이 녹색입니다. </li>
</ul>
<blockquote>
<p>style</p>
</blockquote>
<ul>
<li>markdown(명령모드 + m) : 셀 안에 설명을 작성할 때 사용</li>
<li>code(명령모드 + y) : 파이썬 코드를 작성할 때 사용</li>
<li>라인 넘버(명령모드 + l)</li>
</ul>
<blockquote>
<p>단축키</p>
</blockquote>
<ul>
<li>셀 실행 : shift + enter, ctrl + enter</li>
<li>셀 삭제 : (명령모드) x</li>
<li>되돌리기 : (명령모드)  z</li>
<li>셀 생성 : (명령모드) a(위에), b(아래)</li>
</ul>
<blockquote>
<p>매직 커맨드</p>
</blockquote>
<ul>
<li>셀 내부에서 특별하게 동작하는 커맨드</li>
<li>% : 한줄의 magic command를 동작</li>
<li>%% : 셀 단위의 magic command를 동작</li>
</ul>
<blockquote>
<p>주요 magic command</p>
</blockquote>
<ul>
<li>%pwd : 현재 주피터 노트북 파일의 경로</li>
<li>%ls : 현재 디렉토리의 파일 리스트</li>
<li>%whos : 현재 선언된 변수를 출력 </li>
<li>%reset : 현재 선언된 변수를 모두 삭제</li>
</ul>
<blockquote>
<p>shell command</p>
</blockquote>
<ul>
<li>주피터 노트북을 실행 셀 환경의 명령을 사용</li>
<li>명령어 앞에 !를 붙여서 실행</li>
</ul>
<blockquote>
<p>주요 명령어 : ls, cat, echo 등</p>
</blockquote>
<ul>
<li>!echo python : 뒤에 오는 문자열(python)을 출력해줍니다. </li>
<li>!ls : 현재 디렉토리에 있는 데이터를 표시해줍니다. </li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>jupyter netebook</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>anaconda</tag>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2020/05/08/AWS_server_mysql_query/</url>
    <content><![CDATA[<ul>
<li><h1 id="Server-Database-Table"><a href="#Server-Database-Table" class="headerlink" title="Server - Database - Table"></a>Server - Database - Table</h1></li>
<li><h1 id="1-데이터-베이스-보기"><a href="#1-데이터-베이스-보기" class="headerlink" title="1. 데이터 베이스 보기"></a>1. 데이터 베이스 보기</h1>SHOW DATABASES;</li>
<li><h1 id="생성"><a href="#생성" class="headerlink" title="생성"></a>생성</h1>CREATE DATABASE test;</li>
<li><h1 id="선택"><a href="#선택" class="headerlink" title="선택"></a>선택</h1>USE test</li>
<li><h1 id="현재-확인"><a href="#현재-확인" class="headerlink" title="현재 확인"></a>현재 확인</h1>SELECT DATABASE()</li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
        <category>mysql</category>
        <category>query</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>mysql</tag>
        <tag>query</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux</title>
    <url>/2020/05/08/AWS%20server_tmux/</url>
    <content><![CDATA[<p><strong>tmux(터미널 멀티플렉서) 실행, session name : dss</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ tmux new -s dss</span><br></pre></td></tr></table></figure>
<ul>
<li>새로운 세션을 dss란 이름으로 만든다는 뜻</li>
</ul>
<p><strong>세션 종료</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p><strong>세션 목록보기</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ tmux ls</span><br></pre></td></tr></table></figure>

<p><strong>세션 접속</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ tmux attach -t dss</span><br></pre></td></tr></table></figure>

<p><strong>윈도우 생성</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$  ctrl + b, c</span><br></pre></td></tr></table></figure>

<p><strong>윈도우 이동</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$   ctrl + b, 0-9</span><br></pre></td></tr></table></figure>

<p><strong>윈도우 종료</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$   ctrl + b, &amp;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>terminal</category>
        <category>tmux</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>git branch, git checkout, git merge</title>
    <url>/2020/05/05/git-branch/</url>
    <content><![CDATA[<p><strong>git 3번째 내용 git branch</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p>
</blockquote>
<p><strong>병합하기 1</strong></p>
<ul>
<li>헤드 브랜치에 변경사항이 없고</li>
<li>병합 대상 브랜치가 헤드로부터 시작된 경우</li>
<li>아주 쉽게 병합 가능 = Fast-forward</li>
</ul>
<p><strong>병합하기 2</strong></p>
<ul>
<li>헤드 브랜치에 추가적인 커밋이 생기는 경우</li>
<li>진짜 변합이 필요합니다. </li>
<li>충돌이 나면 충돌난 부분을 확인한 후 해결하면 됩니다. </li>
</ul>
<p><strong>soucetree에서 git branch</strong></p>
<ul>
<li>branch : 기존 내용을 유지한 체 새로운 내용을 추가하고 싶을 때 사용합니다. </li>
<li>checkout : 특정 브랜치(혹은 커밋)으로 돌아가고 싶을 때 사용합니다. </li>
<li>sourcetree의 checkout : 브랜치 이름을 더블 클릭하여 체크아웃합니다. </li>
<li>master : 고객에게 전달해야 하는 내용이 들어있습니다. </li>
<li>branch : 개발을 진행하는 내용이 들어있습니다. </li>
<li>merge : 하나의 브랜치를 현재 브랜치와 합치는 거을 병합(merge)라고 합니다. </li>
<li>head branch : 현재 작업중인 브랜치</li>
</ul>
<p><a href="https://learngitbranching.js.org/?locale=ko">learn_git_branch</a></p>
<p><strong>git에서 bugFix라는 branch 만들기</strong></p>
<ol>
<li><p>터미널 명령어 : git branch 새로만들 브랜치 이름 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch bugFix</span><br></pre></td></tr></table></figure>
</li>
<li><p>git checkout bugFix 라는 명령어로 bugFix branch로 이동할 수 있습니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout bugFix</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2-1. git checkout master 를 입력하면 master로 돌아갑니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Merge : 브랜치와 병합하기</li>
</ol>
<ul>
<li>각 브랜치에서 독립된 커밋이 하나씩 있을 경우, 이 경우는 지금까지 작업한 내용이 나뉘어 담겨있다는 뜻입니다. 이럴 때 두 브랜치를 합칠(merge) 수 있습니다. <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p>git branch bugFix </p>
</li>
<li><p>git commit</p>
</li>
<li><p>git checkout master</p>
</li>
<li><p>git commit 을 하면 아래와 같은 그림이 나옵니다.<br><img src="/img/git_merge_bugFix_1.png" alt="git_merge_bugFix_1"></p>
</li>
<li><p>git merge bugFix<br><img src="/img/git_merge_bugFix_2.png" alt="git_merge_bugFix_2"></p>
</li>
<li><p>git checkout bugFix</p>
</li>
<li><p>git merge master<br><img src="/img/git_merge_bugFix_3.png" alt="git_merge_bugFix_3"></p>
</li>
</ol>
<p><strong>틀리거나 이상한 내용이 있으면 알려주세요, 확인 후 수정하겠습니다!</strong></p>
]]></content>
      <categories>
        <category>git</category>
        <category>branch</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>branch</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone과 sourceTree</title>
    <url>/2020/05/05/git_clone&amp;sourceTree/</url>
    <content><![CDATA[<p><strong>git 2번째 내용 : sourcetree 만들기 및 commit 주의사항</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p>
</blockquote>
<p>Source Tree 설치<br><a href="https://www.sourcetreeapp.com/">소스트리 다운로드</a><br><strong>주의사항</strong></p>
<ol>
<li>아틀라시안에 가입해야 합니다. </li>
<li>bitbucket 등의 설정은 skip합니다. </li>
</ol>
<p><strong>소스트리를 설치한 후 저장소 클론</strong><br>github에 만들어진 README.md 등의 파일이 내 컴퓨터 문서폴더 안으로 복사됩니다.<br>이 때, 내 컴퓨터 문서폴더 안에 저장소이름의 폴더가 생성됩니다. </p>
<p><strong>작업 후 스테이지에 파일 추가</strong><br>만들어진 폴더를 열고 에디터 등을 이용해서 hello.html을 만들어 봅시다.<br>저장위치는 Documents/hello-world/가 됩니다. </p>
<p><strong>커밋 주의사항</strong></p>
<ol>
<li>반드시 한 번에 하나의 논리적인 작업만을 커밋합니다. </li>
<li>커밋 메세지를 잘 적어야 합니다.<br>특히 커밋 메세지는 미래의 여러분과 다른 개발자를 위해서 꼼꼼히 적어야 합니다. </li>
</ol>
<p><strong>커밋 메세지 작성법</strong></p>
<ol>
<li>첫 줄에 간단하지만 명확하게 내용을 씁니다. </li>
<li>한줄 비웁니다. </li>
<li>자세한 내용을 적습니다. </li>
</ol>
<p><strong>checkout을 이용해서 저장하지 않은 변경 내용 취소하기</strong></p>
<ul>
<li>checkout을 이용하면 마지막 커밋으로 되돌아갈 수 있습니다. </li>
<li>sourceTree의 코드뭉치 버리기 기능을 사용하면 변경사항을 되돌릴 수 있습니다. </li>
<li>commit 전 내용을 돌릴 수 있습니다. </li>
</ul>
]]></content>
      <categories>
        <category>git</category>
        <category>sourcetree</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>sourcetree</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo icarus 테마에 adsense 추가하기</title>
    <url>/2020/05/04/Hexo-adsense/</url>
    <content><![CDATA[<p><strong>오늘은 Hexo icarus 테마에 adsense를 적용하는 것을 공유하려 합니다.</strong></p>
<ol>
<li><p>아래 구글 애드센스 홈페이지에 접속합니다. </p>
<blockquote>
<p><a href="https://www.google.com/adsense/">구글애드센스</a></p>
</blockquote>
</li>
<li><p>구글계정으로 로그인하고 애드센스를 신청합니다. </p>
</li>
<li><p>Hexo icarus 테마 !_config.yml에 아래와 같이 등록합니다.<br><img src="/img/hexo-icarus-adsense.png" alt="hexo-icarus-adsense.png"></p>
</li>
<li><p>구글 에드센스 확인버튼을 누른 후 다음과 같은 이미지가 뜨면 승인을 기다립니다.<br><img src="/img/hexo-icarus-adsense1.png" alt="hexo-icarus-adsense1"></p>
</li>
</ol>
<p>수고하셨습니다!</p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>adsense</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>icarus</tag>
        <tag>adsense</tag>
      </tags>
  </entry>
  <entry>
    <title>cheatsheet</title>
    <url>/2020/04/29/cheatsheet/</url>
    <content><![CDATA[<p><strong>나만의 cheatsheet 정리</strong></p>
<p><strong>math</strong></p>
<blockquote>
<p><a href="https://datascienceschool.net/view-notebook/04358acdcf3347fc989c4cfc0ef6121c/">김도형의 데이터 사이언스 스쿨 - 수학편</a></p>
</blockquote>
<p><strong>pandas</strong></p>
<blockquote>
<p><a href="https://www.journaldev.com/23365/python-string-to-datetime-strptime">pandas 날짜 데이터</a><br><a href="https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf">pandas cheatsheet</a><br><a href="https://dataitgirls2.github.io/10minutes2pandas/">pandas 10분 완성</a><br><a href="https://www.kaggle.com/grroverpr/pandas-cheatsheet">kaggle pandas cheatsheet</a></p>
</blockquote>
<p><strong>seaborn</strong></p>
<blockquote>
<p><a href="https://www.interactivechaos.com/sites/default/files/data/seaborn_cheat_sheet.pdf">seaborn cheatsheet</a></p>
</blockquote>
<p><strong>데이터 분석가 인터뷰 용어 정리</strong></p>
<blockquote>
<p><a href="https://yamalab.tistory.com/78?category=711359">인터뷰 용어 정리</a></p>
</blockquote>
<p><strong>git 내용 정리</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a><br><a href="https://learngitbranching.js.org/?locale=ko">learning_git</a></p>
</blockquote>
]]></content>
      <categories>
        <category>cheatsheet</category>
      </categories>
      <tags>
        <tag>cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo profile 변경하기</title>
    <url>/2020/04/25/Hexo-profile/</url>
    <content><![CDATA[<p>안녕하세요, Hexo Icarus theme의 프로필 사진을 변경하는 방법에 대해 알아보겠습니다. </p>
<ol>
<li><p>아래와 같이 터미널에서 source 폴더 안에 img 폴더를 만든 후 img 폴더 안에 이미지 사진을 올리고 아래와 같이 작성하면 됩니다. </p>
</li>
<li><p>파일이름 대소문자를 구분한다고 하니 동일하게 진행하셔야 이미지가 보입니다. </p>
</li>
<li><p><strong>![문자 사이에 공간이 없어야 합니다]</strong> 즉, 대쉬를 이용해서 문자와 문자 사이에 공간을 없애야 정상적으로 작동합니다. </p>
</li>
<li><p>upload까지 약 3~4분 정도 소요되니 참고하시길 바랍니다.  </p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir img</span><br></pre></td></tr></table></figure>

<ol>
<li>Hexo 프로필 사진 변경<br><img src="/img/hexo-icarus-profile-avata.jpg" alt="hexo-icarus-profile-avata"></li>
</ol>
<ol start="2">
<li>Hexo 프로필 아래 twitter 아이콘 제거하기<br><img src="/img/hexo-icarus-twitter.png" alt="hexo-icarus-twitter.png"></li>
</ol>
<ol start="3">
<li>Hexo 블로그에 이미지 올리기<br><img src="/img/hexo-icarus-image-upload.png" alt="img 폴더를 만들고 그 안에 이미지를 추가한다"></li>
</ol>
<blockquote>
<p>출처: <a href="https://github.com/ppoffice/hexo-theme-icarus/wiki/Theme">이카루스 테마 페이지</a></p>
</blockquote>
<hr/>]]></content>
      <categories>
        <category>hexo</category>
        <category>profile</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>icarus</tag>
        <tag>profile</tag>
        <tag>logo</tag>
      </tags>
  </entry>
  <entry>
    <title>project-LinearRegression</title>
    <url>/2020/04/25/project-LinearRegression/</url>
    <content><![CDATA[<p><strong>Linear Regression project</strong></p>
<ul>
<li>한달동안 팀원들과 함께 한 프로젝트</li>
<li>홍성현님, 유호원님, 배준영님 한달동안 수고 많았습니다 :)</li>
<li>깃헙에서도 확인할 수 있습니다.  </li>
</ul>
<blockquote>
<p><a href="https://nbviewer.jupyter.org/github/HowardHowonYu/usedcar_regression_project/blob/howard/howard/used_car_regression_final.ipynb">Linear Regression project UsedCar price</a></p>
</blockquote>
<p><strong>선형회귀분석에 사용한 코드 정리</strong></p>
<ol>
<li><p>패키지 모듈</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msno</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="comment"># 컬럼 display 제한 상향</span></span><br><span class="line">pd.set_option(<span class="string">'display.max_columns'</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment"># 지수 표기법 해제</span></span><br><span class="line">pd.options.display.float_format = <span class="string">'&#123;:.7f&#125;'</span>.format</span><br></pre></td></tr></table></figure></li>
<li><p>로우데이터 임포트</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw_data = pd.read_csv(<span class="string">"./csv_file/vehicles.csv"</span>) <span class="comment"># ./ : 현재경로</span></span><br></pre></td></tr></table></figure></li>
<li><p>결측치 확인 및 제거 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msno</span><br><span class="line">msno.matrix(start_df)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>결측치 수치화</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">columns_na_percentage</span><span class="params">(df,columns)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        percentage = round(<span class="number">100</span> -(len(df[<span class="string">'&#123;&#125;'</span>.format(column)].dropna()) / len(df)) * <span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> percentage :</span><br><span class="line">            print(<span class="string">"&#123;&#125; : "</span>.format(column), percentage, <span class="string">"%"</span>, end=<span class="string">'\n'</span>)</span><br><span class="line">columns_na_percentage(start_df, start_df.columns)</span><br></pre></td></tr></table></figure></li>
<li><p>결측치 제거</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_df = start_df.dropna(axis=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">"결측치 제거후 Data : "</span>, start_df.shape)</span><br></pre></td></tr></table></figure></li>
<li><p>price 컬럼 내용 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw_data[<span class="string">'price'</span>].describe()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw_data[<span class="string">'price'</span>].sort_values(ascending=<span class="literal">False</span>)[:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>중복 데이터 제거</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_df = start_df.loc[start_df[<span class="string">'vin'</span>].drop_duplicates(keep=<span class="string">'last'</span>).index]</span><br><span class="line">print(<span class="string">"중복 vin 삭제 Data : "</span>, start_df.shape)</span><br></pre></td></tr></table></figure></li>
<li><p>VIN(차대번호) 크롤링 후 데이터 합치기</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vin_crawling_data = pd.read_csv(<span class="string">'./csv_file/final_vin_crawling.csv'</span>)</span><br><span class="line"><span class="comment"># secend_half_crawling_data = pd.read_csv('./vin_crawling_addtional.csv')</span></span><br><span class="line"><span class="comment"># vin_crawling_data = pd.concat([first_half_crawling_data, secend_half_crawling_data], axis=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 대문자 변경</span></span><br><span class="line">vin_crawling_data[<span class="string">'vin'</span>] = vin_crawling_data[<span class="string">'vin'</span>].str.upper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 중복제거</span></span><br><span class="line">vin_crawling_data = vin_crawling_data.drop_duplicates(<span class="string">'vin'</span>, keep=<span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 대문자 변경</span></span><br><span class="line">start_df[<span class="string">'vin'</span>] = start_df[<span class="string">'vin'</span>].str.upper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge</span></span><br><span class="line">merged_df = pd.merge(start_df, vin_crawling_data, on=<span class="string">'vin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 중복 제거</span></span><br><span class="line">merged_df = merged_df.drop_duplicates(<span class="string">'vin'</span>, keep=<span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 필요 없는 컬럼 제거</span></span><br><span class="line">df = merged_df[merged_df.columns.difference([<span class="string">'id_y'</span>, <span class="string">'id_x'</span>, <span class="string">'Unnamed: 0'</span>, <span class="string">'Unnamed: 0.1'</span>, <span class="string">'og_vin'</span>])]</span><br><span class="line">print(<span class="string">"크롤링 Data와 중복 vin 제거 data가 합쳐진 Data : "</span>, df.shape)</span><br></pre></td></tr></table></figure></li>
<li><p>에러 컬럼 삭제</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'error'</span>].value_counts()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=df[df.columns.difference([<span class="string">'error'</span>])]</span><br><span class="line">df = df.dropna(axis=<span class="number">0</span>)</span><br><span class="line">msno.matrix(df)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>데이터 필터링</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sigma_data_by_price</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># price가 0인것들 제거</span></span><br><span class="line">    sigma = df[(df[<span class="string">'price'</span>] &gt;= (df[<span class="string">'average'</span>] - (df[<span class="string">'stdev'</span>]*num))) &amp; (df[<span class="string">'price'</span>] &lt;= (df[<span class="string">'average'</span>] + (df[<span class="string">'stdev'</span>]*num)))]</span><br><span class="line">    <span class="keyword">return</span> sigma</span><br><span class="line"></span><br><span class="line">sigma_2_df = get_sigma_data_by_price(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"2 sigma Data:"</span>, sigma_2_df.shape)</span><br></pre></td></tr></table></figure></li>
<li><p>year 항목 int로 형변환</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigma_2_df[<span class="string">'year'</span>] = sigma_2_df[<span class="string">'year'</span>].astype(<span class="string">'int'</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>주행거리 아웃라이어 탐색</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"주행거리가 잘못 입력된 차량 대수 : "</span>,len(sigma_2_df[sigma_2_df[<span class="string">'mileage'</span>] != sigma_2_df[<span class="string">'odometer'</span>]]))</span><br><span class="line">sigma_2_df[sigma_2_df[<span class="string">'mileage'</span>] != sigma_2_df[<span class="string">'odometer'</span>]].sort_values(ascending=<span class="literal">False</span>,by=<span class="string">'odometer'</span>).head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 주행거리 아웃라이어 제거</span></span><br><span class="line">sigma_2_df = sigma_2_df[sigma_2_df[<span class="string">'mileage'</span>] == sigma_2_df[<span class="string">'odometer'</span>]]</span><br></pre></td></tr></table></figure></li>
<li><p>시각화: 박스플롯, 스캐터 플롯 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">15</span>))</span><br><span class="line">plt.subplot(<span class="number">311</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">"year"</span>, y=<span class="string">"price"</span>, data = sigma_2_df)</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.title(<span class="string">'연도별 가격 분포'</span>)</span><br><span class="line">plt.subplot(<span class="number">312</span>)</span><br><span class="line">sns.scatterplot(sigma_2_df[<span class="string">'year'</span>],sigma_2_df[<span class="string">'odometer'</span>])</span><br><span class="line">plt.title(<span class="string">"연도별 주행거리 분포"</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>눈으로 확인 후 수정이 필요한 데이터 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># year 수정해 줘야 하는 데이터</span></span><br><span class="line">sigma_2_df[sigma_2_df[<span class="string">'year'</span>] &lt; <span class="number">1980</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigma_2_df[<span class="string">'year'</span>] = sigma_2_df[<span class="string">'year'</span>].apply(<span class="keyword">lambda</span> x : <span class="number">2019</span> <span class="keyword">if</span> x &lt; <span class="number">1980</span> <span class="keyword">else</span> x)</span><br></pre></td></tr></table></figure></li>
<li><p>주행거리가 높은 차량 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigma_2_df[sigma_2_df[<span class="string">'odometer'</span>] &gt; <span class="number">500000</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 일 평균 주행거리 계산하여 확인</span></span><br><span class="line">print(<span class="string">"평균 주행거리 : "</span>, round(<span class="number">533000.00</span> / (<span class="number">365</span> * <span class="number">18</span>), <span class="number">2</span>), <span class="string">"마일/day"</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>높은 가격의 차량 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigma_2_df[sigma_2_df[<span class="string">'price'</span>] &gt; <span class="number">75000</span>].sort_values(by=[<span class="string">'price'</span>],ascending=<span class="literal">False</span>).head()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 낮은 금액의 차량 확인</span></span><br><span class="line">sigma_2_df[sigma_2_df[<span class="string">'price'</span>] &lt; <span class="number">500</span>].sort_values(by=[<span class="string">'price'</span>],ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 이상치 가격을 보이는 차량 제거</span></span><br><span class="line">sigma_2_df = sigma_2_df[(sigma_2_df[<span class="string">'vin'</span>] != <span class="string">'1GCWGFBA7C1155304'</span>) &amp; (sigma_2_df[<span class="string">'vin'</span>] != <span class="string">'1GCWGFBA8C1126880'</span>) &amp; (sigma_2_df[<span class="string">'vin'</span>] != <span class="string">'1FMCU03115KA47874'</span>)]</span><br></pre></td></tr></table></figure></li>
<li><p>주행거리 0인 데이터 확인 및 제거</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"판매자가 주행거리를 0으로 올려둔 경우 : "</span>,len(sigma_2_df[sigma_2_df[<span class="string">'odometer'</span>] == <span class="number">0</span>]),<span class="string">"건"</span>)</span><br><span class="line">sigma_2_df[sigma_2_df[<span class="string">'odometer'</span>] == <span class="number">0</span>].head(<span class="number">2</span>)</span><br><span class="line">sigma_2_df= sigma_2_df[sigma_2_df[<span class="string">'odometer'</span>] != <span class="number">0</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>분석에 필요한 컬럼</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = sigma_2_df[[<span class="string">'price'</span>,<span class="string">'year'</span>,<span class="string">'odometer'</span>,<span class="string">'drive'</span>,<span class="string">'fuel'</span>,<span class="string">'manufacturer'</span>,<span class="string">'state'</span>,<span class="string">'title_status'</span>,<span class="string">'transmission'</span>,<span class="string">'type'</span>,<span class="string">'paint_color'</span>,<span class="string">'cylinders'</span>]]</span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">msno.matrix(df)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>종속변수 : price</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.price.sort_values(ascending=<span class="literal">False</span>)[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">17</span>,<span class="number">6</span>))</span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line">sns.distplot(np.log(df[<span class="string">'price'</span>]))</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line">sns.boxplot(np.log(df[<span class="string">'price'</span>]))</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line">stats.probplot(np.log(df[<span class="string">'price'</span>]), plot=plt)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>독립변수 확인</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize&#x3D;(16,8))</span><br><span class="line">sns.countplot(df[&#39;year&#39;])</span><br><span class="line">plt.title(&quot;차량 제조연도&quot;)</span><br><span class="line">plt.xticks(rotation&#x3D;90)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>주행거리 컬럼 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">7</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">sns.distplot(df[<span class="string">'odometer'</span>])</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">sns.distplot(df[<span class="string">'odometer'</span>])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">250000</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>카테고리 독립변수 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">20</span>))</span><br><span class="line">plt.subplot(<span class="number">621</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"fuel"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span>,</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">"연료 종류 - fuel"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">622</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"cylinders"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span>,</span><br><span class="line">    order = df[<span class="string">'cylinders'</span>].value_counts().index)</span><br><span class="line">plt.title(<span class="string">"실린더 갯수 - cylinders"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">623</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"transmission"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span></span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">"변속기 - transmission"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">624</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"drive"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span></span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">"구동 방식 - drive"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">625</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"title_status"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span></span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">"차량 상태 - title_status"</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">18</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"type"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span>,</span><br><span class="line">    order = df[<span class="string">'type'</span>].value_counts().index</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">"차량 종류 - type"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"paint_color"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span>,</span><br><span class="line">    order = df[<span class="string">'paint_color'</span>].value_counts().index)</span><br><span class="line">plt.title(<span class="string">"차량 색깔 - paint_color"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"manufacturer"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span>,</span><br><span class="line">    order = df[<span class="string">'manufacturer'</span>].value_counts().iloc[:<span class="number">7</span>].index,)</span><br><span class="line">plt.title(<span class="string">"제조사 - manufacturer"</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">sns.countplot(</span><br><span class="line">    data = df,</span><br><span class="line">    y = <span class="string">"state"</span>,</span><br><span class="line">    palette=<span class="string">'Set1'</span>,</span><br><span class="line">    order = df[<span class="string">'state'</span>].value_counts().iloc[:<span class="number">7</span>].index</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">"주 - state"</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>실수형 변수 상관분석 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.pairplot(df[[<span class="string">'price'</span>,<span class="string">'odometer'</span>,<span class="string">'year'</span>]],size=<span class="number">3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>Partial Regression Plot(부분회귀분석)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">others = list(set(df.columns).difference(set([<span class="string">"price"</span>, <span class="string">"odometer"</span>])))</span><br><span class="line">p, resids = sm.graphics.plot_partregress(</span><br><span class="line">    <span class="string">"price"</span>, <span class="string">"odometer"</span>, others, data=df, obs_labels=<span class="literal">False</span>, ret_coords=<span class="literal">True</span>, ax = ax1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">others2 = list(set(df.columns).difference(set([<span class="string">"price"</span>, <span class="string">"year"</span>])))</span><br><span class="line">p, resids = sm.graphics.plot_partregress(</span><br><span class="line">    <span class="string">"price"</span>, <span class="string">"year"</span>, others2, data=df, obs_labels=<span class="literal">False</span>, ret_coords=<span class="literal">True</span>, ax = ax2</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>모델링, 데이터 분할</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 빈도수에 따른 필터링</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">value_counts_filter</span><span class="params">(num, columns)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        result = df[column].value_counts()[df[column].value_counts().sort_values() &lt; num]</span><br><span class="line">        <span class="keyword">if</span> len(result) !=<span class="number">0</span>:</span><br><span class="line">            print(result.values.sum())</span><br><span class="line">            print(result, end=<span class="string">"\n\n===========\n\n"</span>)</span><br><span class="line">value_counts_filter(<span class="number">10</span>, df.columns.difference([<span class="string">'price'</span>, <span class="string">'odometer'</span>, <span class="string">'year'</span>]))</span><br></pre></td></tr></table></figure></li>
<li><p>2개 초과 10개 미만 데이터 인덱스 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_under_10_index</span><span class="params">(start_num, end_num, columns, df)</span>:</span></span><br><span class="line">    test = &#123;&#125;</span><br><span class="line">    test2 = []</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        len_under_10 = len(df[column].value_counts()[(df[column].value_counts() &lt; end_num) &amp; (df[column].value_counts() &gt; start_num)])</span><br><span class="line">        <span class="keyword">if</span> len_under_10:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len_under_10):</span><br><span class="line">                index = df[df[column] == df[column].value_counts()[(df[column].value_counts() &lt; end_num) &amp; (df[column].value_counts() &gt; start_num)].index[i]].index.values</span><br><span class="line">                value = df[column].value_counts()[(df[column].value_counts() &lt; end_num) &amp; (df[column].value_counts() &gt; start_num)].index[i]  </span><br><span class="line">                test[value] = index</span><br><span class="line">    test2.append(test)</span><br><span class="line">    <span class="keyword">return</span> test2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_df = pd.DataFrame(check_under_10_index(<span class="number">2</span>,<span class="number">10</span>, [<span class="string">'cylinders'</span>, <span class="string">'manufacturer'</span>, <span class="string">'title_status'</span>, <span class="string">'type'</span>], df))</span><br><span class="line">index_df</span><br></pre></td></tr></table></figure></li>
<li><p>데이터 분할에 사용할 인덱스 분류</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">for_test_data = []</span><br><span class="line">for_train_data_train = []</span><br><span class="line">for_train_data_test = []</span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> index_df.columns:</span><br><span class="line">    start = list(index_df[column][<span class="number">0</span>])</span><br><span class="line">    random.shuffle(start)</span><br><span class="line">    <span class="keyword">if</span> len(start) &gt; <span class="number">4</span>:</span><br><span class="line">        m = [start[i:i + <span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(start), <span class="number">3</span>)]</span><br><span class="line">        for_test_data.append(m[<span class="number">0</span>])</span><br><span class="line">        for_train_data_train.append(m[<span class="number">1</span>])</span><br><span class="line">        for_train_data_test.append(m[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">elif</span> len(start) == <span class="number">4</span>:</span><br><span class="line">        m = [start[:<span class="number">2</span>], start[<span class="number">2</span>:<span class="number">3</span>], start[<span class="number">3</span>:]]</span><br><span class="line">        for_test_data.append(m[<span class="number">0</span>])</span><br><span class="line">        for_train_data_train.append(m[<span class="number">1</span>])</span><br><span class="line">        for_train_data_test.append(m[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        m = [[i] <span class="keyword">for</span> i <span class="keyword">in</span> start]</span><br><span class="line">        for_test_data.append(m[<span class="number">0</span>])</span><br><span class="line">        for_train_data_train.append(m[<span class="number">1</span>])</span><br><span class="line">        for_train_data_test.append(m[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>10개 미만 데이터 우선 삭제</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_under_ten</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> df.columns.difference([<span class="string">'id'</span>, <span class="string">'price'</span>, <span class="string">'odometer'</span>, <span class="string">'year'</span>]):</span><br><span class="line">        values = [value <span class="keyword">for</span> value <span class="keyword">in</span> df[column].value_counts()[df[column].value_counts() &lt; <span class="number">10</span>].keys()]</span><br><span class="line">        <span class="keyword">if</span> values:</span><br><span class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">                df = df[df[column] != value]</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_deleted_under_ten = delete_under_ten(df)</span><br></pre></td></tr></table></figure></li>
<li><p>2개 초과 10개 미만 데이터 균등 분배</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data, test_data = train_test_split(df_deleted_under_ten, test_size = <span class="number">.20</span>, random_state = <span class="number">7</span>)</span><br><span class="line">train_data = pd.concat([train_data, df.iloc[</span><br><span class="line">    [element <span class="keyword">for</span> array <span class="keyword">in</span> for_train_data_train <span class="keyword">for</span> element <span class="keyword">in</span> array] + [element <span class="keyword">for</span> array <span class="keyword">in</span> for_train_data_test <span class="keyword">for</span> element <span class="keyword">in</span> array]</span><br><span class="line">]], axis=<span class="number">0</span>)</span><br><span class="line">test_data = pd.concat([test_data,df.iloc[</span><br><span class="line">    [element <span class="keyword">for</span> array <span class="keyword">in</span> for_test_data <span class="keyword">for</span> element <span class="keyword">in</span> array]]])</span><br><span class="line">train_data.shape, test_data.shape</span><br></pre></td></tr></table></figure></li>
<li><p>데이터 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msno.matrix(train_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
</li>
<li><p>선형회귀분석(LinearRegression)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = train_data[train_data.columns.difference([<span class="string">'id_x'</span>, <span class="string">'model'</span>, <span class="string">'vin'</span>, <span class="string">'price'</span>])]</span><br><span class="line">Y = np.log(train_data[<span class="string">'price'</span>])</span><br><span class="line">X = pd.get_dummies(data=X, drop_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = <span class="number">.20</span>, random_state = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">test_df = pd.concat([Y_train, X_train], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">model = linear_model.LinearRegression() </span><br><span class="line">result = model.fit(X_train, Y_train)</span><br><span class="line">predicted = result.predict(X_test)</span><br><span class="line">r2 = r2_score(Y_test,predicted)</span><br><span class="line">print(<span class="string">'Test R2 score : '</span>, r2)</span><br><span class="line">plt.scatter(Y_test,predicted)</span><br><span class="line"></span><br><span class="line">pred_tr = result.predict(X_train)</span><br><span class="line">pred_test = result.predict(X_test)</span><br><span class="line">rmse_tr = (np.sqrt(mean_squared_error(Y_train, pred_tr)))</span><br><span class="line">rmse_test = (np.sqrt((Y_test, pred_test)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cv = KFold(10, shuffle=True, random_state=0)</span></span><br><span class="line">model_0_cross_val_score = cross_val_score(model, X, Y, scoring=<span class="literal">None</span>, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'RMSE of Train Data : '</span>, rmse_tr)</span><br><span class="line">print(<span class="string">'RMSE of Test Data : '</span>, rmse_test)</span><br><span class="line">print(<span class="string">'K-fold : '</span>, model_0_cross_val_score)</span><br></pre></td></tr></table></figure></li>
<li><p>Model 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> used_car_regression <span class="keyword">import</span> UsedCarRegression</span><br><span class="line">usedcar = UsedCarRegression(df)</span><br><span class="line">df.shape</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 모델1 full rank</span></span><br><span class="line">model1_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) +C(manufacturer)+C(cylinders)+C(drive)+C(fuel)+C(state)+C(title_status)+C(transmission)+C(type)+C(paint_color) + 0"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summary_minimize_df</span><span class="params">(result, model_num)</span>:</span></span><br><span class="line">    df = pd.DataFrame([&#123;</span><br><span class="line">        <span class="string">"R-squared"</span>: result.rsquared,</span><br><span class="line">        <span class="string">"Adj. R-squared"</span>: result.rsquared_adj,</span><br><span class="line">        <span class="string">"F-statistic"</span>: result.fvalue,</span><br><span class="line">        <span class="string">"Prob (F-statistic)"</span>: result.f_pvalue,</span><br><span class="line">        <span class="string">"Log-Likelihood"</span>: result.llf,</span><br><span class="line">        <span class="string">"AIC"</span>: result.aic,</span><br><span class="line">        <span class="string">"BIC"</span>: result.bic</span><br><span class="line">    &#125;]).T</span><br><span class="line">    df.columns = [model_num]</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure></li>
<li><p>모델 학습</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model1_formula)</span><br><span class="line">pred = result.predict(test_data)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model1_min_df = summary_minimize_df(result, <span class="string">"Model 1"</span>)</span><br><span class="line">model1_min_df</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R2 score 확인</span></span><br><span class="line">r2_score(np.log(test_data[<span class="string">'price'</span>]), pred)</span><br></pre></td></tr></table></figure></li>
<li><p>교차 검증(cross validation)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cross_validation_model1 = usedcar.cross_validation(model1_formula)</span><br><span class="line">cross_validation_model1</span><br></pre></td></tr></table></figure></li>
<li><p>ANOVA 독립변수 확인</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">anova = sm.stats.anova_lm(result, typ=<span class="number">2</span>)</span><br><span class="line">anova.sort_values(by=[<span class="string">'F'</span>], ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>Model 2 : 실수형 * 범주형 interaction</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Numbers = [<span class="string">'scale(odometer)'</span>, <span class="string">'scale(year)'</span>]</span><br><span class="line">X = [<span class="string">'fuel'</span>, <span class="string">'title_status'</span>, <span class="string">'transmission'</span>, <span class="string">'drive'</span>, <span class="string">'type'</span>, <span class="string">'paint_color'</span>,<span class="string">"cylinders"</span>, <span class="string">"manufacturer"</span>]</span><br><span class="line">combination_score = []</span><br><span class="line">combination_name = []</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> Numbers:</span><br><span class="line">    feature = number</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">        interaction = feature + <span class="string">":"</span> + i</span><br><span class="line">        </span><br><span class="line">        kf = KFold(<span class="number">5</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">0</span>)</span><br><span class="line">        mode2_cross_val_score = []</span><br><span class="line">        <span class="keyword">for</span> X_train_index, X_test_index <span class="keyword">in</span> kf.split(train_data):</span><br><span class="line">    </span><br><span class="line">            X_train= train_data.iloc[X_train_index]</span><br><span class="line">            X_test = train_data.iloc[X_test_index]</span><br><span class="line"></span><br><span class="line">            X_train = pd.concat([X_train, train_data[train_data.index.isin([element <span class="keyword">for</span> array <span class="keyword">in</span> for_train_data_train <span class="keyword">for</span> element <span class="keyword">in</span> array])]], axis=<span class="number">0</span>)</span><br><span class="line">            X_test = pd.concat([X_test, train_data[train_data.index.isin([element <span class="keyword">for</span> array <span class="keyword">in</span> for_train_data_test <span class="keyword">for</span> element <span class="keyword">in</span> array])]], axis=<span class="number">0</span>)</span><br><span class="line">            model1 = sm.OLS.from_formula(<span class="string">"np.log(price) ~ scale(odometer) + scale(year) +&#123;&#125;+&#123;&#125;"</span>.format(<span class="string">"+"</span>.join(X_train.columns.difference([<span class="string">"price"</span>,<span class="string">'odometer'</span>,<span class="string">'year'</span>])), interaction), X_train)</span><br><span class="line">            result = model1.fit()</span><br><span class="line">            pred = result.predict(X_test)</span><br><span class="line">            R2 = r2_score(np.log(X_test.price), pred)</span><br><span class="line">            n = train_data.shape[<span class="number">0</span>]</span><br><span class="line">            p = len(pd.get_dummies(train_data).columns)</span><br><span class="line">            Adjr2 = <span class="number">1</span>-(<span class="number">1</span>-R2)*(n<span class="number">-1</span>)/(n-p<span class="number">-1</span>)</span><br><span class="line">            mode2_cross_val_score.append(Adjr2)</span><br><span class="line">        combination_score.append(mode2_cross_val_score)</span><br><span class="line">        combination_name.append(interaction)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig1, ax1 = plt.subplots(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">ax1.boxplot(combination_score)</span><br><span class="line">ax1.set_xticklabels(combination_name, rotation=<span class="number">90</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>Model 2 formula</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model2_formula = <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color)\</span></span><br><span class="line"><span class="string">+ scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel)"</span></span><br></pre></td></tr></table></figure></li>
<li><p>모델학습</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls  = usedcar.model_fit(model2_formula)</span><br><span class="line">pred = result.predict(test_data)</span><br><span class="line">model2_min_df = summary_minimize_df(result, <span class="string">'Model 2'</span>)</span><br><span class="line">pd.concat([model1_min_df,model2_min_df], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R2 score</span></span><br><span class="line">r2_score(np.log(test_data[<span class="string">'price'</span>]), pred)</span><br></pre></td></tr></table></figure></li>
<li><p>CV</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cross_validation_model2 = usedcar.cross_validation(model2_formula)</span><br><span class="line">cross_validation_model2</span><br></pre></td></tr></table></figure></li>
<li><p>Model 3 : 범주형 * 범주형 interaction</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = [<span class="string">'fuel'</span>, <span class="string">'title_status'</span>, <span class="string">'transmission'</span>, <span class="string">'drive'</span>, <span class="string">'type'</span>, <span class="string">'paint_color'</span>, <span class="string">'cylinders'</span>,  <span class="string">'manufacturer'</span>]</span><br><span class="line">combination_score = []</span><br><span class="line">combination_name = []</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(len(X)):</span><br><span class="line">    feature = X[<span class="number">-1</span>]</span><br><span class="line">    X.pop()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> X:</span><br><span class="line">        interaction = feature + <span class="string">":"</span> + i</span><br><span class="line">        </span><br><span class="line">        kf = KFold(<span class="number">5</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">0</span>)</span><br><span class="line">        model_cross_val_score = []</span><br><span class="line">        <span class="keyword">for</span> X_train_index, X_test_index <span class="keyword">in</span> kf.split(train_data):</span><br><span class="line">    </span><br><span class="line">            X_train= train_data.iloc[X_train_index]</span><br><span class="line">            X_test = train_data.iloc[X_test_index]</span><br><span class="line"></span><br><span class="line">            X_train = pd.concat([X_train, train_data[train_data.index.isin([element <span class="keyword">for</span> array <span class="keyword">in</span> for_train_data_train <span class="keyword">for</span> element <span class="keyword">in</span> array])]], axis=<span class="number">0</span>)</span><br><span class="line">            X_test = pd.concat([X_test, train_data[train_data.index.isin([element <span class="keyword">for</span> array <span class="keyword">in</span> for_train_data_test <span class="keyword">for</span> element <span class="keyword">in</span> array])]], axis=<span class="number">0</span>)</span><br><span class="line">            model1 = sm.OLS.from_formula(<span class="string">"np.log(price) ~ scale(odometer) + scale(year) + &#123;&#125; + &#123;&#125;"</span>.format(<span class="string">"+"</span>.join(X_train.columns.difference([<span class="string">'price'</span>, <span class="string">'odometer'</span>, <span class="string">'year'</span>, feature, i])), interaction), X_train)</span><br><span class="line">            result = model1.fit()</span><br><span class="line">            pred = result.predict(X_test)</span><br><span class="line">            R2 = r2_score(np.log(X_test.price),pred)</span><br><span class="line">            n = train_data.shape[<span class="number">0</span>]</span><br><span class="line">            p = len(pd.get_dummies(train_data).columns)</span><br><span class="line">            Adjr2 = <span class="number">1</span>-(<span class="number">1</span>-R2)*(n<span class="number">-1</span>)/(n-p<span class="number">-1</span>)</span><br><span class="line">            model_cross_val_score.append(Adjr2)</span><br><span class="line">        combination_score.append(model_cross_val_score)</span><br><span class="line">        combination_name.append(interaction)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig1, ax1 = plt.subplots(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">ax1.boxplot(combination_score)</span><br><span class="line">ax1.set_xticklabels(combination_name, rotation=<span class="number">90</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model3_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive)"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>모델학습</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model3_formula)</span><br><span class="line">pred = result.predict(test_data)</span><br><span class="line">model3_min_df = summary_minimize_df(result, <span class="string">'Model 3'</span>)</span><br><span class="line">pd.concat([model1_min_df, model2_min_df, model3_min_df], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R2 score</span></span><br><span class="line">r2_score(np.log(test_data[<span class="string">'price'</span>]), pred)</span><br></pre></td></tr></table></figure></li>
<li><p>CV</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cross_validation_model3 = usedcar.cross_validation(model3_formula)</span><br><span class="line">cross_validation_model3</span><br></pre></td></tr></table></figure></li>
<li><p>Model 4 : year와 odometer 다항식 추가</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Partial Regression Plot을 확인하면 약간 2차방정식 모형처럼 보여서 진행</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">others = list(set(df.columns).difference(set([<span class="string">"price"</span>, <span class="string">"odometer"</span>])))</span><br><span class="line">p, resids = sm.graphics.plot_partregress(</span><br><span class="line">    <span class="string">"price"</span>, <span class="string">"odometer"</span>, others, data=df, obs_labels=<span class="literal">False</span>, ret_coords=<span class="literal">True</span>, ax = ax1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">others2 = list(set(df.columns).difference(set([<span class="string">"price"</span>, <span class="string">"year"</span>])))</span><br><span class="line">p, resids = sm.graphics.plot_partregress(</span><br><span class="line">    <span class="string">"price"</span>, <span class="string">"year"</span>, others2, data=df, obs_labels=<span class="literal">False</span>, ret_coords=<span class="literal">True</span>, ax = ax2</span><br><span class="line">)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>year에 제곱항을 더했을 때</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = []</span><br><span class="line"></span><br><span class="line">formula = <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        score.append(usedcar.cross_validation(formula))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        formula += <span class="string">" + scale(I(year**&#123;&#125;))"</span>.format(i)</span><br><span class="line">        score.append(usedcar.cross_validation(formula))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = [<span class="string">'1차항'</span>, <span class="string">'2차항'</span>, <span class="string">'3차항'</span>, <span class="string">'4차항'</span>]</span><br><span class="line">fig1, ax1 = plt.subplots(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">ax1.boxplot(score[:<span class="number">4</span>])</span><br><span class="line">ax1.set_xticklabels(name)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>odometer에 제곱항을 더했을 때</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = []</span><br><span class="line"></span><br><span class="line">formula = <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        score.append(usedcar.cross_validation(formula))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        formula += <span class="string">" + scale(I(odometer**&#123;&#125;))"</span>.format(i)</span><br><span class="line">        score.append(usedcar.cross_validation(formula))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = [<span class="string">'1차항'</span>, <span class="string">'2차항'</span>, <span class="string">'3차항'</span>, <span class="string">'4차항'</span>]</span><br><span class="line">fig1, ax1 = plt.subplots(figsize=(<span class="number">14</span>, <span class="number">6</span>))</span><br><span class="line">ax1.boxplot(score)</span><br><span class="line">ax1.set_xticklabels(name)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>year와 odometer 3차항까지 추가한 모델 비교</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model4_1_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3)) + scale(I(odometer**2)) + scale(I(odometer**3)) "</span></span><br><span class="line">model4_2_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3)) "</span> </span><br><span class="line">model4_3_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(odometer**2)) + scale(I(odometer**3)) "</span></span><br></pre></td></tr></table></figure></li>
<li><p>검증결과 비교</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cross_validation_model4_1 = usedcar.cross_validation(model4_1_formula)</span><br><span class="line">cross_validation_model4_2 = usedcar.cross_validation(model4_2_formula)</span><br><span class="line">cross_validation_model4_3 = usedcar.cross_validation(model4_3_formula)</span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">ax.boxplot(</span><br><span class="line">    [</span><br><span class="line">        cross_validation_model4_1, cross_validation_model4_2, cross_validation_model4_3</span><br><span class="line">    ],</span><br><span class="line">    sym=<span class="string">"b*"</span>,</span><br><span class="line">    labels=[<span class="string">'Model 4_1(year, odometer 다차항)'</span>, <span class="string">'Model 4_2(year 다차항)'</span>, <span class="string">'Model 4_3(odometer 다차항)'</span>],</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'모델별 K-fold 검증 비교'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>Model 4 결론 : year에 3차항까지 추가</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model4_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3)) "</span></span><br></pre></td></tr></table></figure></li>
<li><p>모델학습</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model4_formula)</span><br><span class="line">pred = result.predict(test_data)</span><br><span class="line">model4_min_df = summary_minimize_df(result, <span class="string">'Model 4'</span>)</span><br><span class="line">pd.concat([model1_min_df, model2_min_df, model3_min_df, model4_min_df], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R2 score 확인</span></span><br><span class="line">r2_score(np.log(test_data[<span class="string">'price'</span>]),pred)</span><br></pre></td></tr></table></figure></li>
<li><p>CV</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cross_validation_model4 = usedcar.cross_validation(model4_formula)</span><br><span class="line">cross_validation_model4</span><br></pre></td></tr></table></figure></li>
<li><p>모델별 성능 비교</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">ax.boxplot(</span><br><span class="line">    [</span><br><span class="line">        cross_validation_model1, cross_validation_model2,</span><br><span class="line">        cross_validation_model3, cross_validation_model4,</span><br><span class="line">    ],</span><br><span class="line">    sym=<span class="string">"b*"</span>,</span><br><span class="line">    labels=[<span class="string">'Model 1'</span>, <span class="string">'Model 2'</span>, <span class="string">'Model 3'</span>, <span class="string">'Model 4'</span>],</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'모델별 K-fold 검증 비교'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>Model 5 : 중고차 워런티 제도로 odometer 분포 탐색</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">7</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">sns.distplot(df[<span class="string">'odometer'</span>])</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">sns.distplot(df[<span class="string">'odometer'</span>])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">150000</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>6만 마일 기준, 이하 = 0, 초과 = 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'odometer_under_100000'</span>] =  df[<span class="string">'odometer'</span>].apply(<span class="keyword">lambda</span> x:  <span class="number">0</span> <span class="keyword">if</span> x &gt;= <span class="number">60000</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line">df[<span class="string">'odometer_under_100000'</span>].unique()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usedcar = UsedCarRegression(df)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model5_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3))  + C(odometer_under_100000)"</span></span><br></pre></td></tr></table></figure></li>
<li><p>모델학습</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model5_formula)</span><br><span class="line">pred = result.predict(test_data)</span><br><span class="line">model5_min_df = summary_minimize_df(result, <span class="string">'Model 5'</span>)</span><br><span class="line">pd.concat([model1_min_df,model2_min_df,model3_min_df,model4_min_df,model5_min_df], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R2 score 확인</span></span><br><span class="line">r2_score(np.log(test_data[<span class="string">'price'</span>]), pred)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CV</span></span><br><span class="line">cross_validation_model5 = usedcar.cross_validation(model5_formula)</span><br><span class="line">cross_validation_model5</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 모델별 성능비교</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">ax.boxplot(</span><br><span class="line">    [</span><br><span class="line">        cross_validation_model1, cross_validation_model2,</span><br><span class="line">        cross_validation_model3, cross_validation_model4,</span><br><span class="line">        cross_validation_model5</span><br><span class="line">    ],</span><br><span class="line">    sym=<span class="string">"b*"</span>,</span><br><span class="line">    labels=[<span class="string">'Model 1'</span>, <span class="string">'Model 2'</span>, <span class="string">'Model 3'</span>, <span class="string">'Model 4'</span>, <span class="string">'Model 5'</span>],</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'모델별 K-fold 검증 비교'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><p>Model 6 : 성능이 가장 좋은 모델4에 Ridge, Lasso, Elastic Net 적용</p>
</li>
</ol>
<p><strong>주의 : 시간이 오래걸림, 기억으론 약 4시간 30분 정도 소요됨</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = df.drop(<span class="string">'odometer_under_100000'</span>,axis=<span class="number">1</span>)</span><br><span class="line">df.shape</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usedcar = UsedCarRegression(df)</span><br><span class="line">model6_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3)) "</span></span><br><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model6_formula)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lasso</span></span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line">bar_total = tqdm(np.arange(<span class="number">0.00001</span>, <span class="number">0.0005</span>, <span class="number">0.00001</span>))</span><br><span class="line"></span><br><span class="line">lasso_ls=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bar_total:</span><br><span class="line">    lasso_result = usedcar.regularized_method(model6_formula, cv=<span class="number">5</span>, alpha=i ,L1_wt=<span class="number">1</span>)  </span><br><span class="line">    lasso_ls.append(&#123;</span><br><span class="line">        <span class="string">"alpha"</span> : i,</span><br><span class="line">        <span class="string">"Lasso"</span> : lasso_result</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 데이터 프레임으로 저장</span></span><br><span class="line">lasso_df = pd.DataFrame(lasso_ls)</span><br><span class="line">lasso_df.to_csv(<span class="string">'./lasso.csv'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ridge</span></span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line">bar_total = tqdm(np.arange(<span class="number">0.00001</span>, <span class="number">0.0005</span>, <span class="number">0.00001</span>))</span><br><span class="line"></span><br><span class="line">ridge_ls=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bar_total:</span><br><span class="line">    ridge_result = usedcar.regularized_method(model6_formula, cv=<span class="number">5</span>, alpha=i, L1_wt=<span class="number">0</span>)</span><br><span class="line">    ridge_ls.append(&#123;</span><br><span class="line">        <span class="string">"alpha"</span> : i,</span><br><span class="line">        <span class="string">"Ridge"</span> : ridge_result</span><br><span class="line">    &#125;)</span><br><span class="line">ridge_df = pd.DataFrame(ridge_ls)</span><br><span class="line">ridge_df.to_csv(<span class="string">'./ridge.csv'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Elastic_net</span></span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line">bar_total = tqdm(np.arange(<span class="number">0.00001</span>, <span class="number">0.0005</span>, <span class="number">0.00001</span>))</span><br><span class="line"></span><br><span class="line">elastic_net_ls=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bar_total:</span><br><span class="line">    elastic_net_result = usedcar.regularized_method(model6_formula, cv=<span class="number">5</span>, alpha=i, L1_wt=<span class="number">0.5</span>)</span><br><span class="line">    elastic_net_ls.append(&#123;</span><br><span class="line">        <span class="string">"alpha"</span> : i,</span><br><span class="line">        <span class="string">"Elastic_net"</span> : elastic_net_result</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elastic_net_df = pd.read_csv(<span class="string">'./csv_file/elastic.csv'</span>, index_col=[<span class="number">0</span>])</span><br><span class="line">ridge_df = pd.read_csv(<span class="string">'./csv_file/ridge.csv'</span>, index_col=[<span class="number">0</span>])</span><br><span class="line">lasso_df = pd.read_csv(<span class="string">'./csv_file/lasso.csv'</span>, index_col=[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lasso_df[<span class="string">'Lasso'</span>] = lasso_df[<span class="string">'Lasso'</span>].str.extract(<span class="string">r'(0[.][0-9]*)'</span>).astype(<span class="string">'float'</span>)</span><br><span class="line">ridge_df[<span class="string">'Ridge'</span>] = ridge_df[<span class="string">'Ridge'</span>].str.extract(<span class="string">r'(0[.][0-9]*)'</span>).astype(<span class="string">'float'</span>)</span><br><span class="line">elastic_net_df[<span class="string">'Elastic_net'</span>]  = elastic_net_df[<span class="string">'Elastic_net'</span>].str.extract(<span class="string">r'(0[.][0-9]*)'</span>).astype(<span class="string">'float'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">8</span>))</span><br><span class="line">plt.plot(<span class="string">'alpha'</span>,<span class="string">'Lasso'</span>, data=lasso_df)</span><br><span class="line">plt.plot(<span class="string">'alpha'</span>,<span class="string">'Ridge'</span>, data=ridge_df)</span><br><span class="line">plt.plot(<span class="string">'alpha'</span>,<span class="string">'Elastic_net'</span>, data=elastic_net_df)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model6_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3))"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usedcar = UsedCarRegression(df)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model6_formula)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score, result, cross_validation_model6 = usedcar.regularized_method(</span><br><span class="line">    model6_formula, cv=<span class="number">10</span>, alpha=<span class="number">0.00001</span>, L1_wt=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<ol start="56">
<li>K-Fold 검증 성능 비교<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># odometer 6만</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">15</span>, <span class="number">8</span>))</span><br><span class="line">ax.boxplot(</span><br><span class="line">    [</span><br><span class="line">        cross_validation_model1, cross_validation_model2,</span><br><span class="line">        cross_validation_model3, cross_validation_model4,</span><br><span class="line">        cross_validation_model5, cross_validation_model6</span><br><span class="line">    ],</span><br><span class="line">    sym=<span class="string">"b*"</span>,</span><br><span class="line">    labels=[<span class="string">'Model 1'</span>, <span class="string">'Model 2'</span>, <span class="string">'Model 3'</span>, <span class="string">'Model 4'</span>, <span class="string">'Model 5'</span>, <span class="string">'Model 6'</span>],</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'모델별 K-fold 검증 비교'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li>모델별 Test 데이터로 예측한 R-quare<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model1_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color)"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = usedcar.model_fit(model1_formula)</span><br><span class="line">prediction = result[<span class="number">0</span>].predict(test_data[test_data.columns.difference([<span class="string">'price'</span>])])</span><br><span class="line">model_1_test_r2 = r2_score(np.log(test_data[<span class="string">'price'</span>]), prediction)</span><br><span class="line">print(<span class="string">"Model 1 R-sqaure : "</span>, model_1_test_r2)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model2_formula = <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer)"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result= usedcar.model_fit(model2_formula)</span><br><span class="line">prediction = result[<span class="number">0</span>].predict(test_data[test_data.columns.difference([<span class="string">'price'</span>])])</span><br><span class="line">model_2_test_r2 = r2_score(np.log(test_data[<span class="string">'price'</span>]), prediction)</span><br><span class="line">print(<span class="string">"Model 2 R-sqaure : "</span>, model_2_test_r2)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model3_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + C(manufacturer):C(cylinders) + C(type):C(drive)"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result= usedcar.model_fit(model3_formula)</span><br><span class="line">prediction = result[<span class="number">0</span>].predict(test_data[test_data.columns.difference([<span class="string">'price'</span>])])</span><br><span class="line">model_3_test_r2 = r2_score(np.log(test_data[<span class="string">'price'</span>]), prediction)</span><br><span class="line">print(<span class="string">"Model 3 R-sqaure : "</span>, model_3_test_r2)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model4_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3)) "</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = usedcar.model_fit(model4_formula)</span><br><span class="line">prediction = result[<span class="number">0</span>].predict(test_data[test_data.columns.difference(</span><br><span class="line">    [<span class="string">'price'</span>])])</span><br><span class="line">model_4_test_r2 = r2_score(np.log(test_data[<span class="string">'price'</span>]), prediction)</span><br><span class="line">print(<span class="string">"Model 4 R-sqaure : "</span>, model_4_test_r2)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model5_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type)+scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3)) + C(odometer_under_100000)"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">'odometer_under_100000'</span>] =  df[<span class="string">'odometer'</span>].apply(<span class="keyword">lambda</span> x:  <span class="number">0</span> <span class="keyword">if</span> x &gt;= <span class="number">60000</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usedcar = UsedCarRegression(df)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data[<span class="string">'odometer_under_100000'</span>] =  test_data[<span class="string">'odometer'</span>].apply(<span class="keyword">lambda</span> x:  <span class="number">0</span> <span class="keyword">if</span> x &gt;= <span class="number">60000</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = usedcar.model_fit(model5_formula)</span><br><span class="line">prediction = result[<span class="number">0</span>].predict(test_data[test_data.columns.difference(</span><br><span class="line">    [<span class="string">'price'</span>])])</span><br><span class="line">model_5_test_r2 = r2_score(np.log(test_data[<span class="string">'price'</span>]), prediction)</span><br><span class="line">print(<span class="string">"Model 5 R-sqaure : "</span>, model_5_test_r2)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = test_data.drop(<span class="string">'odometer_under_100000'</span>, axis=<span class="number">1</span>)</span><br><span class="line">df = df.drop(<span class="string">'odometer_under_100000'</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model6_formula =  <span class="string">"np.log(price) ~ scale(odometer) + scale(year) + C(manufacturer) + C(cylinders) + C(drive) + C(fuel) + C(state) + C(title_status) + C(transmission) + C(type) + C(paint_color) + scale(odometer):C(cylinders) + scale(odometer):C(type) + scale(year):C(manufacturer) + scale(year):C(type) + scale(odometer):C(fuel) + C(manufacturer):C(cylinders) + C(type):C(drive) + scale(I(year**2)) + scale(I(year**3))"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result, train_data, test_data, train_ls, test_ls = usedcar.model_fit(model6_formula)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score, result, cross_validation_model6 = usedcar.regularized_method(</span><br><span class="line">    model6_formula, cv=<span class="number">10</span>, alpha=<span class="number">0.00001</span>, L1_wt=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prediction = result.predict(test_data[test_data.columns.difference(</span><br><span class="line">    [<span class="string">'price'</span>])])</span><br><span class="line">model_6_test_r2 = r2_score(np.log(test_data[<span class="string">'price'</span>]), prediction)</span><br><span class="line">print(<span class="string">"Model 6 R-sqaure : "</span>, model_6_test_r2)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final_result &#x3D; &#123;</span><br><span class="line">    &quot;model 1&quot;: model_1_test_r2,</span><br><span class="line">    &quot;model 2&quot;: model_2_test_r2,</span><br><span class="line">    &quot;model 3&quot;: model_3_test_r2,</span><br><span class="line">    &quot;model 4&quot;: model_4_test_r2,</span><br><span class="line">    &quot;model 5&quot;: model_5_test_r2,</span><br><span class="line">    &quot;model 6&quot;: model_6_test_r2,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.DataFrame(final_result,index=[<span class="number">0</span>]).plot.bar(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">plt.ylim(<span class="number">0.8</span>,<span class="number">0.9</span>)</span><br><span class="line">plt.title(<span class="string">'모델별 Test 데이터 R2 score'</span>)</span><br><span class="line">plt.tick_params(</span><br><span class="line">    axis=<span class="string">'x'</span>,          <span class="comment"># changes apply to the x-axis</span></span><br><span class="line">    which=<span class="string">'both'</span>,      <span class="comment"># both major and minor ticks are affected</span></span><br><span class="line">    bottom=<span class="literal">False</span>,      <span class="comment"># ticks along the bottom Edge are off</span></span><br><span class="line">    top=<span class="literal">False</span>,         <span class="comment"># ticks along the top Edge are off</span></span><br><span class="line">    labelbottom=<span class="literal">False</span>) <span class="comment"># labels along the bottom Edge are off</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li>가설검증 1</li>
</ol>
<p><strong>주행거리 5만킬로 미터 이하일 때 파는게 좋을것이다.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigma_2_df[<span class="string">'vehicle'</span>].value_counts()[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 거래가 가장 많은 차종으로 선택</span></span><br><span class="line">data = sigma_2_df[sigma_2_df[<span class="string">'vehicle'</span>] == <span class="string">"2012 Ford F-150 FX4"</span>]</span><br><span class="line">data = data[[<span class="string">'price'</span>,<span class="string">'year'</span>,<span class="string">'odometer'</span>,<span class="string">'drive'</span>,<span class="string">'fuel'</span>,<span class="string">'manufacturer'</span>,<span class="string">'state'</span>,<span class="string">'title_status'</span>,<span class="string">'transmission'</span>,<span class="string">'type'</span>,<span class="string">'paint_color'</span>,<span class="string">'cylinders'</span>]]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hypothesis_proof</span><span class="params">(df,result)</span>:</span></span><br><span class="line">    <span class="comment"># odometer 외의 컬럼은 다 최빈값으로 채운다</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> df.columns.difference([<span class="string">'price'</span>,<span class="string">'odometer'</span>]):</span><br><span class="line">        df[column] = df[column].value_counts().keys()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    df[<span class="string">'odometer'</span>] = range(<span class="number">0</span>, len(df)*<span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line">    df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> np.exp(result.predict(df)), df</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hypothesis_1, data = hypothesis_proof(data, result)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">9</span>))</span><br><span class="line">plt.plot(hypothesis_1)</span><br><span class="line">plt.title(<span class="string">"2012 Ford F-150 FX4 차량의 주행거리에 따른 가격 변화"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>가설 1 결론 : 3만 마일 (약 48000km)부터 가격이 급격하게 떨어지는걸 볼수 있다.</strong></p>
<ol start="59">
<li>가설검증 2</li>
</ol>
<p><strong>지역별 가격차이가 있을 것이다</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">anova = sm.stats.anova_lm(result, typ=<span class="number">2</span>)</span><br><span class="line">anova.sort_values(by=[<span class="string">'F'</span>], ascending=<span class="literal">False</span>).iloc[<span class="number">5</span>:]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = sigma_2_df[sigma_2_df[<span class="string">'vehicle'</span>] == <span class="string">"2012 Ford F-150 FX4"</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>))</span><br><span class="line">data.groupby(<span class="string">'state'</span>).mean()[<span class="string">'price'</span>].sort_values(ascending=<span class="literal">False</span>).plot.bar()</span><br><span class="line">plt.xticks(rotation=<span class="number">0</span>)</span><br><span class="line">plt.title(<span class="string">"2012 Ford F-150 FX4"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<ol start="60">
<li>회고<br>Keep</li>
</ol>
<ul>
<li>분석 목적</li>
<li>가설 설정</li>
<li>EDA 및 전처리</li>
</ul>
<p>Problem</p>
<ul>
<li>자동차 보증수리 여부에 대한 데이터의 부재로, Model 5의 아이디어를 좀더 발전 시키지 못한 점</li>
<li>머신러닝 때 배운 페이스북 예측 모델 넣어서 예측해보기</li>
</ul>
<p>Try</p>
<ul>
<li>주기적으로 업데이트되는 데이터를 활용한 예측 진행</li>
</ul>
]]></content>
      <categories>
        <category>project</category>
        <category>LinearRegression</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>LinearRegression</tag>
      </tags>
  </entry>
  <entry>
    <title>favicon</title>
    <url>/2020/04/25/favicon/</url>
    <content><![CDATA[<p><strong>favicon</strong></p>
<blockquote>
<p><a href="'https://pngtree.com/">favicon 출처</a></p>
</blockquote>
]]></content>
      <categories>
        <category>favicon</category>
      </categories>
      <tags>
        <tag>favicon</tag>
      </tags>
  </entry>
  <entry>
    <title>re(regular expression)</title>
    <url>/2020/04/24/re/</url>
    <content><![CDATA[<ul>
<li><p>정규표현식 </p>
<ul>
<li>regular expression</li>
<li>특정한 패턴과 일치하는 문자열를 ‘검색’, ‘치환’, ‘제거’ 하는 기능을 지원</li>
<li>정규표현식의 도움없이 패턴을 찾는 작업(Rule 기반)은 불완전 하거나, 작업의 cost가 높음</li>
<li>e.g) 이메일 형식 판별, 전화번호 형식 판별, 숫자로만 이루어진 문자열 등</li>
</ul>
</li>
<li><p><strong>raw string</strong></p>
<ul>
<li>문자열 앞에 r이 붙으면 해당 문자열이 구성된 그대로 문자열로 변환</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abcdef\n'</span> <span class="comment"># escapce 문자열</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = <span class="string">r'abcdef\n'</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<h4 id="기본-패턴"><a href="#기본-패턴" class="headerlink" title="기본 패턴"></a><strong>기본 패턴</strong></h4><ul>
<li><p>a, X, 9 등등 문자 하나하나의 character들은 정확히 해당 문자와 일치</p>
<ul>
<li>e.g) 패턴 test는 test 문자열과 일치</li>
<li>대소문자의 경우 기본적으로 구별하나, 구별하지 않도록 설정 가능</li>
</ul>
</li>
<li><p>몇몇 문자들에 대해서는 예외가 존재하는데, 이들은 틀별한 의미로 사용 됨</p>
<ul>
<li>. ^ $ * + ? { } [ ] \ | ( )</li>
</ul>
</li>
<li><p>. (마침표) - 어떤 한개의 character와 일치 (newline(엔터) 제외)</p>
</li>
<li><p>\w - 문자 character와 일치 [a-zA-Z0-9_]</p>
</li>
<li><p>\s - 공백문자와 일치</p>
</li>
<li><p>\t, \n, \r - tab, newline, return</p>
</li>
<li><p>\d - 숫자 character와 일치 [0-9]</p>
</li>
<li><p>^ = 시작, $ = 끝 각각 문자열의 시작과 끝을 의미</p>
</li>
<li><p>\가 붙으면 스페셜한 의미가 없어짐. 예를들어 \.는 .자체를 의미 \\는 \를 의미</p>
</li>
<li><p>자세한 내용은 링크 참조 <a href="https://docs.python.org/3/library/re.html">https://docs.python.org/3/library/re.html</a></p>
</li>
</ul>
<h4 id="search-method"><a href="#search-method" class="headerlink" title="search method"></a><strong>search method</strong></h4><ul>
<li>첫번째로 패턴을 찾으면 match 객체를 반환</li>
<li>패턴을 찾지 못하면 None 반환</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'abc'</span>, <span class="string">'123abdef'</span>)</span><br><span class="line">m</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'\d\d\d\w'</span>, <span class="string">'112abcdef119'</span>)</span><br><span class="line">m</span><br><span class="line"></span><br><span class="line">m = re.search(<span class="string">r'..\w\w'</span>, <span class="string">'@#$%ABCDabcd'</span>)</span><br><span class="line">m</span><br></pre></td></tr></table></figure>

<h4 id="metacharacters-메타-캐릭터"><a href="#metacharacters-메타-캐릭터" class="headerlink" title="metacharacters (메타 캐릭터)"></a><strong>metacharacters (메타 캐릭터)</strong></h4><h4 id="문자들의-범위를-나타내기-위해-사용"><a href="#문자들의-범위를-나타내기-위해-사용" class="headerlink" title="[] 문자들의 범위를 나타내기 위해 사용"></a><strong>[]</strong> 문자들의 범위를 나타내기 위해 사용</h4><ul>
<li>[] 내부의 메타 캐릭터는 캐릭터 자체를 나타냄</li>
<li>e.g)</li>
<li>[abck] : a or b or c or k</li>
<li>[abc.^] : a or b or c or . or ^</li>
<li>[a-d]  : -와 함께 사용되면 해당 문자 사이의 범위에 속하는 문자 중 하나</li>
<li>[0-9]  : 모든 숫자</li>
<li>[a-z]  : 모든 소문자</li>
<li>[A-Z]  : 모든 대문자</li>
<li>[a-zA-Z0-9] : 모든 알파벳 문자 및 숫자</li>
<li>[^0-9] : ^가 맨 앞에 사용 되는 경우 해당 문자 패턴이 아닌 것과 매칭</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'[cbm]at'</span>, <span class="string">'aat'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'[0-4]haha'</span>, <span class="string">'7hahah'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'[abc.^]aron'</span>, <span class="string">'daron'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'[^abc]aron'</span>, <span class="string">'0aron'</span>)</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title="\"></a><strong>\</strong></h4><ol>
<li>다른 문자와 함께 사용되어 특수한 의미를 지님<ul>
<li>\d : 숫자를          [0-9]와 동일</li>
<li>\D : 숫자가 아닌 문자  [^0-9]와 동일</li>
<li>\s : 공백 문자(띄어쓰기, 탭, 엔터 등)</li>
<li>\S : 공백이 아닌 문자</li>
<li>\w : 알파벳대소문자, 숫자 [0-9a-zA-Z]와 동일</li>
<li>\W : non alpha-numeric 문자 [^0-9a-zA-Z]와 동일</li>
</ul>
</li>
<li>메타 캐릭터가 캐릭터 자체를 표현하도록 할 경우 사용<ul>
<li>\. , \\</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'\Sand'</span>, <span class="string">'apple land banana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'\.and'</span>, <span class="string">'.and'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="-1"><a href="#-1" class="headerlink" title="."></a><strong>.</strong></h4><ul>
<li>모든 문자를 의미</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'p.g'</span>, <span class="string">'pig'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="반복패턴"><a href="#반복패턴" class="headerlink" title="반복패턴"></a><strong>반복패턴</strong></h4><ul>
<li>패턴 뒤에 위치하는 *, +, ?는 해당 패턴이 반복적으로 존재하는지 검사 <ul>
<li>‘+’ -&gt; 1번 이상의 패턴이 발생</li>
<li>‘*’ -&gt; 0번 이상의 패턴이 발생</li>
<li>‘?’ -&gt; 0 혹은 1번의 패턴이 발생</li>
</ul>
</li>
<li>반복을 패턴의 경우 greedy하게 검색 함, 즉 가능한 많은 부분이 매칭되도록 함<ul>
<li>e.g) a[bcd]*b  패턴을 abcbdccb에서 검색하는 경우<ul>
<li>ab, abcb, abcbdccb 전부 가능 하지만 최대한 많은 부분이 매칭된 abcbdccb가 검색된 패턴</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'a[bcd]*b'</span>, <span class="string">'abcbdccb'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'b\w+a'</span>, <span class="string">'banana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'i+'</span>, <span class="string">'piigiii'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'pi+g'</span>, <span class="string">'pg'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'pi*g'</span>, <span class="string">'pg'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'https?'</span>, <span class="string">'http://www.naver.com'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="-2"><a href="#-2" class="headerlink" title="^, $"></a><strong>^</strong>, <strong>$</strong></h4><ul>
<li>^  문자열의 맨 앞부터 일치하는 경우 검색</li>
<li>$  문자열의 맨 뒤부터 일치하는 경우 검색</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'b\w+a'</span>, <span class="string">'cabana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'^b\w+a'</span>, <span class="string">'cabana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'^b\w+a'</span>, <span class="string">'babana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'b\w+a$'</span>, <span class="string">'cabana'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'b\w+a$'</span>, <span class="string">'cabanap'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="grouping"><a href="#grouping" class="headerlink" title="grouping"></a><strong>grouping</strong></h4><ul>
<li>()을 사용하여 그루핑</li>
<li>매칭 결과를 각 그룹별로 분리 가능</li>
<li>패턴 명시 할 때, 각 그룹을 괄호() 안에 넣어 분리하여 사용</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = re.search(<span class="string">r'(\w+)@(.+)'</span>, <span class="string">'test@gmail.com'</span>)</span><br><span class="line">print(m.group(<span class="number">1</span>))</span><br><span class="line">print(m.group(<span class="number">2</span>))</span><br><span class="line">print(m.group(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h4 id="-3"><a href="#-3" class="headerlink" title="{}"></a><strong>{}</strong></h4><ul>
<li>*, +, ?을 사용하여 반복적인 패턴을 찾는 것이 가능하나, 반복의 횟수 제한은 불가</li>
<li>패턴뒤에 위치하는 중괄호{}에 숫자를 명시하면 해당 숫자 만큼의 반복인 경우에만 매칭</li>
<li>{4} - 4번 반복</li>
<li>{3,4} - 3 ~ 4번 반복</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">'pi&#123;3,5&#125;g'</span>, <span class="string">'piiiiig'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="미니멈-매칭-non-greedy-way"><a href="#미니멈-매칭-non-greedy-way" class="headerlink" title="미니멈 매칭(non-greedy way)"></a><strong>미니멈 매칭(non-greedy way)</strong></h4><ul>
<li>기본적으로 *, +, ?를 사용하면 greedy(맥시멈 매칭)하게 동작함</li>
<li>*?, +?을 이용하여 해당 기능을 구현</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'&lt;.+&gt;'</span>, <span class="string">'&lt;html&gt;haha&lt;/html&gt;'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'&lt;.+?&gt;'</span>, <span class="string">'&lt;html&gt;haha&lt;/html&gt;'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="-4"><a href="#-4" class="headerlink" title="{}?"></a><strong>{}?</strong></h4><ul>
<li>{m,n}의 경우 m번 에서 n번 반복하나 greedy하게 동작</li>
<li>{m,n}?로 사용하면 non-greedy하게 동작. 즉, 최소 m번만 매칭하면 만족</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r'a&#123;3,5&#125;'</span>, <span class="string">'aaaaa'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'a&#123;3,5&#125;?'</span>, <span class="string">'aaaaa'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="match"><a href="#match" class="headerlink" title="match"></a><strong>match</strong></h4><ul>
<li>search와 유사하나, 주어진 문자열의 시작부터 비교하여 패턴이 있는지 확인</li>
<li>시작부터 해당 패턴이 존재하지 않다면 None 반환</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(<span class="string">r'\d\d\d'</span>, <span class="string">'my number is 123'</span>)</span><br><span class="line"></span><br><span class="line">re.match(<span class="string">r'\d\d\d'</span>, <span class="string">'123 is my number'</span>)</span><br><span class="line"></span><br><span class="line">re.search(<span class="string">r'^\d\d\d'</span>, <span class="string">'123 is my number'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="findall"><a href="#findall" class="headerlink" title="findall"></a><strong>findall</strong></h4><ul>
<li>search가 최초로 매칭되는 패턴만 반환한다면, findall은 매칭되는 전체의 패턴을 반환</li>
<li>매칭되는 모든 결과를 리스트 형태로 반환</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.findall(<span class="string">r'[\w-]+@[\w.]+'</span>, <span class="string">'test@gmail.com haha test2@gmail.com nice test test'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="sub"><a href="#sub" class="headerlink" title="sub"></a><strong>sub</strong></h4><ul>
<li>주어진 문자열에서 일치하는 모든 패턴을 replace</li>
<li>그 결과를 문자열로 다시 반환함</li>
<li>두번째 인자는 특정 문자열이 될 수도 있고, 함수가 될 수 도 있음</li>
<li>count가 0인 경우는 전체를, 1이상이면 해당 숫자만큼 치환 됨</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(<span class="string">r'[\w-]+@[\w.]+'</span>, <span class="string">'great'</span>, <span class="string">'test@gmail.com haha test2@gmail.com nice test test'</span>, count=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a><strong>compile</strong></h4><ul>
<li>동일한 정규표현식을 매번 다시 쓰기 번거로움을 해결</li>
<li>compile로 해당표현식을 re.RegexObject 객체로 저장하여 사용가능</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">email_reg = re.compile(<span class="string">r'[\w-]+@[\w.]+'</span>)</span><br><span class="line">email_reg.search(<span class="string">'test@gmail.com haha good'</span>)</span><br><span class="line">email_reg.findall()</span><br></pre></td></tr></table></figure>

<h3 id="연습문제"><a href="#연습문제" class="headerlink" title="연습문제"></a>연습문제</h3><ul>
<li>아래 뉴스에서 이메일 주소를 추출해 보세요</li>
<li>다음중 올바른 (http, https) 웹페이지만 찾으시오</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">&gt; 위의 두 모듈이 없는 경우에는 pip install requests bs4 실행</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_news_content</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    content = response.text</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">'html5lib'</span>)</span><br><span class="line"></span><br><span class="line">    div = soup.find(<span class="string">'div'</span>, attrs = &#123;<span class="string">'id'</span> : <span class="string">'harmonyContainer'</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    content = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> paragraph <span class="keyword">in</span> div.find_all(<span class="string">'p'</span>):</span><br><span class="line">        content += paragraph.get_text()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">news1 = get_news_content(<span class="string">'https://news.v.daum.net/v/20190617073049838'</span>)</span><br><span class="line">print(news1)</span><br><span class="line"></span><br><span class="line">email_reg = re.compile(<span class="string">r'[\w-]+@[\w.]+\w+'</span>)</span><br><span class="line">email_reg.search(news1)</span><br><span class="line"></span><br><span class="line">webs = [<span class="string">'http://www.test.co.kr'</span>,</span><br><span class="line">        <span class="string">'https://www.test1.com'</span>,</span><br><span class="line">        <span class="string">'http://www.test.com'</span>,</span><br><span class="line">        <span class="string">'ftp://www.test.com'</span>,</span><br><span class="line">        <span class="string">'http:://www.test.com'</span>,</span><br><span class="line">        <span class="string">'htp://www.test.com'</span>,</span><br><span class="line">        <span class="string">'http://www.google.com'</span>,</span><br><span class="line">        <span class="string">'https://www.homepage.com.'</span>]</span><br><span class="line"></span><br><span class="line">web_reg = re.compile(<span class="string">r'https?://[\w.]+\w+$'</span>)</span><br><span class="line">list(map(<span class="keyword">lambda</span> w:web_reg.search(w) != <span class="literal">None</span>, webs))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>re</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>porject EDA</title>
    <url>/2020/04/23/porject-EDA/</url>
    <content><![CDATA[<p><strong>EDA project</strong></p>
<ul>
<li>처음으로 진행했던 프로젝트</li>
<li>아파트 가격분석 EDA </li>
<li>자세한 내용은 아래 깃헙을 참고해주세요. </li>
</ul>
<blockquote>
<p><a href="https://github.com/cds0804/project-1-EDA/blob/master/EDA%20project%20Analysis%20APT%20price_20200219.ipynb">EDA project Analysis APT price</a></p>
</blockquote>
]]></content>
      <categories>
        <category>project</category>
        <category>EDA</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>eda</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/21/webcrawling-robots.txt/</url>
    <content><![CDATA[<h3 id="web-crawling-하기전에-알아둬야-할-사항"><a href="#web-crawling-하기전에-알아둬야-할-사항" class="headerlink" title="web crawling 하기전에 알아둬야 할 사항"></a>web crawling 하기전에 알아둬야 할 사항</h3><ul>
<li>예를들어, 네이버 홈페이지를 크롤링한다고 하면 <a href="http://www.naver.com/robots.txt을">www.naver.com/robots.txt을</a> 브라우저 주소창에 입력하면 로봇 배제 규약에 관한 내용이 나옵니다. </li>
</ul>
<h3 id="robots-txt-내용-요약"><a href="#robots-txt-내용-요약" class="headerlink" title="robots.txt 내용 요약"></a>robots.txt 내용 요약</h3><ol>
<li>모든 로봇 접근 허락<br>User-agent: *<br>Allow : /<ol>
<li>모든 로봇 접근 차단<br>User-agent: *<br>Disallow: /</li>
<li>모든 로봇에 디렉토리 3곳 접근 차단<br>User-agent: *<br>Disallow: /cgi-bin/<br>Disallow: /tmp/<br>Disallow: /junk/</li>
<li>모든 로봇에 특정 파일 접근 차단<br>User-agent: *<br>Disallow: /directory/file.html</li>
<li>BadBot 로봇에 모든 파일 접근 차단<br>User-agent: BadBot<br>Disallow: /</li>
<li>BadBot과 Googlebot에 특정 디렉토리 접근 차단<br>User-agent: BadBot<br>User-agent: Googlebot<br>Disallow: /private/</li>
</ol>
</li>
</ol>
<h1 id="참고사항-2020년-4월-21일-현재"><a href="#참고사항-2020년-4월-21일-현재" class="headerlink" title="참고사항 2020년 4월 21일 현재"></a>참고사항 2020년 4월 21일 현재</h1><ol>
<li>네이버 로봇 규약 설정<br>출처:  <a href="https://searchadvisor.naver.com/guide/seo-basic-robots">https://searchadvisor.naver.com/guide/seo-basic-robots</a></li>
</ol>
<ul>
<li><p>사이트의 루트 페이지만 수집 허용으로 설정합니다.<br>User-agent: *<br>Disallow: /<br>Allow: /$</p>
<ul>
<li>sitemap.xml 지정<br>User-agent: *<br>Allow: /<br>Sitemap: <a href="http://www.example.com/sitemap.xml">http://www.example.com/sitemap.xml</a></li>
</ul>
</li>
</ul>
<ol>
<li>다음 로봇 규약 설정</li>
</ol>
<ul>
<li><p>모든 로봇의 접근 차단<br>User-agent: *<br>Disallow: /</p>
<ol>
<li>카카오 로봇 규약 설정</li>
</ol>
</li>
<li><p>모든 로봇의 접근 차단</p>
</li>
<li><p>See <a href="http://www.robotstxt.org/wc/norobots.html">http://www.robotstxt.org/wc/norobots.html</a> for documentation on how to use the robots.txt file</p>
</li>
<li><p>To ban all spiders from the entire site uncomment the next two lines:<br>User-agent: *<br>Disallow: /</p>
</li>
</ul>
<p>문제가 있거나 오타가 있으면 댓글이나 메일로 알려주세요.<br>감사합니다 :)</p>
<p>자세한 내용은 아래 사이트를 참조하세요.<br>출처: <a href="https://gbsb.tistory.com/80">https://gbsb.tistory.com/80</a><br>출처: <a href="https://medium.com/@euncho/robots-txt-e08328c4f0fd">https://medium.com/@euncho/robots-txt-e08328c4f0fd</a><br>출처: <a href="https://support.google.com/webmasters/answer/6062596?hl=ko">https://support.google.com/webmasters/answer/6062596?hl=ko</a><br>출처: <a href="https://ko.wikipedia.org/wiki/%EB%A1%9C%EB%B4%87_%EB%B0%B0%EC%A0%9C_%ED%91%9C%EC%A4%80">https://ko.wikipedia.org/wiki/%EB%A1%9C%EB%B4%87_%EB%B0%B0%EC%A0%9C_%ED%91%9C%EC%A4%80</a></p>
]]></content>
      <categories>
        <category>crawling</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
        <tag>robots.txt</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/21/webcrawling-3/</url>
    <content><![CDATA[<h3 id="python의-request-모듈을-사용하여-http-request-resopnse-확인하기"><a href="#python의-request-모듈을-사용하여-http-request-resopnse-확인하기" class="headerlink" title="python의 request 모듈을 사용하여 http request/resopnse 확인하기"></a>python의 request 모듈을 사용하여 http request/resopnse 확인하기</h3><h4 id="requests-모듈"><a href="#requests-모듈" class="headerlink" title="requests 모듈"></a>requests 모듈</h4><ol>
<li>http request/response를 위한 모듈</li>
<li>HTTP method를 메소드 명으로 사용하여 request 요청 예) get, post</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># get 방식</span></span><br><span class="line">url = <span class="string">'https://news.v.daum.net/v/20190728165812603'</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 방식</span></span><br><span class="line">url = <span class="string">'https://www.kangcom.com/member/member_check.asp'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'testid'</span>,</span><br><span class="line">    <span class="string">'pwd'</span>: <span class="string">'password'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=data)</span><br><span class="line">resp.text</span><br></pre></td></tr></table></figure>

<h4 id="HTTP-header-데이터-이용하기"><a href="#HTTP-header-데이터-이용하기" class="headerlink" title="HTTP header 데이터 이용하기"></a>HTTP header 데이터 이용하기</h4><ol>
<li>header 데이터 구성하기</li>
<li>header 데이터 전달하기</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://news.v.daum.net/v/20190728165812603'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">resp.text</span><br></pre></td></tr></table></figure>
<h4 id="HTTP-response-처리하기"><a href="#HTTP-response-처리하기" class="headerlink" title="HTTP response 처리하기"></a>HTTP response 처리하기</h4><ol>
<li>response 객체의 이해</li>
<li>status_code 확인하기</li>
<li>text 속성 확인하기</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://news.v.daum.net/v/20190728165812603'</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">    resp.headers</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="BeautifulSoup의-find와-find-all-함수"><a href="#BeautifulSoup의-find와-find-all-함수" class="headerlink" title="BeautifulSoup의 find와 find_all 함수"></a>BeautifulSoup의 find와 find_all 함수</h3><ol>
<li>find 함수 <ul>
<li>조건에 만족하는 하나의 tag만 검색</li>
<li>특정 html tag를 검색</li>
<li>검색 조건을 명시하여 찾고자하는 tag를 검색</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = soup.find(<span class="string">'h3'</span>)</span><br><span class="line">tag.get_text()</span><br><span class="line"></span><br><span class="line">tag = soup.find(<span class="string">'p'</span>)</span><br><span class="line">tag.get_text()</span><br><span class="line"></span><br><span class="line">tag = soup.find(<span class="string">'div'</span>, id=<span class="string">'upper'</span>)</span><br><span class="line">tag.get_text().strip()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>find_all함수 </p>
<ul>
<li>조건에 맞는 모든 tag를 리스트로 반환합니다. </li>
</ul>
</li>
<li><p>get_text 함수</p>
<ul>
<li>tag안의 value를 추출</li>
<li>부모tag의 경우, 모든 자식 tag의 value를 추출</li>
</ul>
</li>
<li><p>attribute 값 추출하기</p>
<ul>
<li>경우에 따라 추출하고자 하는 값이 attribute에도 존재함</li>
<li>이 경우에는 검색한 tag에 attribute 이름을 [ ]연산을 통해 추출가능</li>
<li>예) div.find(‘h3’)[‘title’]</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = soup.find(<span class="string">'h3'</span>)</span><br><span class="line">tag[<span class="string">'title'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="CSS의-select-one과-select-함수"><a href="#CSS의-select-one과-select-함수" class="headerlink" title="CSS의 select_one과 select 함수"></a>CSS의 select_one과 select 함수</h3><ul>
<li>CSS를 이용하여 tag 찾기<ul>
<li>select, select_one함수 사용 </li>
<li>css selector 사용법<ul>
<li>태그명 찾기 tag </li>
<li>자손 태그 찾기 - 자손 관계 (tag tag)</li>
<li>자식 태그 찾기 - 다이렉트 자식 관계 (tag &gt; tag)</li>
<li>아이디 찾기 #id</li>
<li>클래스 찾기 .class</li>
<li>속성값 찾기 [name=’test’]<ul>
<li>속성값 prefix 찾기 [name ^=’test’]</li>
<li>속성값 suffix 찾기 [name $=’test’]</li>
<li>속성값 substring 찾기 [name *=’test]</li>
</ul>
</li>
<li>n번째 자식 tag 찾기 :nth-child(n)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>crawling</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/21/webcrawling-2/</url>
    <content><![CDATA[<p>※ 출처 : fast campus 머신러닝 인강(변영효 강사님)</p>
<ul>
<li><p>일부 내용만 발췌하였고, 기본적인 개념 및 추가내용을 확인하시려면 인강 수강을 권장드립니다. </p>
</li>
<li><p>내용요약</p>
</li>
<li><ol>
<li>웹사이트에서 원하는 정보의 태그를 파악</li>
</ol>
</li>
<li><ol start="2">
<li>모듈을 통해 태그를 찾은 후 원하는 값을 가져옴</li>
</ol>
</li>
</ul>
<h3 id="2-HTML-Hyper-Text-Markup-Language"><a href="#2-HTML-Hyper-Text-Markup-Language" class="headerlink" title="2. HTML(Hyper Text Markup Language)"></a>2. HTML(Hyper Text Markup Language)</h3><ul>
<li><p>웹 사이트를 생성하기 위한 언어로 문서와 문서가 링크로 연결되어 있고, 태그를 사용하는 언어</p>
</li>
<li><p>태그 : HTML 문서의 기본 블락</p>
</li>
<li><p>브라우저에 어떻게 렌더링(화면에 표시)될지 전달</p>
</li>
<li><p>&lt;태그명 속성1=”속성값1” 속성2=”속성값2”&gt;Value&lt;/태그명&gt;</p>
</li>
<li><p>&lt;태그명 속성1=”속성값1” 속성2=”속성값2”/&gt;</p>
</li>
<li><p>p 태그 : paragraph tag</p>
<p>한 문단으로 표시해주는 태그</p>
</li>
<li><p>div 태그</p>
<div>그룹핑을 하는 태그</div>
</li>
<li><p>대부분의 crawling은 태그 안에 있는 값을 추출하는 작업입니다. </p>
</li>
<li><p>html 기본구조</p>
</li>
</ul>
<html>
    <head>
        <title>BeautifulSoup test</title>
    <link rel="alternate" href="/atom.xml" title="안녕하세요!! 목표는 1인분!" type="application/atom+xml">
</head>
    <bocy>
        <div id='upper' class='test'>
            <h3 title='Good Content Title'>Contents Title</h3>
            <p>Test contents</p>
            <img src='https://newsimg.sedaily.com/2018/05/16/1RZJYCTROK_1.jpg'>
        </div>
        <div id='lower' class='test'>
            <p>Test Test Test 1</p>
            <p>Test Test Test 2</p>
            <p>Test Test Test 3</p>
        </div>
    </body>
</html>

<p>웹 사이트에서 본인에게 필요한 정보를 가져오는 실습을 해보는걸 추천드립니다. </p>
]]></content>
      <categories>
        <category>crawling</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>visited_count</title>
    <url>/2020/04/17/Hexo-visited-count/</url>
    <content><![CDATA[<p><strong>블로그 방문자 수 설정하기</strong></p>
<blockquote>
<p><a href="https://msj0319.github.io/2020/02/15/Hexo-Blog-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B0%A9%EB%AC%B8%EC%9E%90-%EB%B0%8F-%EC%A1%B0%ED%9A%8C%EC%88%98-%EC%B9%B4%EC%9A%B4%ED%8C%85-%EA%B8%B0%EB%8A%A5-%EB%84%A3%EA%B8%B0/">참조 사이트</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>icarus</tag>
        <tag>visit</tag>
      </tags>
  </entry>
  <entry>
    <title>git 기본 개념 및 계정 만들기</title>
    <url>/2020/04/15/git_ceate/</url>
    <content><![CDATA[<p><strong>git 1번째 내용 : 아래 인프런 무료강의를 시청한 후 작성하였습니다.</strong></p>
<blockquote>
<p><a href="https://www.inflearn.com/course/git-and-github/lecture/14171">인프런 무료강좌 git과 github</a></p>
</blockquote>
<ul>
<li>Git이란?<br>형상 관리 시스템(version control system)의 한 종류입니다.<br>주로 개발자들이 프로그램과 관련된 파일들을 저장하는데 사용합니다.<br>게임의 세이브 포인트와 유사한데, 언제든지 저장 시점으로 되돌아 갈 수 있습니다. </li>
</ul>
<p><strong>절차</strong></p>
<ol>
<li>github 가입</li>
<li>github 저장소 생성</li>
<li>github 저장소 클론</li>
<li>내 컴퓨터의 내 문서 아래에 생성된 프로젝트 디렉토리에서 파일 생성 및 작업 완료</li>
<li>커밋할 파일들 선택해서 스테이지에 올리기(add)</li>
<li>커밋하기(commit)</li>
<li>푸시하기(push)</li>
<li>github.com/내아이디/내프로젝트 링크를 통해서 정상적으로 업로드 되어있는지 확인</li>
</ol>
<p><strong>3가지 기본 개념</strong></p>
<ol>
<li>커밋(commit)<br>게임의 세이브에 해당하는 행동입니다.<br>언제든지 커밋한 시점으로 돌아갈 수 있습니다.<br>저장을 원하는 파일들을 묶어서 커밋 명령을 수행하면 됩니다. </li>
<li>스테이지에 올린다(add)<br>커밋전에 저장을 원하는 파일들을 묶는 일입니다.<br>스테이지에 파일을 올리는 작업, 이를 간단히 줄여서 add라고 합니다. </li>
<li>github에 업로드(push)<br>커밋을 하면 현재 작업 내용의 세이브 데이터가 내 컴퓨터에 저장됩니다.<br>github에 업로드하면 게임의 원격 저장과 비슷한 일을 합니다.<br>다른 사람과 공유할 수 있고, 내 컴퓨터의 데이터가 날아가도 안전하게 다시 복구할 수 있습니다.<br>github에 업로드 하는걸 git에서는 “push”라고 합니다. </li>
</ol>
<p><strong>직접 해 보기</strong><br>github.com 가입<br><a href="http://github.com/join을">http://github.com/join을</a> 통해 깃헙 가입을 합니다.<br><strong>주의사항</strong></p>
<ol>
<li>github은 아이디 노출도가 높습니다.<br>개발자스러운 아이디를 신중하게 정합니다. </li>
<li>가입 후 이메일 인증을 해야 가입이 완료됩니다. </li>
</ol>
<p><strong>참고사항</strong><br>github의 캐릭터는 옥토캣입니다.<br>개발자들 사이에서 인기가 매우 높다고 합니다.<br><a href="https://octodex.github.com/">옥토캣 이미지</a></p>
<p><strong>저장소 생성</strong><br>가입 후 저장소를 하나 만듭니다. </p>
<ol>
<li>Repository name 입력합니다. </li>
<li>Description을 적습니다. </li>
<li>Public으로 공개 설정합니다. </li>
<li>initialize this repository with a README 박스를 체크합니다. </li>
<li>Create repository, 초록색 new repository 버튼을 눌러서 저장소를 만듭니다.</li>
</ol>
<ul>
<li><p>저장소 주소를 메모장 등에 저장해 놓습니다. </p>
</li>
<li><p>저장소 주소의 규칙 : <a href="https://github.com/내아이디/저장소이름">https://github.com/내아이디/저장소이름</a> 입니다. </p>
</li>
<li><p>프로젝트와 repository 생성</p>
<blockquote>
<p><a href="https://greeksharifa.github.io/github/2018/06/29/github-usage-02-create-project/">참고 사이트</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>terminal_basic_command</title>
    <url>/2020/04/15/terminal-basic-command/</url>
    <content><![CDATA[<p><strong>Mac Terminal basic command</strong></p>
<ul>
<li>zsh : 2020 mac 기본 터미널</li>
<li>iTrem : 현재 사용하고 있는 터미널</li>
<li>oh my zsh : 터미널 설정 오픈소스<blockquote>
<p><a href="https://github.com/ohmyzsh/ohmyzsh">출처</a></p>
</blockquote>
</li>
</ul>
<p><strong>현재위치 파악 및 폴더 이동하기</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span> </span><br><span class="line">$ ll</span><br><span class="line">$ ls -al</span><br><span class="line">$ ls</span><br><span class="line">$ <span class="built_in">cd</span> Documents</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ <span class="built_in">cd</span> Music/Music</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<ol>
<li>pwd : 현재 위치의 절대 경로</li>
<li>ll : 폴더 </li>
<li>ls -al : 폴더 상세내용 표시</li>
<li>ls : </li>
<li>cd Documents : </li>
<li>cd .. : </li>
<li>cd Music/Music : </li>
<li>cd ~ : </li>
</ol>
<p><strong>폴더, 파일 생성 및 삭제 명령어</strong></p>
<blockquote>
<p>참고사항 : 15번 $ 표시가 없는 esc는 esc를 입력하라는 것이 아닌 esc키를 누르라는 의미입니다. </p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ touch <span class="built_in">test</span></span><br><span class="line">$ vi <span class="built_in">test</span> </span><br><span class="line">$ i</span><br><span class="line">$ :<span class="built_in">set</span> nu</span><br><span class="line">$ <span class="built_in">test</span> </span><br><span class="line">esc</span><br><span class="line">$ :wq</span><br><span class="line">$ rm <span class="built_in">test</span></span><br><span class="line">$ ll</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ rmdir <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<ol>
<li>mkdir test : </li>
<li>cd test : </li>
<li>touch test : </li>
<li>vi test : </li>
<li>i : 터미널 창 왼쪽 아래 - - INSERT - - 라고 보이며, vi editor 내부에 글자를 적을 수 있습니다. </li>
<li>:set nu : 에디터 내부에 라인이 설정됩니다. </li>
<li>test : 테스트라고 작성해봅시다! 혹은 아무글자나 작성해봅시다. </li>
<li>esc키를 누르면 왼쪽 아래 - - INSERT - - 가 사라집니다. </li>
<li>wq : 작성한 내용을 저장 후 빠져나옵니다. </li>
<li>rm test : test 파일을 삭제합니다. </li>
<li>ll : 폴더 내부에 있는 내용물을 보여줍니다. </li>
<li>cd .. : 상위 폴더로 이동합니다. </li>
<li>rmdir test : test 폴더를 삭제합니다. </li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">$ ll</span><br></pre></td></tr></table></figure>
<ol>
<li>ls : 현재 경로에 있는 폴더, 파일을 보여줍니다. </li>
<li>ll : 현재 경로에 있는 폴더, 파일을 보여줍니다.  단, ls보다 상세하게 보여줍니다. (권한, 사용자계정 등)</li>
</ol>
<p><strong>터미널 이전 명령어 실행</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">history</span></span><br><span class="line">$ !27</span><br></pre></td></tr></table></figure>
<ul>
<li>history : 과거에 입력한 명령어 보기</li>
<li>!27 : 27번에 실행했던 명령어 다시 실행하기</li>
</ul>
<p><strong>설치된 판다스 0.24.2버전으로 변경하기</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ pip uninstall pandas</span><br><span class="line">$ pip install pandas==0.24.2</span><br></pre></td></tr></table></figure>

<p><strong>절대경로</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<ul>
<li>/home/ubuntu/python3/database : 현재 위치의 절대 경로</li>
<li>/ : 루트</li>
</ul>
<p><strong>절대경로로 이동</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/ubuntu/python3/daatabase/</span><br></pre></td></tr></table></figure>

<p><strong>최상위 계정 접속</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure>
<ul>
<li>/ : 결과</li>
</ul>
<p><strong>접속되어있는 계정의 최상위 디렉토리로 이동</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<ul>
<li>/home/ubuntu : 결과</li>
</ul>
<p><strong>상대경로</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./python3/database/</span><br></pre></td></tr></table></figure>
<ul>
<li>./ : 현재위치, 생략가능</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../notebook/</span><br></pre></td></tr></table></figure>
<ul>
<li>위로 한단계 올라간 후 노트북 디렉토리로 이동</li>
</ul>
<p><strong>새로운 명령어를 알게될 때마다 추가 업데이트 예정입니다.</strong></p>
<blockquote>
<p>오탈자 및 조언 댓글로 남겨주세요.<br>감사합니다 :)</p>
</blockquote>
]]></content>
      <categories>
        <category>terminal</category>
        <category>command</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>terminal command</tag>
        <tag>mac</tag>
        <tag>iTerm</tag>
      </tags>
  </entry>
  <entry>
    <title>Agile</title>
    <url>/2020/04/08/Agile/</url>
    <content><![CDATA[<p><strong>Agile(애자일) 방법론 3줄 요약</strong></p>
<ul>
<li>작업 계획을 짧은 단위로 세우고</li>
<li>시제품을 만들어 나가는 사이클을 반복</li>
<li>고객의 요구 변화에 유연하고도 신속하게 대응하는 개발 방법론 <blockquote>
<p><a href="https://m.post.naver.com/viewer/postView.nhn?volumeNo=18903174&memberNo=36647560">자료출처</a></p>
</blockquote>
</li>
</ul>
<p>요즘 에자일, 에자일 기법에 대해 2번 이상 듣기도 하고 기업에서도 에자일 기법으로 프로세스를 진행한다고 하니 무엇인지에 대한 개념도 알아보고 내 삶에 적용 시키기도 해볼 겸해서 간단하게 기록하려합니다. </p>
<p>우선, 애자일 방법이란 ?<br>기업경영 및 소프트웨어 등의 개발을 고객중심으로 진행하는 방법론</p>
<p>애자일방식의 조직운영</p>
<ol>
<li>고객중심</li>
<li>아웃풋 중심</li>
<li>유연하고도 민첩한 대응력</li>
<li>자율성과 권한을 가진 조직 운영</li>
</ol>
<blockquote>
<p><a href="http://agilemanifesto.org/">에자일 개발 선언문</a></p>
</blockquote>
<p>애자일 방법은 급변화하고 진화하고 있는 환경에 효과적으로 대응할 수 있는 방법이라고 생각됩니다. </p>
<p>피드백 댓글로 남겨주세요~!<br>감사합니다 :)</p>
]]></content>
      <categories>
        <category>concept</category>
        <category>agile</category>
      </categories>
      <tags>
        <tag>concept</tag>
        <tag>agile</tag>
        <tag>Agile</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 만들기</title>
    <url>/2020/04/05/Hexo%20create/</url>
    <content><![CDATA[<p>안녕하세요!<br>hexo 블로그 만드는 방법입니다. </p>
<p>hexo 블로그 생성전 아래 2가지를 먼저 설치해야 합니다. </p>
<ol>
<li><a href="https://nodejs.org/en/">Node.js</a><ul>
<li>Should be at least Node.js 8.10, recommends 10.0 or higher</li>
</ul>
</li>
<li><a href="https://git-scm.com/">Git</a><ul>
<li>github에서 repository를 생성해야 합니다. </li>
</ul>
</li>
</ol>
<blockquote>
<p><a href="https://greeksharifa.github.io/github/2018/06/29/github-usage-02-create-project/">참고 사이트</a></p>
</blockquote>
<blockquote>
<p><a href="https://hexo.io/ko/index.html">hexo 블로그 공식 홈페이지</a></p>
</blockquote>
<blockquote>
<p><a href="https://hexo.io/ko/docs/">hexo 블로그 설치하기 공식문서</a></p>
</blockquote>
<ol>
<li><p>터미널을 엽니다.</p>
</li>
<li><p>블로그를 만들면 폴더가 생성됩니다. 폴더를 생성하고자 하는 곳으로 가셔서 아래의 $를 제외한 명령어를 입력하세요. </p>
</li>
<li><p>띄어쓰기 대소문자 모두 그대로 입력해주세요.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. $ npm install hexo-cli -g</span><br><span class="line">2. $ hexo init blog</span><br></pre></td></tr></table></figure></li>
<li><p>블로그를 만든 폴더로 이동합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5. $ <span class="built_in">cd</span> blog</span><br><span class="line">6. $ npm install</span><br><span class="line">7.  $ hexo server</span><br></pre></td></tr></table></figure></li>
<li><p>로컬에서 hexo 블로그를 확인하실 수 있습니다. </p>
</li>
<li><p>아래 터미널의 경로로 가셔서 파일을 만듭니다. </p>
</li>
</ol>
<p><strong>터미널에서의 경로</strong></p>
<p>본인이 만든 폴더 안의 source 폴더 안에 _post</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span>/_posts/</span><br></pre></td></tr></table></figure>

<p>** 파일 이름(본인이 원하는 이름을 적으시면 됩니다.)**</p>
<p>파일명.md</p>
<p>파일 안에 원하는 내용을 적는데, 맨 위에 제목은 아래처럼 작성해주세요.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo에 글을 쓰고 사이트에 반영하기</span><br><span class="line">---</span><br><span class="line">위처럼 제목을 적으셨으면 아래줄에 내용을 입력하면 됩니다. </span><br><span class="line"></span><br><span class="line">1번 내용</span><br><span class="line">2번 내용 등</span><br><span class="line">주석을 적을 때는 &#96;#&#96;을 사용하여 적으시면 됩니다.</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://cds0804.github.io/2020/04/05/markdown-0/">마크다운 문법</a></p>
</blockquote>
<p>올릴 내용이 준비되었다면 아래와 같이 4가지 단계를 거쳐 블로그에 내용을 올리시면 됩니다. </p>
<p>1번: 헥소에 변화를 주겠다고 얘기한다.<br>2번: 헥소에 내용을 반영하겠다고 얘기한다.<br>3번: 헥소에 반영된 내용을 확인하겠다고 얘기한다. 수정이 필요하면 수정을 진행한다. 수정이 완료되면 아래 4번을 통해 내용을 공개하겠다고 얘기한다.<br>4번: 블로그에 내용을 게시하겠다고 얘기한다.</p>
<h3 id="터미널-창으로-가셔서-표시-뒤의-글자를-치세요"><a href="#터미널-창으로-가셔서-표시-뒤의-글자를-치세요" class="headerlink" title="터미널 창으로 가셔서 $ 표시 뒤의 글자를 치세요."></a>터미널 창으로 가셔서 $ 표시 뒤의 글자를 치세요.</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server <span class="comment"># 생략가능, 로컬영역에서 확인</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<blockquote>
<p>추가적인 내용은 지속적으로 편집하도록 하겠습니다. </p>
</blockquote>
<blockquote>
<p>최대한 자세히 쓰려고 노력중입니다.<br>여러가지 의견 감사히 받겠습니다.<br>댓글을 어떻게 활성화해야 하는지 몰라 여기저기 구글링중입니다. </p>
<blockquote>
<p>댓글기능을 추가하였습니다. </p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
        <category>create</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>create</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 문법에 대하여</title>
    <url>/2020/04/05/markdown-0/</url>
    <content><![CDATA[<p><strong>markdown 문법 사용법</strong></p>
<blockquote>
<p><a href="https://greeksharifa.github.io/references/2018/06/29/markdown-usage/">출처</a></p>
</blockquote>
<p><strong>python</strong> is really <em>cool</em></p>
<ul>
<li>python<ul>
<li>pandas<ul>
<li>depth1</li>
<li>depth2</li>
</ul>
</li>
<li>numpy</li>
</ul>
</li>
<li>java</li>
<li>c++</li>
<li>golang</li>
</ul>
<ol>
<li>python</li>
<li>java</li>
<li>c++</li>
</ol>
<blockquote>
<p>파이썬은 재밌다.</p>
</blockquote>
<p>y = 3x</p>
<blockquote>
<p>$y = 3x$</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.python.org/">파이썬 공식 페이지</a></p>
</blockquote>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>webcrawling</title>
    <url>/2020/04/03/webcrawling-1/</url>
    <content><![CDATA[<h3 id="1-개발자-도구를-활용한-웹페이지-분석"><a href="#1-개발자-도구를-활용한-웹페이지-분석" class="headerlink" title="1. 개발자 도구를 활용한 웹페이지 분석"></a>1. 개발자 도구를 활용한 웹페이지 분석</h3><ul>
<li><p>chrome 기준 </p>
</li>
<li><p>웹 브라우저 : html로 작성된 내용을 user(사람들)가 보기 쉽게 랜더링 해주는 기능을 함</p>
</li>
<li><p>Elements 탭</p>
</li>
<li><p>원하는 데이터로 이동하는 기능을 사용</p>
</li>
<li><p>엘레먼트 탭 : 왼쪽 상단에 있음, 원하는 데이터를 클릭했을 때 어떤 테그와 어떤 속성을 가지는지 표시해주는 역할을 함</p>
</li>
<li><p>어떤 태그와 속성을 가지는지 먼저 파악해야 함</p>
</li>
<li><p>Network 탭</p>
</li>
<li><p>Preserve log : 체크 시, 로그가 지워지지 않고 유지됨</p>
</li>
<li><p>브라우저가 서버에 요청되는 모든 요청을 로그함</p>
</li>
<li><p>url 확인 가능</p>
</li>
<li><p>요청이 많은 이유 : 이미지 등은 첫번째 요청에 한번에 오지 않고, 따로 요청하여 받아옴</p>
</li>
<li><p>처음엔 기본적인 데이터만 넘기고, 나머지 데이터는 브라우저에서 ajax 등의 기술을 이용해서 비동기적으로 가져갈 수 있도록 함</p>
</li>
<li><p>HTTP(Hyper Text Transfer Protocol) : HTML 문서 등의 리소스를 전송하는 프로토콜(규약)</p>
</li>
<li><p>클라이언트(user가 사용하는 브라우저)가 서버에 HTTP 요청(Get, Post 등)</p>
</li>
<li><p>서버에서 클라이언트로 HTTP 응답을 함</p>
</li>
<li><p>Get 요청 : 데이터를 url에 포함하여 전달(주로 리소스 요청에 사용), 정보의 공유가능</p>
</li>
<li><p>Post 요청 : 데이터를 Form data에 포함하여 전달(주로 로그인에 사용)</p>
</li>
<li><p>rendering(렌더링) : html을 받아 사용자(사람들)이 볼 수 있도록 출력해주는 작업</p>
</li>
</ul>
]]></content>
      <categories>
        <category>crawling</category>
        <category>concept</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>webcrawling</tag>
        <tag>html</tag>
        <tag>get</tag>
        <tag>post</tag>
        <tag>randering</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>안녕하세요 !!</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
